# generated by datamodel-codegen:
#   filename:  rtcObjectiveConfig.json
#   timestamp: 2022-09-27T18:48:35+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import Extra, Field

from hydrolib.core.io.rtc.basemodel import RtcBaseModel

from . import _


class AggregationTypeEnumStringType(str, Enum):
    BLOCK = 'BLOCK'
    LINEAR = 'LINEAR'


class StepIndexItem(RtcBaseModel):
    __root__: int = Field(..., ge=0, le=2147483647)


class BoundStateStepIndicesComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    stepIndex: List[StepIndexItem] = Field(..., min_items=1)


class EnsembleModeEnumStringType(str, Enum):
    JOINT = 'JOINT'
    TREE = 'TREE'
    INDEPENDENT = 'INDEPENDENT'


class ExternalBooleanSimpleTypeItem(RtcBaseModel):
    __root__: str = Field(..., regex='^([\\$][\\(-_a-z]+[\\$])$')


class ExternalBooleanSimpleType(RtcBaseModel):
    __root__: Union[bool, ExternalBooleanSimpleTypeItem]


class ExternalIntegerSimpleTypeItem(RtcBaseModel):
    __root__: str = Field(..., regex='^([\\$][\\(-_a-z]+[\\$])$')


class ExternalIntegerSimpleType(RtcBaseModel):
    __root__: Union[int, ExternalIntegerSimpleTypeItem]


class ExternalParameterSimpleTypeItem(RtcBaseModel):
    __root__: str = Field(..., regex='^([#-\\$][\\(-_a-z]+[#-\\$])$')


class ExternalParameterSimpleType(RtcBaseModel):
    __root__: Union[float, ExternalParameterSimpleTypeItem]


class TimeSeriesSimpleType(RtcBaseModel):
    __root__: str = Field(..., min_length=1)


class TimeZoneSimpleType(RtcBaseModel):
    __root__: float = Field(
        ...,
        description='The timeZone (in decimal hours shift from GMT)\n            e.g. -1.0 or 3.5. If not present GMT is assumed',
    )


class VariableTypeEnumStringType(str, Enum):
    CONTINUOUS = 'CONTINUOUS'
    INTEGER = 'INTEGER'
    TIMEINSTANCE = 'TIMEINSTANCE'


class DateType(RtcBaseModel):
    __root__: str = Field(
        ..., regex='^([\\d][\\d][\\d][\\d]\\-[\\d][\\d]\\-[\\d][\\d])$'
    )


class NStepModeEnum(str, Enum):
    CONTINUOUS = 'CONTINUOUS'
    STEP = 'STEP'


class TimeSeriesType(str, Enum):
    """
    Type of data, either accumulative or instantaneous.
                        For accumulative data the time/date of the event is
                        the moment at which the data was gathered.
            
    """

    accumulative = 'accumulative'
    instantaneous = 'instantaneous'


class TimeStepUnitEnumStringType(str, Enum):
    second = 'second'
    minute = 'minute'
    hour = 'hour'
    day = 'day'
    week = 'week'


class TimeType(RtcBaseModel):
    __root__: str = Field(..., regex='^([\\d][\\d]\\:[\\d][\\d]\\:[\\d][\\d])$')


class XsAnySimpleType(RtcBaseModel):
    __root__: Union[str, float, bool]


class XsBoolean(RtcBaseModel):
    __root__: bool


class XsDouble(RtcBaseModel):
    __root__: float


class XsInt(RtcBaseModel):
    __root__: int = Field(..., ge=-2147483648, le=2147483647)


class XsInteger(RtcBaseModel):
    __root__: int


class XsPositiveInteger(RtcBaseModel):
    __root__: int = Field(..., ge=1)


class XsString(RtcBaseModel):
    __root__: str


class AggregationEquidistantComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    nAggregationSteps: XsInteger = Field(
        ...,
        description='aggregation, simulation time nOutputSteps (simulation) = nInputSteps (optimizer) * nAggregationSteps',
    )
    type: AggregationTypeEnumStringType = Field(
        ..., description='interpolation type: block or linear'
    )


class AggregationNonEquidistantComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    nInputSteps: XsInteger = Field(..., description='number of input time steps')
    nOutputSteps: XsInteger = Field(..., description='number of output time steps')
    stepIndex: List[XsInteger] = Field(..., min_items=1)
    type: AggregationTypeEnumStringType = Field(
        ..., description='interpolation type: block or linear'
    )


class AverageComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    inputDelayVector: Optional[XsString] = None
    nStep: Optional[int] = Field(None, description='fixed value for nStep', ge=1)
    nStepSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='nStep value is provided as a time series, the average is computed if the value is a positive integer',
    )


class BoundAverageComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    nStep: Optional[int] = Field(None, description='fixed value for nStep', ge=1)
    nStepSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='nStep value is provided as a time series, the rate-of-change is computed if the value is a positive integer',
    )
    variableDelayVector: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='optional vector with historical values (t less T0) to look into the past, it is required for nStep>1, in case of the nStepSeries the user may ensure to not refer to historical value and omit this element ',
    )


class BoundStateComponentsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    component: List[XsString] = Field(..., min_items=1)


class BoundStateVariablesComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    variable: List[TimeSeriesSimpleType] = Field(..., min_items=1)


class BoundVariableAverageComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    average: BoundAverageComplexType
    lowerBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='lower bound as a scalar'
    )
    lowerBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='lower bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    upperBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='upper bound as a scalar value'
    )
    upperBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='upper bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    variable: TimeSeriesSimpleType = Field(
        ...,
        description="reference to the time series in the time series database (refers to the file 'rtcDataConfig.xml')",
    )


class BoundVariableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    lowerBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='lower bound as a scalar'
    )
    lowerBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='lower bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    upperBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='upper bound as a scalar value'
    )
    upperBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='upper bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    variable: TimeSeriesSimpleType = Field(
        ...,
        description="reference to the time series in the time series database (refers to the file 'rtcDataConfig.xml')",
    )


class ChanceConstraintComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    f: XsDouble
    input: TimeSeriesSimpleType
    lowerBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='lower bound as a scalar'
    )
    lowerBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='lower bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    order: XsDouble
    upperBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='upper bound as a scalar value'
    )
    upperBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='upper bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    weightingFactor: Optional[List[ExternalParameterSimpleType]] = None
    weightingFactorFinal: Optional[List[ExternalParameterSimpleType]] = None
    weightingFactorSeries: Optional[TimeSeriesSimpleType] = None


class ChanceVariableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    f: XsDouble
    lowerBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='lower bound as a scalar'
    )
    lowerBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='lower bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    upperBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='upper bound as a scalar value'
    )
    upperBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='upper bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    variable: TimeSeriesSimpleType = Field(
        ...,
        description="reference to the time series in the time series database (refers to the file 'rtcDataConfig.xml')",
    )


class DateTimeComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_date: DateType
    attr_time: TimeType


class MultipleDelayComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    nStep: Optional[int] = Field(None, description='fixed value for nStep', ge=1)
    nStepCorrection: Optional[XsBoolean] = Field(
        None,
        description='if TRUE, the rate-of-change bounds are given as change per time step, if FALSE, the bounds represent the total change over all time steps, default is FALSE ',
    )
    nStepMode: Optional[NStepModeEnum] = Field(
        None,
        description='STEP only computes the difference between T0-nStep and T0, CONTINUOUS computes the differences also at all intermediate steps',
    )
    nStepSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='nStep value is provided as a time series, the rate-of-change is computed if the value is a positive integer',
    )
    variableDelayVector: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='optional vector with historical values (t less T0) to look into the past, it is required for nStep>1, in case of the nStepSeries the user may ensure to not refer to historical value and omit this element ',
    )


class OutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    JAcc: TimeSeriesSimpleType = Field(
        ...,
        description='time series reference for accumulating objective function value',
    )
    JInc: TimeSeriesSimpleType = Field(
        ...,
        description='time series reference for incremental objective function value',
    )


class StateAverageComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    nStep: Optional[int] = Field(None, description='fixed value for nStep', ge=1)
    nStepSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='nStep value is provided as a time series, the rate-of-change is computed if the value is a positive integer',
    )
    stateDelayVector: TimeSeriesSimpleType = Field(
        ...,
        description='optional vector with historical values (t less T0) to look into the past, it is required for nStep>1, in case of the nStepSeries the user may ensure to not refer to historical value and omit this element ',
    )


class TermAbsoluteComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    average: Optional[AverageComplexType] = Field(
        None,
        description='optional definition of an aggregation period over several time steps',
    )
    input: TimeSeriesSimpleType
    lowerBranch: Optional[XsBoolean] = None
    order: XsDouble
    setPoint: Optional[ExternalParameterSimpleType] = None
    setPointSeries: Optional[TimeSeriesSimpleType] = None
    upperBranch: Optional[XsBoolean] = None
    weightingFactor: Optional[List[ExternalParameterSimpleType]] = None
    weightingFactorFinal: Optional[List[ExternalParameterSimpleType]] = None
    weightingFactorSeries: Optional[TimeSeriesSimpleType] = None


class TermEnsembleChoiceComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_active: Optional[ExternalBooleanSimpleType] = None
    chanceConstraint: Optional[ChanceConstraintComplexType] = None


class TermEnsembleComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    termEnsemble: List[TermEnsembleChoiceComplexType] = Field(..., min_items=1)


class TermLinearComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    input: TimeSeriesSimpleType
    setPoint: Optional[ExternalParameterSimpleType] = None
    setPointSeries: Optional[TimeSeriesSimpleType] = None
    weightingFactor: Optional[List[ExternalParameterSimpleType]] = None
    weightingFactorFinal: Optional[List[ExternalParameterSimpleType]] = None
    weightingFactorSeries: Optional[TimeSeriesSimpleType] = None


class TermMSEComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    flag: Optional[TimeSeriesSimpleType] = None
    observation: TimeSeriesSimpleType
    simulation: TimeSeriesSimpleType


class TermMaxComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    input: TimeSeriesSimpleType


class TermNSEComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    flag: Optional[TimeSeriesSimpleType] = None
    observation: TimeSeriesSimpleType
    simulation: TimeSeriesSimpleType
    skipNFirstSteps: Optional[XsInt] = None


class TermRMSEComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    flag: Optional[TimeSeriesSimpleType] = None
    observation: TimeSeriesSimpleType
    simulation: TimeSeriesSimpleType


class TermRVComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    flag: Optional[TimeSeriesSimpleType] = None
    observation: TimeSeriesSimpleType
    simulation: TimeSeriesSimpleType
    skipNFirstSteps: Optional[XsInt] = None
    w: XsDouble


class TermRateOfChangeComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    input: TimeSeriesSimpleType
    lowerBranch: Optional[XsBoolean] = None
    multipleDelay: Optional[MultipleDelayComplexType] = None
    order: XsDouble
    setPoint: Optional[XsDouble] = None
    setPointSeries: Optional[TimeSeriesSimpleType] = None
    upperBranch: Optional[XsBoolean] = None
    weightingFactor: Optional[List[ExternalParameterSimpleType]] = None
    weightingFactorSeries: Optional[TimeSeriesSimpleType] = None


class TermRelativeVolumeComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    flag: Optional[TimeSeriesSimpleType] = None
    observation: TimeSeriesSimpleType
    simulation: TimeSeriesSimpleType
    skipNFirstSteps: Optional[XsInt] = None


class TermSumComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    flag: Optional[TimeSeriesSimpleType] = None
    simulation: TimeSeriesSimpleType


class TimeStepComplexType(RtcBaseModel):
    """
    The timeunit element has three attributes, unit and devider and multiplier.
            the unit is second, minute, hour, week, month year.
            The divider attribute is optional (default = 1).
    """

    class Config:
        extra = Extra.forbid

    attr_divider: Optional[XsPositiveInteger] = None
    attr_multiplier: Optional[XsPositiveInteger] = None
    attr_unit: TimeStepUnitEnumStringType


class AggregationComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    constant: Optional[XsAnySimpleType] = None
    equidistant: Optional[AggregationEquidistantComplexType] = Field(
        None,
        description='aggregation with equidistent steps, note that the number of time steps in the model needs to be a multiple of the aggregation step, i.e. 2,4,6,8 steps in case of an aggregation step of 2',
    )
    non_equidistant: Optional[AggregationNonEquidistantComplexType] = Field(
        None, alias='non-equidistant', description='still not implemented'
    )


class BoundStateComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    attr_scalingFactor: Optional[XsDouble] = None
    average: Optional[StateAverageComplexType] = None
    components: BoundStateComponentsComplexType = Field(
        ...,
        description='simulation components (in the order of the simulation model) which compute the state based on the variables (both defined below)',
    )
    lowerBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='lower bound as a scalar'
    )
    lowerBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='lower bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    nStep: Optional[int] = Field(None, ge=1)
    state: TimeSeriesSimpleType = Field(
        ..., description='reference to the state to constrain'
    )
    stepIndices: Optional[BoundStateStepIndicesComplexType] = None
    upperBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='upper bound as a scalar value'
    )
    upperBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='upper bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    variables: BoundStateVariablesComplexType = Field(
        ...,
        description='references to the optimization variable which contribute to the computation of the state',
    )


class BoundVariableRateOfChangeComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    lowerBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='lower bound as a scalar'
    )
    lowerBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='lower bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    multipleDelay: Optional[MultipleDelayComplexType] = Field(
        None, description='option to look back more than a single time step'
    )
    upperBound: Optional[ExternalParameterSimpleType] = Field(
        None, description='upper bound as a scalar value'
    )
    upperBoundSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='upper bound from a times series, a missing value will switch out the constraint for this specific time step',
    )
    variable: TimeSeriesSimpleType = Field(
        ...,
        description="reference to the time series in the time series database (refers to the file 'rtcDataConfig.xml')",
    )


class ConstraintChoiceComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_active: Optional[ExternalBooleanSimpleType] = None
    boundState: Optional[BoundStateComplexType] = Field(
        None, description='implements bounds on states or model outputs'
    )
    boundVariable: Optional[BoundVariableComplexType] = Field(
        None, description='implement bounds on the optimization variable'
    )
    boundVariableAverage: Optional[BoundVariableAverageComplexType] = Field(
        None,
        description='defines a bound on an average value of an optimization variable for example to enable min/max bounds on aggregated time series',
    )
    boundVariableRateOfChange: Optional[BoundVariableRateOfChangeComplexType] = Field(
        None,
        description='implements bounds on the rate-of-change of an optimization variable',
    )
    chanceBoundVariable: Optional[ChanceVariableComplexType] = Field(
        None, description='implement chance constraints on the optimization variable'
    )


class ConstraintsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    constraint: List[ConstraintChoiceComplexType] = Field(..., min_items=1)


class TermChoiceComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_active: Optional[ExternalBooleanSimpleType] = None
    absolute: Optional[TermAbsoluteComplexType] = None
    linear: Optional[TermLinearComplexType] = None
    max: Optional[TermMaxComplexType] = None
    mse: Optional[TermMSEComplexType] = None
    nse: Optional[TermNSEComplexType] = None
    rateOfChange: Optional[TermRateOfChangeComplexType] = None
    relativeVolume: Optional[TermRelativeVolumeComplexType] = None
    rmse: Optional[TermRMSEComplexType] = None
    rv: Optional[TermRVComplexType] = None
    sum: Optional[TermSumComplexType] = None


class TermComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    term: List[TermChoiceComplexType] = Field(..., min_items=1)


class VariableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_active: Optional[ExternalBooleanSimpleType] = None
    attr_ensembleMode: Optional[EnsembleModeEnumStringType] = None
    attr_id: TimeSeriesSimpleType
    attr_max: Optional[ExternalParameterSimpleType] = None
    attr_min: Optional[ExternalParameterSimpleType] = None
    attr_scalingFactor: Optional[XsDouble] = None
    attr_type: VariableTypeEnumStringType
    aggregation: Optional[AggregationComplexType] = None


class VariablesComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    aggregation: Optional[AggregationComplexType] = None
    variable: List[VariableComplexType] = Field(..., min_items=1)


class RtcObjectiveConfigComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    constraints: Optional[ConstraintsComplexType] = None
    output: Optional[OutputComplexType] = None
    terms: Optional[TermComplexType] = None
    termsEnsemble: Optional[TermEnsembleComplexType] = None
    variables: Optional[VariablesComplexType] = None


class Model(RtcBaseModel):
    """
    JSON Schema generated by XMLSpy v2019 rel. 3 sp1 (x64) (http://www.altova.com)
    """

    class Config:
        extra = Extra.forbid

    attr_xmlns: Optional[Any] = 'http://www.wldelft.nl/fews'
    attr_xmlns_xs: Optional[Any] = Field(
        'http://www.w3.org/2001/XMLSchema', alias='attr_xmlns:xs'
    )
    rtcObjectiveConfig: Optional[_.RtcObjectiveConfig] = None
