# generated by datamodel-codegen:
#   filename:  rtcToolsConfig.json
#   timestamp: 2022-09-23T10:56:30+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Extra, Field, conint, constr

from . import _
from ._._ import rtc_ExternalParameterSimpleType, rtc_TimeSeriesSimpleType, xs_string


class RtcAggregationTypeEnumStringType(Enum):
    BLOCK = "BLOCK"
    LINEAR = "LINEAR"


class RtcBranchTypeEnumStringType(Enum):
    KINEMATIC = "KINEMATIC"
    DIFFUSIVE = "DIFFUSIVE"
    DIFFUSIVEPLUSLOCAL = "DIFFUSIVEPLUSLOCAL"


class RtcCapacityReferenceEnumStringType(Enum):
    UPSTREAMLEVEL = "UPSTREAMLEVEL"
    HEAD = "HEAD"


class _MonthOfYear(Enum):
    January = "January"
    February = "February"
    March = "March"
    April = "April"
    May = "May"
    June = "June"
    July = "July"
    August = "August"
    September = "September"
    October = "October"
    November = "November"
    December = "December"


class RtcEnsembleModeEnumStringType(Enum):
    JOINT = "JOINT"
    TREE = "TREE"
    INDEPENDENT = "INDEPENDENT"


class RtcEquationEnumStringType(Enum):
    KINEMATIC = "KINEMATIC"
    DIFFUSIVE = "DIFFUSIVE"
    INERTIAL = "INERTIAL"


class RtcExternalBooleanSimpleType(BaseModel):
    __root__: Union[bool, constr(regex=r"^([\$][\(-_a-z]+[\$])$")]


class RtcExternalIntegerSimpleType(BaseModel):
    __root__: Union[int, constr(regex=r"^([\$][\(-_a-z]+[\$])$")]


class RtcExternalParameterSimpleType(BaseModel):
    __root__: Union[float, constr(regex=r"^([#-\$][\(-_a-z]+[#-\$])$")]


class RtcECORR(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcRFCF(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcSFCF(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTT(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTTI(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcHBVParameterInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_ECORR: Optional[RtcECORR] = Field(
        None, alias="rtc:ECORR", description="correction factor for EP"
    )
    rtc_RFCF: Optional[RtcRFCF] = Field(
        None, alias="rtc:RFCF", description="correction factor for rainfall"
    )
    rtc_SFCF: Optional[RtcSFCF] = Field(
        None, alias="rtc:SFCF", description="correction factor for snow"
    )
    rtc_TT: RtcTT = Field(
        ...,
        alias="rtc:TT",
        description="temperature limit for snow / rain [oC], normally close to 0 ",
    )
    rtc_TTI: RtcTTI = Field(
        ...,
        alias="rtc:TTI",
        description="temperature interval with a mixture of snow / rain [oC]",
    )


class RtcLIC(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcHBVParameterInterceptionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_LIC: RtcLIC = Field(
        ..., alias="rtc:LIC", description="maximum interception storage"
    )


class RtcALPHA(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcAREA(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcK(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcK1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcPERC1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcHBVParameterResponseComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_ALPHA: RtcALPHA = Field(
        ...,
        alias="rtc:ALPHA",
        description="response box parameter [-], usually between 1.0 and 2.0",
    )
    rtc_AREA: RtcAREA = Field(..., alias="rtc:AREA", description="catchment area [km2]")
    rtc_K: RtcK = Field(..., alias="rtc:K", description="recession coefficient")
    rtc_K1: RtcK1 = Field(
        ..., alias="rtc:K1", description="recession coefficient [1/day]"
    )
    rtc_PERC: RtcPERC1 = Field(
        ...,
        alias="rtc:PERC",
        description="percolation from upper to lower response box [mm/day], usually between 0 and 6",
    )


class RtcCFMAX(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcCFR(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcCWH(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTTM(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcHBVParameterSnowComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_CFMAX: RtcCFMAX = Field(
        ...,
        alias="rtc:CFMAX",
        description="degree day factor [mm/(oC*day)], varies normally between 1.5 and 4, 2 and 3.5 can be used in forested and open\nlandscape respectively",
    )
    rtc_CFR: RtcCFR = Field(
        ..., alias="rtc:CFR", description="refreezing factor [-], about 0.05"
    )
    rtc_CWH: RtcCWH = Field(
        ..., alias="rtc:CWH", description="water holding capacity [-], usually 0.1"
    )
    rtc_TTM: RtcTTM = Field(
        ..., alias="rtc:TTM", description="temperature limit for melting [oC]"
    )


class RtcBETA(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcCFLUX(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcETF(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcFC(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcLP(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcHBVParameterSoilComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_BETA: RtcBETA = Field(
        ...,
        alias="rtc:BETA",
        description="parameter in soil routine [-], usually between 1 and 6",
    )
    rtc_CFLUX: RtcCFLUX = Field(
        ..., alias="rtc:CFLUX", description="maximum value of CF"
    )
    rtc_ETF: RtcETF = Field(
        ..., alias="rtc:ETF", description="temperature correction factor"
    )
    rtc_FC: RtcFC = Field(
        ..., alias="rtc:FC", description="field capacity [mm], between 50 and 500"
    )
    rtc_LP: RtcLP = Field(
        ...,
        alias="rtc:LP",
        description="limit for potential evapotranspiration [-], in the range between 0.3 and 1",
    )


class RtcHydraulicModelModeEnumStringType(Enum):
    SEQUENTIAL_EXPLICIT = "SEQUENTIAL_EXPLICIT"
    SEQUENTIAL_IMPLICIT = "SEQUENTIAL_IMPLICIT"
    SIMULTANEOUS = "SIMULTANEOUS"


class RtcLayerIDSimpleType(BaseModel):
    __root__: constr(regex=r"^([L][0-9]+)$")


class _1(Enum):
    MONOTON = "MONOTON"
    POSITIVE = "POSITIVE"


class RtcPropertyItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[_1] = Field(None, alias="$")


class RtcAREA1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcKB(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcKS(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTB1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTB2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTS1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTS2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcLorentGeversParameterResponseComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: RtcAREA1 = Field(..., alias="rtc:AREA")
    rtc_KB: RtcKB = Field(..., alias="rtc:KB")
    rtc_KS: RtcKS = Field(..., alias="rtc:KS")
    rtc_TB1: RtcTB1 = Field(..., alias="rtc:TB1")
    rtc_TB2: RtcTB2 = Field(..., alias="rtc:TB2")
    rtc_TS1: RtcTS1 = Field(..., alias="rtc:TS1")
    rtc_TS2: RtcTS2 = Field(..., alias="rtc:TS2")


class RtcBETA1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcPMAX(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcSMAX(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcLorentGeversParameterSoilComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_BETA: RtcBETA1 = Field(..., alias="rtc:BETA")
    rtc_PMAX: RtcPMAX = Field(..., alias="rtc:PMAX")
    rtc_SMAX: RtcSMAX = Field(..., alias="rtc:SMAX")


class RtcMathematicalOperatorEnumStringType(Enum):
    _ = "+"
    __1 = "-"
    __2 = "*"
    __3 = "/"
    min = "min"
    max = "max"
    __4 = "^"


class RtcMergerSplitterEnumStringType(Enum):
    AVERAGE = "AVERAGE"
    DATAHIERARCHY = "DATAHIERARCHY"
    SUM = "SUM"


class RtcBias(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcNeuronIDSimpleType(BaseModel):
    __root__: constr(regex=r"^([L][0-9]+[N][0-9]+)$")


class RtcAREA2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcStateMax(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcStateMin(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcAREA3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcCFLUX1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcFC1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterCapillaryFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: Optional[RtcAREA3] = Field(
        None, alias="rtc:AREA", description="area [km2]"
    )
    rtc_CFLUX: RtcCFLUX1 = Field(
        ..., alias="rtc:CFLUX", description="maximum value of capillary flow [mm/d]"
    )
    rtc_FC: RtcFC1 = Field(..., alias="rtc:FC", description="field capacity [mm]")


class RtcAREA4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcD4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcFC2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcLP1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterEvaporationActualStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: Optional[RtcAREA4] = Field(
        None, alias="rtc:AREA", description="area [1000 m2], default = 1.0"
    )
    rtc_D: Optional[RtcD4] = Field(
        None,
        alias="rtc:D",
        description="distance measure for smoothing the transitions [-]",
    )
    rtc_FC: RtcFC2 = Field(..., alias="rtc:FC", description="field capacity [mm]")
    rtc_LP: RtcLP1 = Field(
        ..., alias="rtc:LP", description="limit for potential evaporation [-]"
    )


class RtcAREA5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterEvaporationInterceptionStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: Optional[RtcAREA5] = Field(
        None, alias="rtc:AREA", description="area [km2]"
    )


class RtcECORR1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcETF1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterEvaporationPotentialComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_ECORR: Optional[RtcECORR1] = Field(
        None,
        alias="rtc:ECORR",
        description="evaporation correction factor, default = 1.0",
    )
    rtc_ETF: RtcETF1 = Field(
        ..., alias="rtc:ETF", description="temperature correction factor"
    )


class RtcAREA6(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcIRRCONST(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcIRRTHR(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcM(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterIrrigationStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: Optional[RtcAREA6] = Field(
        None, alias="rtc:AREA", description="area [km2], default = 1.0"
    )
    rtc_IRR_CONST: Optional[RtcIRRCONST] = Field(
        None, alias="rtc:IRR_CONST", description="costant irrigation flux [mm/d]"
    )
    rtc_IRR_THR: RtcIRRTHR = Field(
        ...,
        alias="rtc:IRR_THR",
        description="Threshold of the downstream node under which irrigation is needed [mm]",
    )
    rtc_M: Optional[RtcM] = Field(None, alias="rtc:M", description="smoothing factor")


class RtcAREA7(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcCFMAX1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcCFR1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcM1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTTM1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterMeltRefreezingStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: Optional[RtcAREA7] = Field(
        None, alias="rtc:AREA", description="area [km2]"
    )
    rtc_CFMAX: RtcCFMAX1 = Field(
        ..., alias="rtc:CFMAX", description="degree day factor [mm/day]"
    )
    rtc_CFR: RtcCFR1 = Field(..., alias="rtc:CFR", description="refreezing factor [-]")
    rtc_M: Optional[RtcM1] = Field(
        None,
        alias="rtc:M",
        description="smoothing factor, default = 0.05, more smoothing for higher value and vice versa",
    )
    rtc_TTM: RtcTTM1 = Field(
        ..., alias="rtc:TTM", description="temperature limit for melting [oC]"
    )


class RtcAREA8(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcPERC2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterPercolationStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: Optional[RtcAREA8] = Field(
        None, alias="rtc:AREA", description="area [km2]"
    )
    rtc_PERC: RtcPERC2 = Field(..., alias="rtc:PERC", description="percolation [mm/d]")


class RtcAREA9(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcFRAC(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcLIC1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcM2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterReleaseAboveThresholdStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: Optional[RtcAREA9] = Field(
        None, alias="rtc:AREA", description="area [km2], default = 1.0"
    )
    rtc_FRAC: Optional[RtcFRAC] = Field(
        None,
        alias="rtc:FRAC",
        description="percentage of the flow which flows towards the bucket of interest. The permitted range is between 0 and 100",
    )
    rtc_LIC: RtcLIC1 = Field(
        ...,
        alias="rtc:LIC",
        description="upper limit of (interception) storage node [mm]",
    )
    rtc_M: Optional[RtcM2] = Field(None, alias="rtc:M", description="smoothing factor")


class RtcAREA10(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterReleaseTotalComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: RtcAREA10 = Field(..., alias="rtc:AREA", description="area [km2]")


class RtcAREA11(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcM3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcWHC(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterReleaseWaterContentStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: Optional[RtcAREA11] = Field(
        None, alias="rtc:AREA", description="area [km2]"
    )
    rtc_M: Optional[RtcM3] = Field(
        None, alias="rtc:M", description="smoothing coefficient"
    )
    rtc_WHC: RtcWHC = Field(
        ..., alias="rtc:WHC", description="water holding capacity [-]"
    )


class RtcALPHA1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcAREA12(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcK2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterResponseStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_ALPHA: Optional[RtcALPHA1] = Field(
        None, alias="rtc:ALPHA", description="response box parameter [-], default = 0.0"
    )
    rtc_AREA: Optional[RtcAREA12] = Field(
        None, alias="rtc:AREA", description="area [km2]"
    )
    rtc_K: RtcK2 = Field(..., alias="rtc:K", description="recession coefficient [1/d]")


class RtcD5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcRFCF1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcSFCF1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTT1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTTI1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterSnowRainJunctionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_D: Optional[RtcD5] = Field(
        None,
        alias="rtc:D",
        description="smoothing parameter for switching between a linear ramp (D=0.0) and a sigmoid function (D=1.0)",
    )
    rtc_RFCF: Optional[RtcRFCF1] = Field(
        None,
        alias="rtc:RFCF",
        description="rainfall correction factor [-], default is 1.0",
    )
    rtc_SFCF: Optional[RtcSFCF1] = Field(
        None,
        alias="rtc:SFCF",
        description="snowfall correction factor [-], default is 1.0",
    )
    rtc_TT: RtcTT1 = Field(
        ..., alias="rtc:TT", description="temperature limit for snow and rainfall [oC]"
    )
    rtc_TTI: RtcTTI1 = Field(
        ...,
        alias="rtc:TTI",
        description="temperature interval with a mixture of snow and rainfall [K]",
    )


class RtcAREA13(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcBETA2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcFC3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterSoilRunoffStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: Optional[RtcAREA13] = Field(
        None, alias="rtc:AREA", description="area [km2]"
    )
    rtc_BETA: RtcBETA2 = Field(
        ..., alias="rtc:BETA", description="parameter in soil routine [-]"
    )
    rtc_FC: RtcFC3 = Field(..., alias="rtc:FC", description="field capacity [mm]")


class RtcAREA14(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcD6(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcM4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcMINUP(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterWaterDistributionConstantStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: Optional[RtcAREA14] = Field(
        None, alias="rtc:AREA", description="area [km2], default = 1.0"
    )
    rtc_D: RtcD6 = Field(
        ..., alias="rtc:D", description="capacity of demand/abstraction [m3/s]"
    )
    rtc_M: Optional[RtcM4] = Field(None, alias="rtc:M", description="smoothing factor")
    rtc_MIN_UP: Optional[RtcMINUP] = Field(
        None,
        alias="rtc:MIN_UP",
        description="minimum abstraction level upstream [mm]. Default 0, till empty.",
    )


class RtcAREA15(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcM5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcMINUP1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParameterWaterDistributionVariableStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AREA: Optional[RtcAREA15] = Field(
        None, alias="rtc:AREA", description="area [km2], default = 1.0"
    )
    rtc_M: Optional[RtcM5] = Field(None, alias="rtc:M", description="smoothing factor")
    rtc_MIN_UP: Optional[RtcMINUP1] = Field(
        None,
        alias="rtc:MIN_UP",
        description="minimum abstraction level upstream [mm]. Default 0, till empty.",
    )


class RtcALPHA2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcAREA16(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcK3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcMAXGFLOW(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcParametergroundwaterFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_ALPHA: RtcALPHA2 = Field(
        ..., alias="rtc:ALPHA", description="Ground water reaction coefficient"
    )
    rtc_AREA: Optional[RtcAREA16] = Field(
        None, alias="rtc:AREA", description="area [km2]"
    )
    rtc_K: RtcK3 = Field(
        ..., alias="rtc:K", description="Ground water Conductivity [1/d]"
    )
    rtc_MAX_GFLOW: RtcMAXGFLOW = Field(
        ..., alias="rtc:MAX_GFLOW", description="Maximum groundwater flow [mm/d]"
    )


class _11(Enum):
    NATIVE = "NATIVE"
    SOBEK2 = "SOBEK2"
    PIDPOS = "PIDPOS"
    PIDVEL = "PIDVEL"


class RtcMode3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[_11] = Field(None, alias="$")


class RtcX1Value1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcX2Value1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTailwaterConstant(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTurbineEfficiencyConstant(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcOF(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcPMValue(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcPXValue(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcQSValue(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcQTXValue(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcPt(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTLag(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcX10(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcY14(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcSRMParameterComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_Pt: RtcPt = Field(
        ..., alias="rtc:Pt", description="precipitation threshold [mm]"
    )
    rtc_TLag: RtcTLag = Field(
        ..., alias="rtc:TLag", description="Time lag of input data [h]"
    )
    rtc_x: RtcX10 = Field(..., alias="rtc:x", description="recession coefficient 1")
    rtc_y: RtcY14 = Field(..., alias="rtc:y", description="recession coefficient 2")


class RtcTcr1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcTcr2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcA5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcArea(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcSpatialEnumStringType(Enum):
    CENTRAL = "CENTRAL"
    UPWIND = "UPWIND"


class RtcA6(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcB3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcC3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcD7(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcA7(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class _12(Enum):
    NATIVE = "NATIVE"
    RETAINVALUEWHENINACTIVE = "RETAINVALUEWHENINACTIVE"


class RtcMode5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[_12] = Field(None, alias="$")


class RtcTimeSeriesSimpleType(BaseModel):
    __root__: constr(min_length=1)


class RtcTimeZoneSimpleType(BaseModel):
    __root__: float = Field(
        ...,
        description="The timeZone (in decimal hours shift from GMT)\n            e.g. -1.0 or 3.5. If not present GMT is assumed",
    )


class RtcInput(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcStatus4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTriggerInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_status: RtcStatus4 = Field(..., alias="rtc:status")


class RtcStatus5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTimeFalse1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTimeTrue1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTriggerOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_status: RtcStatus5 = Field(..., alias="rtc:status")
    rtc_timeFalse: Optional[RtcTimeFalse1] = Field(None, alias="rtc:timeFalse")
    rtc_timeTrue: Optional[RtcTimeTrue1] = Field(None, alias="rtc:timeTrue")


class RtcRelativeRelease(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRelease3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTurbineInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_relativeRelease: Optional[RtcRelativeRelease] = Field(
        None,
        alias="rtc:relativeRelease",
        description="provision of relative turbine release, 1 = maximum capacity",
    )
    rtc_release: Optional[RtcRelease3] = Field(
        None, alias="rtc:release", description="provision of absolute turbine release"
    )


class RtcPower(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTurbineOutputCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_power: RtcPower = Field(..., alias="rtc:power", description="power output [MW]")


class RtcDischarge3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPowerProduction(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTurbineOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_discharge: RtcDischarge3 = Field(
        ..., alias="rtc:discharge", description="discharge in m3/s"
    )
    rtc_powerProduction: RtcPowerProduction = Field(
        ..., alias="rtc:powerProduction", description="power production in MW"
    )


class RtcOutput2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRelease4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcUOutletInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_release: RtcRelease4 = Field(..., alias="rtc:release")


class RtcNStep(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcX12(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcUnitDelayInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: RtcX12 = Field(..., alias="rtc:x")


class RtcYItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcYFinal(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcYMax1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcYMean(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcYMin1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcYSum1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcYVector1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcUnitDelayOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_y: Optional[List[RtcYItem]] = Field(None, alias="rtc:y")
    rtc_yFinal: Optional[RtcYFinal] = Field(
        None,
        alias="rtc:yFinal",
        description="optional result of the delay operator, identical to yVector[end] if the delay is a multiple of the time step, required in case of sub time steps",
    )
    rtc_yMax: Optional[RtcYMax1] = Field(None, alias="rtc:yMax")
    rtc_yMean: Optional[RtcYMean] = Field(
        None, alias="rtc:yMean", description="optional mean of input and outputs"
    )
    rtc_yMin: Optional[RtcYMin1] = Field(None, alias="rtc:yMin")
    rtc_ySum: Optional[RtcYSum1] = Field(
        None, alias="rtc:ySum", description="optional sum of input and outputs"
    )
    rtc_yVector: Optional[RtcYVector1] = Field(None, alias="rtc:yVector")


class RtcX13(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcUnitHydrographInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: RtcX13 = Field(..., alias="rtc:x")


class RtcXDelayItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcXDelayVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcY18(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcUnitHydrographOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_xDelay: Optional[List[RtcXDelayItem]] = Field(None, alias="rtc:xDelay")
    rtc_xDelayVector: Optional[RtcXDelayVector] = Field(
        None,
        alias="rtc:xDelayVector",
        description="definition of delay vector, configure one element less than weights defined above",
    )
    rtc_y: RtcY18 = Field(..., alias="rtc:y", description="result of unit hydrograph")


class RtcNSteps(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcUnitTypeEnumStringType(Enum):
    SI = "SI"
    Imperial = "Imperial"


class RtcVariableTypeEnumStringType(Enum):
    CONTINUOUS = "CONTINUOUS"
    INTEGER = "INTEGER"
    TIMEINSTANCE = "TIMEINSTANCE"


class RtcCaseLangetenEnumStringType(Enum):
    integer_1 = 1
    integer_2 = 2


class RtcDateType(BaseModel):
    __root__: constr(regex=r"^([\d][\d][\d][\d]\-[\d][\d]\-[\d][\d])$")


class RtcFlowDirectionEnumStringTypeEnum(Enum):
    POSITIVE = "POSITIVE"
    NEGATIVE = "NEGATIVE"
    BOTH = "BOTH"


class RtcFlowDirectionEnumStringType(BaseModel):
    __root__: Union[
        RtcFlowDirectionEnumStringTypeEnum, constr(regex=r"^([\$][\(-_a-z]+[\$])$")
    ] = Field(..., description="flow direction")


class RtcInputReferenceEnumStringType(Enum):
    EXPLICIT = "EXPLICIT"
    IMPLICIT = "IMPLICIT"


class RtcInterpolationOptionEnumStringType(Enum):
    BLOCK = "BLOCK"
    LINEAR = "LINEAR"


class RtcLimiterOptionEnumStringType(Enum):
    PERCENTAGE = "PERCENTAGE"
    ABSOLUTE = "ABSOLUTE"


class RtcLogicalOperatorEnumStringType(Enum):
    AND = "AND"
    OR = "OR"
    XOR = "XOR"


class RtcInput1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPoolRoutingEnumStringType(Enum):
    ForwardEuler = "ForwardEuler"
    BackwardEuler = "BackwardEuler"
    Theta = "Theta"


class RtcRelationalOperatorEnumStringType(Enum):
    Less = "Less"
    LessEqual = "LessEqual"
    Equal = "Equal"
    Unequal = "Unequal"
    GreaterEqual = "GreaterEqual"
    Greater = "Greater"


class RtcTimeRelativeEnumStringType(Enum):
    ABSOLUTE = "ABSOLUTE"
    RELATIVE = "RELATIVE"


class RtcTimeSeriesType(Enum):
    accumulative = "accumulative"
    instantaneous = "instantaneous"


class RtcTimeStepUnitEnumStringType(Enum):
    second = "second"
    minute = "minute"
    hour = "hour"
    day = "day"
    week = "week"


class RtcTimeType(BaseModel):
    __root__: constr(regex=r"^([\d][\d]\:[\d][\d]\:[\d][\d])$")


class RtcTransferFunctionEnumStringType(Enum):
    Linear = "Linear"
    SigmoidLogistic = "SigmoidLogistic"
    Tansig = "Tansig"


class XsBoolean(BaseModel):
    __root__: bool


class XsDateTime(BaseModel):
    __root__: str


class XsDouble(BaseModel):
    __root__: float


class XsFloat(BaseModel):
    __root__: float


class XsGMonthDay(BaseModel):
    __root__: str


class XsInt(BaseModel):
    __root__: conint(ge=-2147483648, le=2147483647)


class XsInteger(BaseModel):
    __root__: int


class XsPositiveInteger(BaseModel):
    __root__: conint(ge=1)


class XsString(BaseModel):
    __root__: str


class XsTime(BaseModel):
    __root__: str


class RtcRowItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _value: XsDouble = Field(..., alias="@value")


class RtcATableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_row: List[RtcRowItem] = Field(..., alias="rtc:row", min_items=1)


class RtcMultiplier(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcX(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcAccumulationInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: RtcX = Field(..., alias="rtc:x")


class RtcY(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcAccumulationOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_y: RtcY = Field(..., alias="rtc:y")


class RtcFactorRTG(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcLangeteFall(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcCaseLangetenEnumStringType] = Field(None, alias="$")


class RtcAareBruegg(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcAareBrueggMin2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcAareMurg(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcAbflussReglementPort(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcEmenmatt(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcEmenmattMin4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLangeten(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLangetenMin4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPegelBielersee(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcAebiRuleInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AareBruegg: RtcAareBruegg = Field(..., alias="rtc:AareBruegg")
    rtc_AareBrueggMin2: RtcAareBrueggMin2 = Field(..., alias="rtc:AareBrueggMin2")
    rtc_AareMurg: RtcAareMurg = Field(..., alias="rtc:AareMurg")
    rtc_AbflussReglementPort: RtcAbflussReglementPort = Field(
        ..., alias="rtc:AbflussReglementPort"
    )
    rtc_Emenmatt: RtcEmenmatt = Field(..., alias="rtc:Emenmatt")
    rtc_EmenmattMin4: RtcEmenmattMin4 = Field(..., alias="rtc:EmenmattMin4")
    rtc_Langeten: RtcLangeten = Field(..., alias="rtc:Langeten")
    rtc_LangetenMin4: RtcLangetenMin4 = Field(..., alias="rtc:LangetenMin4")
    rtc_PegelBielersee: RtcPegelBielersee = Field(..., alias="rtc:PegelBielersee")


class RtcAareMurgOKWMin1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcAbflussaenderungPort(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcMaxAbflussPort(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcProvMaxAbflussPort(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRTG(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcAebiRuleOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_AareMurg_oKWMin1: RtcAareMurgOKWMin1 = Field(..., alias="rtc:AareMurg_oKWMin1")
    rtc_AbflussaenderungPort: RtcAbflussaenderungPort = Field(
        ..., alias="rtc:AbflussaenderungPort"
    )
    rtc_MaxAbflussPort: RtcMaxAbflussPort = Field(..., alias="rtc:MaxAbflussPort")
    rtc_ProvMaxAbflussPort: RtcProvMaxAbflussPort = Field(
        ..., alias="rtc:ProvMaxAbflussPort"
    )
    rtc_RTG: RtcRTG = Field(..., alias="rtc:RTG")


class RtcTableExternal(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcArCoef(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcObs(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSim(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcArmaInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_obs: RtcObs = Field(..., alias="rtc:obs", description="observed data")
    rtc_sim: RtcSim = Field(..., alias="rtc:sim", description="simulated data")


class RtcArma(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcArmaOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_arma: RtcArma = Field(
        ..., alias="rtc:arma", description="output-corrected data"
    )


class RtcAlpha1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcAlpha2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcEquationType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcEquationEnumStringType] = Field(None, alias="$")


class RtcLength(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSlope(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSpatialScheme(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcSpatialEnumStringType] = Field(None, alias="$")


class RtcStorageDown(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcStorageUp(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSurfaceAreaDown(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSurfaceAreaUp(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcBranchGradientComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_storageDown: RtcStorageDown = Field(..., alias="rtc:storageDown")
    rtc_storageUp: RtcStorageUp = Field(..., alias="rtc:storageUp")
    rtc_surfaceAreaDown: RtcSurfaceAreaDown = Field(..., alias="rtc:surfaceAreaDown")
    rtc_surfaceAreaUp: RtcSurfaceAreaUp = Field(..., alias="rtc:surfaceAreaUp")


class RtcHDown(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcUx(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcUy(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcBranchInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_HDown: RtcHDown = Field(
        ..., alias="rtc:HDown", description="ID of downstream node"
    )
    rtc_HUp: RtcHUp = Field(..., alias="rtc:HUp", description="ID of upstream node")
    rtc_ux: Optional[RtcUx] = Field(
        None,
        alias="rtc:ux",
        description="optional wind velocity at an elevation of 10 m above the water surface (x-direction), implementation is for the inertial model only",
    )
    rtc_uy: Optional[RtcUy] = Field(
        None,
        alias="rtc:uy",
        description="optional wind velocity at an elevation of 10 m above the water surface (y-direction), implementation is for the inertial model only",
    )


class RtcQ(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcBranchOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_Q: RtcQ = Field(..., alias="rtc:Q")


class RtcColumnsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _head01: XsDouble = Field(..., alias="@head01")
    _head02: XsDouble = Field(..., alias="@head02")
    _head03: Optional[XsDouble] = Field(None, alias="@head03")
    _head04: Optional[XsDouble] = Field(None, alias="@head04")
    _head05: Optional[XsDouble] = Field(None, alias="@head05")
    _head06: Optional[XsDouble] = Field(None, alias="@head06")
    _head07: Optional[XsDouble] = Field(None, alias="@head07")
    _head08: Optional[XsDouble] = Field(None, alias="@head08")
    _head09: Optional[XsDouble] = Field(None, alias="@head09")
    _head10: Optional[XsDouble] = Field(None, alias="@head10")
    _head11: Optional[XsDouble] = Field(None, alias="@head11")
    _head12: Optional[XsDouble] = Field(None, alias="@head12")
    _head13: Optional[XsDouble] = Field(None, alias="@head13")
    _head14: Optional[XsDouble] = Field(None, alias="@head14")
    _head15: Optional[XsDouble] = Field(None, alias="@head15")
    _head16: Optional[XsDouble] = Field(None, alias="@head16")
    _head17: Optional[XsDouble] = Field(None, alias="@head17")
    _head18: Optional[XsDouble] = Field(None, alias="@head18")
    _head19: Optional[XsDouble] = Field(None, alias="@head19")
    _head20: Optional[XsDouble] = Field(None, alias="@head20")


class RtcGreaterThan(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcLessThan(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcConditionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_greaterThan: Optional[RtcGreaterThan] = Field(None, alias="rtc:greaterThan")
    rtc_lessThan: Optional[RtcLessThan] = Field(None, alias="rtc:lessThan")


class RtcA(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcB(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcC(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcD(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcConnectionCoefficientsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_a: RtcA = Field(..., alias="rtc:a")
    rtc_b: RtcB = Field(..., alias="rtc:b")
    rtc_c: RtcC = Field(..., alias="rtc:c")
    rtc_d: RtcD = Field(..., alias="rtc:d")


class RtcDischarge(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcDownstreamLevel(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcUpstreamLevel(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcConnectionInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_discharge: RtcDischarge = Field(..., alias="rtc:discharge")
    rtc_downstreamLevel: RtcDownstreamLevel = Field(..., alias="rtc:downstreamLevel")
    rtc_upstreamLevel: RtcUpstreamLevel = Field(..., alias="rtc:upstreamLevel")


class RtcDischarge1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcConnectionOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_discharge: RtcDischarge1 = Field(..., alias="rtc:discharge")


class RtcConstant(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcY1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcConstantRuleOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_y: RtcY1 = Field(..., alias="rtc:y")


class RtcDataTypicalProfileComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _monthOfYear: _MonthOfYear = Field(..., alias="@monthOfYear")
    _value: XsDouble = Field(..., alias="@value")


class RtcDateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _monthDay: XsGMonthDay = Field(..., alias="@monthDay")


class RtcX1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcY2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcDateLookupTableInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: RtcX1 = Field(..., alias="rtc:x")
    rtc_y: Optional[RtcY2] = Field(None, alias="rtc:y")


class RtcActive(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcY3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcDateLookupTableOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_active: Optional[RtcActive] = Field(None, alias="rtc:active")
    rtc_y: RtcY3 = Field(..., alias="rtc:y")


class RtcDateRecord2DataComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _x: XsDouble = Field(..., alias="@x")
    _y: XsDouble = Field(..., alias="@y")


class RtcDateRecordComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _comment: Optional[XsString] = Field(None, alias="@comment")
    _dateTime: Optional[XsDateTime] = Field(None, alias="@dateTime")
    _monthDay: Optional[XsGMonthDay] = Field(None, alias="@monthDay")
    _time: Optional[XsTime] = Field(None, alias="@time")
    _value: XsDouble = Field(..., alias="@value")


class RtcDateTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_data: List[RtcDateRecordComplexType] = Field(..., alias="rtc:data", min_items=1)


class RtcDateTimeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _date: RtcDateType = Field(..., alias="@date")
    _time: RtcTimeType = Field(..., alias="@time")


class RtcNumberOfStepsDown(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsInt] = Field(None, alias="$")


class RtcNumberOfStepsUp(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsInt] = Field(None, alias="$")


class RtcDeadBandTimeDiscreteComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_numberOfStepsDown: RtcNumberOfStepsDown = Field(
        ..., alias="rtc:numberOfStepsDown"
    )
    rtc_numberOfStepsUp: RtcNumberOfStepsUp = Field(..., alias="rtc:numberOfStepsUp")


class RtcDeadBandTimeInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: rtc_TimeSeriesSimpleType.Field20 = Field(..., alias="rtc:x")


class RtcStatus(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcStepsDown(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcStepsUp(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTimeFalse(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTimeTrue(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcDeadBandTimeOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_status: RtcStatus = Field(..., alias="rtc:status")
    rtc_stepsDown: RtcStepsDown = Field(..., alias="rtc:stepsDown")
    rtc_stepsUp: RtcStepsUp = Field(..., alias="rtc:stepsUp")
    rtc_timeFalse: Optional[RtcTimeFalse] = Field(None, alias="rtc:timeFalse")
    rtc_timeTrue: Optional[RtcTimeTrue] = Field(None, alias="rtc:timeTrue")


class RtcDefault(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsBoolean] = Field(None, alias="$")


class RtcThreshold(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcX2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcDeadBandValueInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: RtcX2 = Field(..., alias="rtc:x")


class RtcEdgeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _x1: XsDouble = Field(..., alias="@x1")
    _x2: XsDouble = Field(..., alias="@x2")


class RtcEdgesComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_edge: List[RtcEdgeComplexType] = Field(..., alias="rtc:edge", min_items=1)


class RtcA1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcB1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcEifelRurRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_a: RtcA1 = Field(..., alias="rtc:a")
    rtc_b: RtcB1 = Field(..., alias="rtc:b")
    rtc_minimumRelativeStorage: RtcDateTableComplexType = Field(
        ..., alias="rtc:minimumRelativeStorage"
    )


class RtcElevationRecordComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _elevation: XsDouble = Field(..., alias="@elevation")
    _value: RtcExternalParameterSimpleType = Field(..., alias="@value")


class RtcElevationTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_elevationRecord: List[RtcElevationRecordComplexType] = Field(
        ..., alias="rtc:elevationRecord", min_items=1
    )


class RtcA2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcB2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcC1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcLowerLevel(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcUpperLevel(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcEquationComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_a: RtcA2 = Field(..., alias="rtc:a")
    rtc_b: RtcB2 = Field(..., alias="rtc:b")
    rtc_c: RtcC1 = Field(..., alias="rtc:c")
    rtc_lowerLevel: Optional[RtcLowerLevel] = Field(None, alias="rtc:lowerLevel")
    rtc_upperLevel: Optional[RtcUpperLevel] = Field(None, alias="rtc:upperLevel")


class RtcEquationsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_equation: List[RtcEquationComplexType] = Field(
        ..., alias="rtc:equation", min_items=1
    )


class RtcMathematicalOperator(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcMathematicalOperatorEnumStringType] = Field(None, alias="$")


class RtcX1Value(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcX2Value(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcExternalParameterSimpleType] = Field(None, alias="$")


class RtcY4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcYVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcExpressionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_mathematicalOperator: RtcMathematicalOperator = Field(
        ...,
        alias="rtc:mathematicalOperator",
        description="mathematical operator: + (summation), - (substraction), * (multiplication), / (division), min, max, ^ (power)",
    )
    rtc_x1Series: Optional[rtc_TimeSeriesSimpleType.Field2] = Field(
        None, alias="rtc:x1Series", description="reference to time series ID"
    )
    rtc_x1SeriesVector: Optional[rtc_TimeSeriesSimpleType.Field3] = Field(
        None,
        alias="rtc:x1SeriesVector",
        description="reference to time series ID vector",
    )
    rtc_x1Value: Optional[RtcX1Value] = Field(
        None, alias="rtc:x1Value", description="user-configured constant value"
    )
    rtc_x2Series: Optional[rtc_TimeSeriesSimpleType.Field4] = Field(
        None, alias="rtc:x2Series"
    )
    rtc_x2SeriesVector: Optional[rtc_TimeSeriesSimpleType.Field5] = Field(
        None, alias="rtc:x2SeriesVector"
    )
    rtc_x2Value: Optional[RtcX2Value] = Field(None, alias="rtc:x2Value")
    rtc_y: Optional[RtcY4] = Field(
        None, alias="rtc:y", description="time series ID of resulting value"
    )
    rtc_yVector: Optional[RtcYVector] = Field(
        None,
        alias="rtc:yVector",
        description="time series ID vector of resulting value",
    )


class RtcDescription(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcPoolRoutingScheme(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcPoolRoutingEnumStringType] = Field(None, alias="$")


class RtcTheta(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcGeneralModuleConfigComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_description: Optional[RtcDescription] = Field(
        None, alias="rtc:description", description="DEPRICATED"
    )
    rtc_poolRoutingScheme: RtcPoolRoutingScheme = Field(
        ..., alias="rtc:poolRoutingScheme", description="DEPRICATED"
    )
    rtc_theta: RtcTheta = Field(..., alias="rtc:theta", description="DEPRICATED")


class RtcMultiplier1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcX3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcGradientInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: RtcX3 = Field(..., alias="rtc:x")


class RtcDx(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcGradientOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_dx: RtcDx = Field(..., alias="rtc:dx")


class RtcYMax(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcYMaxSeries(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcYMin(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcYMinSeries(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcX4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcY5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcGuideBandRuleInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: RtcX4 = Field(..., alias="rtc:x")
    rtc_y: Optional[RtcY5] = Field(None, alias="rtc:y")


class RtcY6(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcGuideBandRuleOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_y: RtcY6 = Field(..., alias="rtc:y")


class RtcEP(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcP(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcT(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTM(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHBVInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_EP: RtcEP = Field(..., alias="rtc:EP")
    rtc_P: RtcP = Field(..., alias="rtc:P")
    rtc_T: RtcT = Field(..., alias="rtc:T")
    rtc_TM: RtcTM = Field(..., alias="rtc:TM")


class RtcCF(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcEA(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcEI(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcEP1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcIN(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcINI(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPERC(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcR(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHBVLinkComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_CF: RtcCF = Field(..., alias="rtc:CF")
    rtc_EA: RtcEA = Field(..., alias="rtc:EA")
    rtc_EI: RtcEI = Field(..., alias="rtc:EI")
    rtc_EP: RtcEP1 = Field(..., alias="rtc:EP")
    rtc_IN: RtcIN = Field(..., alias="rtc:IN")
    rtc_INI: RtcINI = Field(..., alias="rtc:INI")
    rtc_PERC: RtcPERC = Field(..., alias="rtc:PERC")
    rtc_R: RtcR = Field(..., alias="rtc:R")


class RtcQ1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSMPercentage(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSWE(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHBVOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_Q: RtcQ1 = Field(..., alias="rtc:Q")
    rtc_SMPercentage: Optional[RtcSMPercentage] = Field(None, alias="rtc:SMPercentage")
    rtc_SWE: Optional[RtcSWE] = Field(None, alias="rtc:SWE")


class RtcIC(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLZ(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSM(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSP(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcUZ(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcWC(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHBVStateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_IC: RtcIC = Field(..., alias="rtc:IC")
    rtc_LZ: RtcLZ = Field(..., alias="rtc:LZ")
    rtc_SM: RtcSM = Field(..., alias="rtc:SM")
    rtc_SP: RtcSP = Field(..., alias="rtc:SP")
    rtc_UZ: RtcUZ = Field(..., alias="rtc:UZ")
    rtc_WC: RtcWC = Field(..., alias="rtc:WC")


class RtcIC1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLZ1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSM1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSP1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcUZ1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcWC1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHBVStateUpdateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_IC: Optional[RtcIC1] = Field(None, alias="rtc:IC")
    rtc_LZ: Optional[RtcLZ1] = Field(
        None, alias="rtc:LZ", description="increment on lower zone storage [mm]"
    )
    rtc_SM: Optional[RtcSM1] = Field(
        None, alias="rtc:SM", description="STILL NOT IMPLEMENTED"
    )
    rtc_SP: Optional[RtcSP1] = Field(
        None, alias="rtc:SP", description="STILL NOT IMPLEMENTED"
    )
    rtc_UZ: Optional[RtcUZ1] = Field(
        None, alias="rtc:UZ", description="STILL NOT IMPLEMENTED"
    )
    rtc_WC: Optional[RtcWC1] = Field(
        None, alias="rtc:WC", description="STILL NOT IMPLEMENTED"
    )


class RtcMode(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcHydraulicModelModeEnumStringType] = Field(None, alias="$")


class RtcNumericalTolerance(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcNFun(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcNJac(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRes(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHydraulicModelOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_nFun: RtcNFun = Field(
        ..., alias="rtc:nFun", description="number of function evaluations"
    )
    rtc_nJac: RtcNJac = Field(
        ..., alias="rtc:nJac", description="number of evaluations of the Jacobian"
    )
    rtc_res: RtcRes = Field(
        ...,
        alias="rtc:res",
        description="residuum at last iteration step, 0.5*sum(SQR(ri))",
    )


class RtcConvergenceThreshold(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcTheta1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcTreatNonConvergenceAsError(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsBoolean] = Field(None, alias="$")


class RtcHydraulicModelSequentialImplicitComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_convergenceThreshold: RtcConvergenceThreshold = Field(
        ..., alias="rtc:convergenceThreshold"
    )
    rtc_theta: RtcTheta1 = Field(..., alias="rtc:theta")
    rtc_treatNonConvergenceAsError: RtcTreatNonConvergenceAsError = Field(
        ..., alias="rtc:treatNonConvergenceAsError"
    )


class RtcTheta2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcHydraulicModelSimultaneousComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_theta: RtcTheta2 = Field(..., alias="rtc:theta")


class RtcInflowComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _factor: Optional[XsDouble] = Field(None, alias="@factor")


class RtcValueSelection(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcX5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputATableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_valueSelection: Optional[RtcValueSelection] = Field(
        None, alias="rtc:valueSelection"
    )
    rtc_x: RtcX5 = Field(..., alias="rtc:x")


class RtcHDown1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputCapillaryFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_HDown: RtcHDown1 = Field(
        ...,
        alias="rtc:HDown",
        description="downstream node, typically UZ unsaturted zone",
    )
    rtc_HUp: RtcHUp1 = Field(
        ..., alias="rtc:HUp", description="upstream node, typically GW upper zone"
    )


class RtcEI1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcEP2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputEvaporationActualStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_EI: Optional[RtcEI1] = Field(None, alias="rtc:EI")
    rtc_EP: RtcEP2 = Field(..., alias="rtc:EP")
    rtc_HUp: RtcHUp2 = Field(
        ..., alias="rtc:HUp", description="upstream node, typically SM (soil moisture)"
    )


class RtcEP3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputEvaporationInterceptionStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_EP: RtcEP3 = Field(
        ..., alias="rtc:EP", description="potential evaporation [mm]"
    )
    rtc_HUp: RtcHUp3 = Field(
        ..., alias="rtc:HUp", description="upstream node, typically IC (interception)"
    )


class RtcEPM(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcT1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTM1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputEvaporationPotentialComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_EPM: RtcEPM = Field(
        ...,
        alias="rtc:EPM",
        description="monthly mean value of potential evaporation [mm/timestep]",
    )
    rtc_T: RtcT1 = Field(
        ..., alias="rtc:T", description="instantaneous temperature [oC]"
    )
    rtc_TM: RtcTM1 = Field(
        ..., alias="rtc:TM", description="monthly mean temperature [oC]"
    )


class RtcHDown2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputGroundwaterFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_HDown: RtcHDown2 = Field(
        ...,
        alias="rtc:HDown",
        description="downstream node, can be GW groundwater or SW surface water",
    )
    rtc_HUp: RtcHUp4 = Field(
        ...,
        alias="rtc:HUp",
        description="upstream node, can be GW groundwater or SW surface water",
    )


class RtcDischargeItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcState(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcUnitVolumeItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputNodeStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_discharge: Optional[List[RtcDischargeItem]] = Field(None, alias="rtc:discharge")
    rtc_state: Optional[RtcState] = Field(
        None,
        alias="rtc:state",
        description="unit volume [mm], replaces the computes state",
    )
    rtc_unitVolume: Optional[List[RtcUnitVolumeItem]] = Field(
        None, alias="rtc:unitVolume"
    )


class RtcHDown3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputPercolationStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_HDown: Optional[RtcHDown3] = Field(
        None,
        alias="rtc:HDown",
        description="downstream node, typically LZ (lower zone storage)",
    )
    rtc_HUp: RtcHUp5 = Field(
        ...,
        alias="rtc:HUp",
        description="upstream node, typically UZ (upper zone storage)",
    )


class RtcSetpointSeries(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSetpointValue(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcX6(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputPidComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_disturbance: Optional[rtc_TimeSeriesSimpleType.Field8] = Field(
        None, alias="rtc:disturbance"
    )
    rtc_setpointSeries: Optional[RtcSetpointSeries] = Field(
        None, alias="rtc:setpointSeries"
    )
    rtc_setpointValue: Optional[RtcSetpointValue] = Field(
        None, alias="rtc:setpointValue"
    )
    rtc_x: RtcX6 = Field(..., alias="rtc:x", description="controllable variable")


class RtcHDown4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp6(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputReleaseAboveThresholdStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_HDown: Optional[RtcHDown4] = Field(
        None, alias="rtc:HDown", description="downstream node"
    )
    rtc_HUp: RtcHUp6 = Field(..., alias="rtc:HUp", description="upstream node")


class RtcDischargeItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputReleaseTotalComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_discharge: List[RtcDischargeItem1] = Field(
        ..., alias="rtc:discharge", min_items=1
    )


class RtcHUp7(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputResponseStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_HUp: RtcHUp7 = Field(
        ...,
        alias="rtc:HUp",
        description="upstream (release) node, typically UZ and/or LZ (upper/lower zone storages)",
    )


class RtcP1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcT2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputSnowRainJunctionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_P: RtcP1 = Field(..., alias="rtc:P", description="precipitation [mm/timestep]")
    rtc_T: RtcT2 = Field(..., alias="rtc:T", description="temperature [oC]")


class RtcHDown5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp8(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcINFItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputSoilRunoffStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_HDown: Optional[RtcHDown5] = Field(
        None,
        alias="rtc:HDown",
        description="optional downstream node, typically uper saturated zones (UZ upper zone storage). Required if capillary flow is used and SM and UZ are present in one storage system",
    )
    rtc_HUp: RtcHUp8 = Field(
        ...,
        alias="rtc:HUp",
        description="upstream node, typically unsaturated zone (SM soil moisture)",
    )
    rtc_INF: List[RtcINFItem] = Field(..., alias="rtc:INF", min_items=1)


class RtcHDown6(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp9(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputWaterDistributionConstantStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_HDown: Optional[RtcHDown6] = Field(
        None,
        alias="rtc:HDown",
        description="downstream node collector of abstracted water. For instance drinking water treatment plant",
    )
    rtc_HUp: RtcHUp9 = Field(
        ...,
        alias="rtc:HUp",
        description="upstream node, source of water abstraction/distribution (i.e. surface water/groundwater/sewerage)",
    )


class RtcD1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHDown7(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp10(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInputWaterDistributionVariableStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_D: RtcD1 = Field(
        ...,
        alias="rtc:D",
        description="series of industrial or domestic water demands/abstractions [m3/s]",
    )
    rtc_HDown: Optional[RtcHDown7] = Field(
        None,
        alias="rtc:HDown",
        description="downstream node collector of abstracted water. For instance drinking water treatment plant",
    )
    rtc_HUp: RtcHUp10 = Field(
        ...,
        alias="rtc:HUp",
        description="upstream node, source of water abstraction/distribution (i.e. surface water/groundwater/sewerage)",
    )


class RtcDate(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcInterpolationOptionEnumStringType] = Field(None, alias="$")


class RtcValue(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcInterpolationOptionEnumStringType] = Field(None, alias="$")


class RtcInterpolationOptionsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_date: RtcDate = Field(..., alias="rtc:date")
    rtc_value: RtcValue = Field(..., alias="rtc:value")


class RtcDeadbandSetpointAbsolute(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcDeadbandSetpointRelative(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSettingAbove(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSettingBelow(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSettingMaxSpeed(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSettingMaxStep(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSetpoint(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcIntervalInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_setpoint: RtcSetpoint = Field(..., alias="rtc:setpoint")
    rtc_x: rtc_TimeSeriesSimpleType.Field9 = Field(
        ..., alias="rtc:x", description="reference to time series ID"
    )


class RtcStatus1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcY7(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcIntervalOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_status: RtcStatus1 = Field(..., alias="rtc:status")
    rtc_y: RtcY7 = Field(..., alias="rtc:y")


class RtcA0(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcA11(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcA21(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcA3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcA4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcLevelStorageEquationComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_A0: RtcA0 = Field(..., alias="rtc:A0")
    rtc_A1: RtcA11 = Field(..., alias="rtc:A1")
    rtc_A2: Optional[RtcA21] = Field(None, alias="rtc:A2")
    rtc_A3: Optional[RtcA3] = Field(None, alias="rtc:A3")
    rtc_A4: Optional[RtcA4] = Field(None, alias="rtc:A4")


class RtcMode1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcLimiterOptionEnumStringType] = Field(None, alias="$")


class RtcThresholdValue(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcX7(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLimiterInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_thresholdSeries: Optional[rtc_TimeSeriesSimpleType.Field21] = Field(
        None, alias="rtc:thresholdSeries"
    )
    rtc_thresholdValue: Optional[RtcThresholdValue] = Field(
        None, alias="rtc:thresholdValue"
    )
    rtc_x: RtcX7 = Field(..., alias="rtc:x")


class RtcX8(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcY8(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcZ(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLookup2DTableInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: RtcX8 = Field(..., alias="rtc:x")
    rtc_y: RtcY8 = Field(..., alias="rtc:y")
    rtc_z: Optional[RtcZ] = Field(None, alias="rtc:z")


class RtcZ1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLookup2DTableOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_z: RtcZ1 = Field(..., alias="rtc:z")


class RtcExtrapolationOption(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcInterpolationOptionEnumStringType] = Field(None, alias="$")


class RtcInterpolationOption(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcInterpolationOptionEnumStringType] = Field(None, alias="$")


class RtcTableExternal1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcY9(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLookupTableInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: rtc_TimeSeriesSimpleType.Field10 = Field(
        ..., alias="rtc:x", description="reference to time series ID"
    )
    rtc_y: Optional[RtcY9] = Field(None, alias="rtc:y")


class RtcY10(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLookupTableOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_y: RtcY10 = Field(..., alias="rtc:y")


class RtcEP4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcP2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLorentGeversInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_EP: RtcEP4 = Field(..., alias="rtc:EP")
    rtc_P: RtcP2 = Field(..., alias="rtc:P")


class RtcQ2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLorentGeversOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_Q: RtcQ2 = Field(..., alias="rtc:Q")


class RtcQB1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQB2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQS1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQS2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcS(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLorentGeversStateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_QB1: RtcQB1 = Field(..., alias="rtc:QB1")
    rtc_QB2: RtcQB2 = Field(..., alias="rtc:QB2")
    rtc_QS1: RtcQS1 = Field(..., alias="rtc:QS1")
    rtc_QS2: RtcQS2 = Field(..., alias="rtc:QS2")
    rtc_S: RtcS = Field(..., alias="rtc:S")


class RtcS1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLorentGeversStateUpdateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_S: RtcS1 = Field(..., alias="rtc:S")


class RtcMaxFlowsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _maxFlow_head01: XsDouble = Field(..., alias="@maxFlow_head01")
    _maxFlow_head02: XsDouble = Field(..., alias="@maxFlow_head02")
    _maxFlow_head03: Optional[XsDouble] = Field(None, alias="@maxFlow_head03")
    _maxFlow_head04: Optional[XsDouble] = Field(None, alias="@maxFlow_head04")
    _maxFlow_head05: Optional[XsDouble] = Field(None, alias="@maxFlow_head05")
    _maxFlow_head06: Optional[XsDouble] = Field(None, alias="@maxFlow_head06")
    _maxFlow_head07: Optional[XsDouble] = Field(None, alias="@maxFlow_head07")
    _maxFlow_head08: Optional[XsDouble] = Field(None, alias="@maxFlow_head08")
    _maxFlow_head09: Optional[XsDouble] = Field(None, alias="@maxFlow_head09")
    _maxFlow_head10: Optional[XsDouble] = Field(None, alias="@maxFlow_head10")
    _maxFlow_head11: Optional[XsDouble] = Field(None, alias="@maxFlow_head11")
    _maxFlow_head12: Optional[XsDouble] = Field(None, alias="@maxFlow_head12")
    _maxFlow_head13: Optional[XsDouble] = Field(None, alias="@maxFlow_head13")
    _maxFlow_head14: Optional[XsDouble] = Field(None, alias="@maxFlow_head14")
    _maxFlow_head15: Optional[XsDouble] = Field(None, alias="@maxFlow_head15")
    _maxFlow_head16: Optional[XsDouble] = Field(None, alias="@maxFlow_head16")
    _maxFlow_head17: Optional[XsDouble] = Field(None, alias="@maxFlow_head17")
    _maxFlow_head18: Optional[XsDouble] = Field(None, alias="@maxFlow_head18")
    _maxFlow_head19: Optional[XsDouble] = Field(None, alias="@maxFlow_head19")
    _maxFlow_head20: Optional[XsDouble] = Field(None, alias="@maxFlow_head20")


class RtcMergerInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: List[rtc_TimeSeriesSimpleType.Field11] = Field(
        ..., alias="rtc:x", min_items=1
    )


class RtcY11(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcYSum(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcMergerOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_y: Optional[RtcY11] = Field(None, alias="rtc:y")
    rtc_ySum: Optional[RtcYSum] = Field(None, alias="rtc:ySum")


class RtcMode2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcMergerSplitterEnumStringType] = Field(None, alias="$")


class RtcMergerSplitterInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: Optional[List[rtc_TimeSeriesSimpleType.Field17]] = Field(None, alias="rtc:x")
    rtc_xVector: Optional[rtc_TimeSeriesSimpleType.Field18] = Field(
        None, alias="rtc:xVector"
    )


class RtcMergerSplitterOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_y: Optional[List[rtc_TimeSeriesSimpleType.Field19]] = Field(None, alias="rtc:y")


class RtcTransferFunction(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTransferFunctionEnumStringType] = Field(None, alias="$")


class RtcNeuronInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_external: Optional[List[xs_string.Field1]] = Field(None, alias="rtc:external")
    rtc_internal: Optional[List[xs_string.Field2]] = Field(None, alias="rtc:internal")


class RtcX9(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcY12(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcNeuronOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: RtcX9 = Field(
        ..., alias="rtc:x", description="result of the transfer function"
    )
    rtc_y: RtcY12 = Field(
        ...,
        alias="rtc:y",
        description="result of the summation of weighted input (intermediate result)",
    )


class RtcLambda(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSurfaceArea(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcNodeGradientComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_lambda: RtcLambda = Field(..., alias="rtc:lambda")
    rtc_surfaceArea: RtcSurfaceArea = Field(..., alias="rtc:surfaceArea")


class RtcHBC(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUpdate(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcNodeInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_HBC: Optional[RtcHBC] = Field(
        None,
        alias="rtc:HBC",
        description="Time series with the water level boundary condition, note that a value MUST be provided at all time steps, otherwise the model stops with an error message",
    )
    rtc_HUpdate: Optional[RtcHUpdate] = Field(
        None,
        alias="rtc:HUpdate",
        description="Time series with an optional water level for model updating",
    )
    rtc_QBC: Optional[List[rtc_TimeSeriesSimpleType.Field6]] = Field(
        None, alias="rtc:QBC"
    )


class RtcH(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcR1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcS2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcNodeOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_H: RtcH = Field(..., alias="rtc:H")
    rtc_R: Optional[RtcR1] = Field(None, alias="rtc:R")
    rtc_S: RtcS2 = Field(..., alias="rtc:S")


class RtcResiduum(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcState1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcNodeStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_AREA: Optional[RtcAREA2] = Field(
        None, alias="rtc:AREA", description="constant area [km2], default is 1.0"
    )
    rtc_input: Optional[RtcInputNodeStorageSystemComplexType] = Field(
        None, alias="rtc:input"
    )
    rtc_residuum: RtcResiduum = Field(
        ..., alias="rtc:residuum", description="residuum [mm]"
    )
    rtc_state: RtcState1 = Field(..., alias="rtc:state", description="unit volume [mm]")
    rtc_stateMax: Optional[RtcStateMax] = Field(None, alias="rtc:stateMax")
    rtc_stateMin: Optional[RtcStateMin] = Field(None, alias="rtc:stateMin")


class RtcContractionCoefficient(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcCrestLevel(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcExponentGateFormula(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcExponentWeirFormula(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcFlowDirection(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcFlowDirectionEnumStringType] = Field(None, alias="$")


class RtcWidth(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcD2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcDConst(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcDSeries(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcDeltaHDown(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcDeltaHUp(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHDown8(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp11(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcOrificeInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_D: Optional[RtcD2] = Field(None, alias="rtc:D", description="deprecated")
    rtc_DConst: Optional[RtcDConst] = Field(None, alias="rtc:DConst")
    rtc_DSeries: Optional[RtcDSeries] = Field(None, alias="rtc:DSeries")
    rtc_DeltaHDown: Optional[RtcDeltaHDown] = Field(None, alias="rtc:DeltaHDown")
    rtc_DeltaHUp: Optional[RtcDeltaHUp] = Field(None, alias="rtc:DeltaHUp")
    rtc_HDown: RtcHDown8 = Field(..., alias="rtc:HDown")
    rtc_HUp: RtcHUp11 = Field(..., alias="rtc:HUp")


class RtcD3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQ3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcFlowType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcOrificeOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_D: RtcD3 = Field(..., alias="rtc:D")
    rtc_Q: RtcQ3 = Field(..., alias="rtc:Q")
    rtc_flowType: Optional[RtcFlowType] = Field(None, alias="rtc:flowType")


class RtcRelativeReleaseItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRelease(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcOutletInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_relativeRelease: Optional[List[RtcRelativeReleaseItem]] = Field(
        None, alias="rtc:relativeRelease"
    )
    rtc_release: Optional[RtcRelease] = Field(
        None,
        alias="rtc:release",
        description="Reference to timeseries in data configuration containg an absolute release. (ONLY FOR CONTROLLED OUTLET)",
    )


class RtcRelease1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcOutletOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_release: RtcRelease1 = Field(..., alias="rtc:release")


class RtcOutputATableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_y: List[rtc_TimeSeriesSimpleType.Field1] = Field(
        ..., alias="rtc:y", min_items=1
    )


class RtcEP5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcOutputEvaporationPotentialComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_EP: RtcEP5 = Field(
        ...,
        alias="rtc:EP",
        description="instantaneous potential evaporation [mm/timestep]",
    )


class RtcH1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQ4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcOutputLinkStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_H: RtcH1 = Field(
        ..., alias="rtc:H", description="Discharge as unit volume [mm/timestep]"
    )
    rtc_Q: RtcQ4 = Field(..., alias="rtc:Q", description="Discharge [m3/s]")


class RtcDifferentialPart(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcIntegralPart(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcY13(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcOutputPidComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_differentialPart: RtcDifferentialPart = Field(
        ...,
        alias="rtc:differentialPart",
        description="memory of differential part (in fact e of the last time step)",
    )
    rtc_integralPart: RtcIntegralPart = Field(
        ...,
        alias="rtc:integralPart",
        description="memory of integral part: integral(e)dt",
    )
    rtc_y: RtcY13 = Field(..., alias="rtc:y", description="setting of the actuator")


class RtcRF(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSF(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcOutputSnowRainJunctionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_RF: RtcRF = Field(..., alias="rtc:RF", description="rainfall [mm/timestep]")
    rtc_SF: RtcSF = Field(..., alias="rtc:SF", description="snowfall [mm/timestep]")


class RtcNFun1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcNJac1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRes1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcOutputStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_nFun: RtcNFun1 = Field(
        ..., alias="rtc:nFun", description="number of function evaluations"
    )
    rtc_nJac: RtcNJac1 = Field(
        ..., alias="rtc:nJac", description="number of evaluations of the Jacobian"
    )
    rtc_res: RtcRes1 = Field(
        ..., alias="rtc:res", description="residuum at last iteration step"
    )


class RtcPercolationStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputPercolationStorageSystemComplexType = Field(
        ..., alias="rtc:input"
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterPercolationStorageSystemComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcKd(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcKi(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcKp(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSettingMax(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSettingMaxSpeed1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSettingMin(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcPidComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputPidComplexType = Field(..., alias="rtc:input")
    rtc_kd: RtcKd = Field(
        ..., alias="rtc:kd", description="fatcor on differential part kd*de/dt"
    )
    rtc_ki: RtcKi = Field(
        ..., alias="rtc:ki", description="factor on the integral part ki*integral(e)dt"
    )
    rtc_kp: RtcKp = Field(
        ..., alias="rtc:kp", description="factor on the proportional part kp*e"
    )
    rtc_mode: Optional[RtcMode3] = Field(
        None,
        alias="rtc:mode",
        description='pid mode, either "NATIVE" or "SOBEK2" or "PIDPOS" or PIDVEL"',
    )
    rtc_output: RtcOutputPidComplexType = Field(..., alias="rtc:output")
    rtc_settingMax: RtcSettingMax = Field(
        ..., alias="rtc:settingMax", description="maximum setting of the actuator"
    )
    rtc_settingMaxSpeed: RtcSettingMaxSpeed1 = Field(
        ...,
        alias="rtc:settingMaxSpeed",
        description="maximum speed of the actuation in [unit/s]",
    )
    rtc_settingMin: RtcSettingMin = Field(
        ..., alias="rtc:settingMin", description="minimum setting of the actuator"
    )


class RtcValue1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcPolygonComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: Optional[XsString] = Field(None, alias="@id")
    rtc_edges: RtcEdgesComplexType = Field(..., alias="rtc:edges")
    rtc_value: Optional[RtcValue1] = Field(None, alias="rtc:value")


class RtcDefault1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcPolygonLookupInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x1: rtc_TimeSeriesSimpleType.Field12 = Field(..., alias="rtc:x1")
    rtc_x2: rtc_TimeSeriesSimpleType.Field13 = Field(..., alias="rtc:x2")


class RtcStatus2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPolygonLookupOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_status: RtcStatus2 = Field(..., alias="rtc:status")


class RtcPolygonsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_polygon: List[RtcPolygonComplexType] = Field(
        ..., alias="rtc:polygon", min_items=1
    )


class RtcStorageDown1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcStorageUp1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPumpGradientComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_storageDown: RtcStorageDown1 = Field(..., alias="rtc:storageDown")
    rtc_storageUp: RtcStorageUp1 = Field(..., alias="rtc:storageUp")


class RtcHDown9(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp12(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQ5(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPumpInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_HDown: RtcHDown9 = Field(..., alias="rtc:HDown")
    rtc_HUp: RtcHUp12 = Field(..., alias="rtc:HUp")
    rtc_Q: RtcQ5 = Field(..., alias="rtc:Q")


class RtcQ6(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPumpOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_Q: RtcQ6 = Field(..., alias="rtc:Q")


class RtcRelationalOperator(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcRelationalOperatorEnumStringType] = Field(None, alias="$")


class RtcRelationalConditionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_relationalOperator: RtcRelationalOperator = Field(
        ..., alias="rtc:relationalOperator"
    )
    rtc_x1Series: Optional[rtc_TimeSeriesSimpleType.Field22] = Field(
        None, alias="rtc:x1Series"
    )
    rtc_x1Value: Optional[RtcX1Value1] = Field(None, alias="rtc:x1Value")
    rtc_x2Series: Optional[rtc_TimeSeriesSimpleType.Field23] = Field(
        None, alias="rtc:x2Series"
    )
    rtc_x2Value: Optional[RtcX2Value1] = Field(None, alias="rtc:x2Value")


class RtcOutput(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcReleaseTotalComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputReleaseTotalComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcOutput = Field(
        ..., alias="rtc:output", description="total discharge [m3/s]"
    )


class RtcLevelStorageTableExternal(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcTailwaterExternalTable(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcTailwaterExternalTimeSeries(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTurbineEfficiencyTable2DExternal(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcTurbineEfficiencyTableExternal(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcUnits(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcUnitTypeEnumStringType] = Field(None, alias="$")


class RtcFB(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPM(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPX(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQ7(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQIItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQMISC(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQS(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQTX(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcReservoirCompactInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_FB: RtcFB = Field(
        ...,
        alias="rtc:FB",
        description="forebay elevation [m above reference level] or [ft above sea level]",
    )
    rtc_OF: Optional[RtcOF] = Field(
        None,
        alias="rtc:OF",
        description="optional time series with the unit outage factor [0-1], it reduces the (physical) constraints PXValue and QTXValue (NO impact on PX, QTX)",
    )
    rtc_PM: Optional[RtcPM] = Field(
        None,
        alias="rtc:PM",
        description="minimum generation constraint on aggregated turbine level [MW], primarly used as operational constraint",
    )
    rtc_PMValue: Optional[RtcPMValue] = Field(
        None,
        alias="rtc:PMValue",
        description="fixed minimum generation constraint on aggregated turbine level [MW], primarily used as physical constraint",
    )
    rtc_PX: Optional[RtcPX] = Field(
        None,
        alias="rtc:PX",
        description="maximum generation constraint on aggregated turbine level [MW], primarly used as operational constraint",
    )
    rtc_PXValue: Optional[RtcPXValue] = Field(
        None,
        alias="rtc:PXValue",
        description="fixed maximum generation constraint on aggregated turbine level [MW], primarly used as physical constraint",
    )
    rtc_Q: RtcQ7 = Field(
        ...,
        alias="rtc:Q",
        description="reservoir outflow [m3/s] or [KCFS], data is expected to be complete and valid",
    )
    rtc_QI: List[RtcQIItem] = Field(..., alias="rtc:QI", min_items=1)
    rtc_QMISC: Optional[RtcQMISC] = Field(
        None,
        alias="rtc:QMISC",
        description="optional miscellaneous flow (uncontrolled), will be zero by default [m3/s] or [KCFS] if no time series is supplied or if the time series includes NaN values",
    )
    rtc_QS: Optional[RtcQS] = Field(
        None, alias="rtc:QS", description="absolute spill target [m3/s] or [KCFS]"
    )
    rtc_QSPercentage: Optional[rtc_TimeSeriesSimpleType.Field7] = Field(
        None,
        alias="rtc:QSPercentage",
        description="relative spill target as a percentage [0..100] of the total flow Q",
    )
    rtc_QSPercentageValue: Optional[rtc_ExternalParameterSimpleType.Field1] = Field(
        None,
        alias="rtc:QSPercentageValue",
        description="relative spill target as a percentage [0..100] of the total flow Q",
    )
    rtc_QSValue: Optional[RtcQSValue] = Field(
        None, alias="rtc:QSValue", description="absolute spill target [m3/s] or [KCFS]"
    )
    rtc_QTX: Optional[RtcQTX] = Field(
        None,
        alias="rtc:QTX",
        description="maximum generation constraint on aggregated turbine level [m3/s] or [KCFS], primarily used as operational constraint",
    )
    rtc_QTXValue: Optional[RtcQTXValue] = Field(
        None,
        alias="rtc:QTXValue",
        description="fixed maximum generation constraint on aggregated turbine level [m3/s] or [KCFS], primarily used as physical constraint",
    )


class RtcDQ(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcFB1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcH2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcP3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPX1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQ8(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQI(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQMISC1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQS3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQSPercentage(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQT(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQTX1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcR2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcS3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTW(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcReservoirCompactOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_DQ: RtcDQ = Field(
        ..., alias="rtc:DQ", description="deviation from spill target [m3/s] or [KCFS]"
    )
    rtc_FB: RtcFB1 = Field(
        ...,
        alias="rtc:FB",
        description="forebay elevation [m above reference level] or [ft above sea level]",
    )
    rtc_H: RtcH2 = Field(..., alias="rtc:H", description="head [m] or [ft]")
    rtc_P: RtcP3 = Field(..., alias="rtc:P", description="power generation [MW]")
    rtc_PX: Optional[RtcPX1] = Field(
        None, alias="rtc:PX", description="maximum power generation [MW]"
    )
    rtc_Q: RtcQ8 = Field(
        ..., alias="rtc:Q", description="reservoir outflow [m3/s] or [KCFS]"
    )
    rtc_QI: RtcQI = Field(
        ..., alias="rtc:QI", description="reservoir inflow [m3/s] or [KCFS]"
    )
    rtc_QMISC: Optional[RtcQMISC1] = Field(
        None, alias="rtc:QMISC", description="miscellaneous flow [m3/s] or [KCFS]"
    )
    rtc_QS: RtcQS3 = Field(..., alias="rtc:QS", description="spillage [m3/s] or [KCFS]")
    rtc_QSPercentage: Optional[RtcQSPercentage] = Field(
        None, alias="rtc:QSPercentage", description="relative spillage [0..100]"
    )
    rtc_QT: RtcQT = Field(
        ..., alias="rtc:QT", description="turbine flow [m3/s] or [KCFS]"
    )
    rtc_QTX: Optional[RtcQTX1] = Field(
        None, alias="rtc:QTX", description="maximum turbine flow [m3/s] or [KCFS]"
    )
    rtc_R: RtcR2 = Field(
        ...,
        alias="rtc:R",
        description="residuum of mass balance (in simultaneous mode) [m3/s] or [KCFS]",
    )
    rtc_S: RtcS3 = Field(
        ...,
        alias="rtc:S",
        description="storage [m3] or [KCFS-hrs], this is the system state needed in the state file",
    )
    rtc_TW: RtcTW = Field(
        ...,
        alias="rtc:TW",
        description="tailwater elevation [m above reference level] or [ft above sea level]",
    )


class RtcMode4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcPoolRoutingEnumStringType] = Field(None, alias="$")


class RtcTheta3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcLambda1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLambdaDown(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcReservoirGradientComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_lambda: RtcLambda1 = Field(..., alias="rtc:lambda")
    rtc_lambdaDown: Optional[RtcLambdaDown] = Field(None, alias="rtc:lambdaDown")


class RtcEvaporation(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInflowItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLevel(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPrecipitation(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcReservoirInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_evaporation: Optional[RtcEvaporation] = Field(
        None,
        alias="rtc:evaporation",
        description="Direct evaporation from the reservoir [mm/time step]",
    )
    rtc_inflow: List[RtcInflowItem] = Field(..., alias="rtc:inflow", min_items=1)
    rtc_level: Optional[RtcLevel] = Field(
        None,
        alias="rtc:level",
        description="Optional level [m] for updating the simulated level by an observed water level (simple data assimilation), if provided the error output is equal to the mass balance correction ",
    )
    rtc_precipitation: Optional[RtcPrecipitation] = Field(
        None,
        alias="rtc:precipitation",
        description="Direct precitation into the reservoir [mm/time step], the value will be multiplied by the current water surface area of the reservoir",
    )


class RtcError(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInflow(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLevel1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRelativeStorage(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRelease2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcResiduum1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcStorage(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcReservoirOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_error: Optional[RtcError] = Field(
        None,
        alias="rtc:error",
        description="optional error output [m3/s] which is non-zero if the simple data assimilation option for overruling the simulated water level is used ",
    )
    rtc_inflow: RtcInflow = Field(
        ..., alias="rtc:inflow", description="aggregated inflows [m3/s]"
    )
    rtc_level: RtcLevel1 = Field(
        ..., alias="rtc:level", description="water level [m] in the reservoir"
    )
    rtc_relativeStorage: Optional[RtcRelativeStorage] = Field(
        None,
        alias="rtc:relativeStorage",
        description="relative storage [-] typically between 0 and 1 depending on the definition of the maximum level above]",
    )
    rtc_release: RtcRelease2 = Field(
        ..., alias="rtc:release", description="aggregated release [m3/s]"
    )
    rtc_residuum: Optional[RtcResiduum1] = Field(
        None,
        alias="rtc:residuum",
        description="optional residuum of the implicit solution",
    )
    rtc_storage: RtcStorage = Field(
        ..., alias="rtc:storage", description="storage [m3] (state variable)"
    )


class RtcResponseStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputResponseStorageSystemComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterResponseStorageSystemComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcOutput1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcValue2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsInteger] = Field(None, alias="$")


class RtcResultComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_output: RtcOutput1 = Field(..., alias="rtc:output")
    rtc_value: RtcValue2 = Field(..., alias="rtc:value")


class RtcExponentWeirFormula1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcFlowDirection1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcFlowDirectionEnumStringType] = Field(None, alias="$")


class RtcSubmergedFlowFactor(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSubmergedFlowRatio(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcWidth1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcCConst(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcCSeries(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcDeltaHDown1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcDeltaHUp1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHDown10(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcHUp13(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRiverWeirInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_CConst: Optional[RtcCConst] = Field(None, alias="rtc:CConst")
    rtc_CSeries: Optional[RtcCSeries] = Field(None, alias="rtc:CSeries")
    rtc_DeltaHDown: Optional[RtcDeltaHDown1] = Field(None, alias="rtc:DeltaHDown")
    rtc_DeltaHUp: Optional[RtcDeltaHUp1] = Field(None, alias="rtc:DeltaHUp")
    rtc_HDown: RtcHDown10 = Field(..., alias="rtc:HDown")
    rtc_HUp: RtcHUp13 = Field(..., alias="rtc:HUp")


class RtcC2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQ9(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcFlowType1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRiverWeirOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_C: RtcC2 = Field(..., alias="rtc:C")
    rtc_Q: RtcQ9 = Field(..., alias="rtc:Q")
    rtc_flowType: Optional[RtcFlowType1] = Field(None, alias="rtc:flowType")


class RtcDischargeRef(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcDischarge2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcError1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRoutingOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_discharge: Optional[RtcDischarge2] = Field(None, alias="rtc:discharge")
    rtc_error: Optional[RtcError1] = Field(None, alias="rtc:error")


class RtcRowComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _eta_head01: XsDouble = Field(..., alias="@eta_head01")
    _eta_head02: XsDouble = Field(..., alias="@eta_head02")
    _eta_head03: Optional[XsDouble] = Field(None, alias="@eta_head03")
    _eta_head04: Optional[XsDouble] = Field(None, alias="@eta_head04")
    _eta_head05: Optional[XsDouble] = Field(None, alias="@eta_head05")
    _eta_head06: Optional[XsDouble] = Field(None, alias="@eta_head06")
    _eta_head07: Optional[XsDouble] = Field(None, alias="@eta_head07")
    _eta_head08: Optional[XsDouble] = Field(None, alias="@eta_head08")
    _eta_head09: Optional[XsDouble] = Field(None, alias="@eta_head09")
    _eta_head10: Optional[XsDouble] = Field(None, alias="@eta_head10")
    _eta_head11: Optional[XsDouble] = Field(None, alias="@eta_head11")
    _eta_head12: Optional[XsDouble] = Field(None, alias="@eta_head12")
    _eta_head13: Optional[XsDouble] = Field(None, alias="@eta_head13")
    _eta_head14: Optional[XsDouble] = Field(None, alias="@eta_head14")
    _eta_head15: Optional[XsDouble] = Field(None, alias="@eta_head15")
    _eta_head16: Optional[XsDouble] = Field(None, alias="@eta_head16")
    _eta_head17: Optional[XsDouble] = Field(None, alias="@eta_head17")
    _eta_head18: Optional[XsDouble] = Field(None, alias="@eta_head18")
    _eta_head19: Optional[XsDouble] = Field(None, alias="@eta_head19")
    _eta_head20: Optional[XsDouble] = Field(None, alias="@eta_head20")
    _flow: XsDouble = Field(..., alias="@flow")


class RtcRuleId(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcRuleStateTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_ruleId: RtcRuleId = Field(..., alias="rtc:ruleId")


class RtcP4(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcPVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRCA(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcRCAVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSCA(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSCAVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcT3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcCr(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcCrVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcCs(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcCsVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSRMInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_P: Optional[RtcP4] = Field(None, alias="rtc:P")
    rtc_P_Vector: Optional[RtcPVector] = Field(None, alias="rtc:P-Vector")
    rtc_RCA: Optional[RtcRCA] = Field(None, alias="rtc:RCA")
    rtc_RCA_Vector: Optional[RtcRCAVector] = Field(None, alias="rtc:RCA-Vector")
    rtc_SCA: Optional[RtcSCA] = Field(None, alias="rtc:SCA")
    rtc_SCA_Vector: Optional[RtcSCAVector] = Field(None, alias="rtc:SCA-Vector")
    rtc_T: Optional[RtcT3] = Field(None, alias="rtc:T")
    rtc_T_Vector: Optional[RtcTVector] = Field(None, alias="rtc:T-Vector")
    rtc_cr: Optional[RtcCr] = Field(None, alias="rtc:cr")
    rtc_cr_Vector: Optional[RtcCrVector] = Field(None, alias="rtc:cr-Vector")
    rtc_cs: Optional[RtcCs] = Field(None, alias="rtc:cs")
    rtc_cs_Vector: Optional[RtcCsVector] = Field(None, alias="rtc:cs-Vector")


class RtcQRainVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQSnowVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQStorageVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSRMOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_QRain_Vector: RtcQRainVector = Field(..., alias="rtc:QRain-Vector")
    rtc_QSnow_Vector: RtcQSnowVector = Field(..., alias="rtc:QSnow-Vector")
    rtc_QStorage_Vector: RtcQStorageVector = Field(..., alias="rtc:QStorage-Vector")


class RtcSRMParameterZoneComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: Optional[XsString] = Field(None, alias="@id")
    rtc_Tcr1: RtcTcr1 = Field(
        ..., alias="rtc:Tcr1", description="critical temperature (???) [oC]"
    )
    rtc_Tcr2: RtcTcr2 = Field(
        ..., alias="rtc:Tcr2", description="critical temperature (???) [oC]"
    )
    rtc_a: RtcA5 = Field(
        ..., alias="rtc:a", description="degree day factor [mm/(oC*day)]"
    )
    rtc_area: RtcArea = Field(..., alias="rtc:area", description="area [km2]")


class RtcPStorageVector(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcQ10(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSRMStateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_PStorage_Vector: RtcPStorageVector = Field(
        ...,
        alias="rtc:PStorage-Vector",
        description="snow storage of non-snow-covered areas [mm]",
    )
    rtc_Q: RtcQ10 = Field(..., alias="rtc:Q", description="discharge [m3/s]")


class RtcDefault2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsBoolean] = Field(None, alias="$")


class RtcLogicalOperator(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcLogicalOperatorEnumStringType] = Field(None, alias="$")


class RtcX1Value2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsBoolean] = Field(None, alias="$")


class RtcX2Value2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsBoolean] = Field(None, alias="$")


class RtcSnowRainJunctionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputSnowRainJunctionComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcOutputSnowRainJunctionComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterSnowRainJunctionComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcSoilRunoffStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputSoilRunoffStorageSystemComplexType = Field(
        ..., alias="rtc:input"
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterSoilRunoffStorageSystemComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcDefaultInputValue(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcDefaultOutputValue(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcTolerance(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcSpreadsheetInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x1: rtc_TimeSeriesSimpleType.Field14 = Field(..., alias="rtc:x1")
    rtc_x2: rtc_TimeSeriesSimpleType.Field15 = Field(..., alias="rtc:x2")
    rtc_x3: Optional[rtc_TimeSeriesSimpleType.Field16] = Field(None, alias="rtc:x3")


class RtcStatus3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcSpreadsheetOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_status: RtcStatus3 = Field(..., alias="rtc:status")


class RtcSpreadsheetRecordComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _x1: XsDouble = Field(..., alias="@x1")
    _x2: XsDouble = Field(..., alias="@x2")
    _x3: Optional[XsDouble] = Field(None, alias="@x3")
    _y: XsDouble = Field(..., alias="@y")


class RtcSpreadsheetTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _initialState: Optional[XsDouble] = Field(None, alias="@initialState")
    rtc_record: List[RtcSpreadsheetRecordComplexType] = Field(
        ..., alias="rtc:record", min_items=1
    )


class RtcSpreadsheetTablesComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_table: List[RtcSpreadsheetTableComplexType] = Field(
        ..., alias="rtc:table", min_items=1
    )


class RtcDefault3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsBoolean] = Field(None, alias="$")


class RtcMaximumLevel(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcStorageCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_maximumLevel: Optional[RtcMaximumLevel] = Field(
        None,
        alias="rtc:maximumLevel",
        description="Maximum water level h in the reservoir: this optional value does not limit the water level, it is used however to compute the relative filling percentage of the reservoir according to s = S/S(maximumLevel), where S is the absolute storage volume",
    )
    rtc_storageEquation: Optional[RtcEquationsComplexType] = Field(
        None,
        alias="rtc:storageEquation",
        description="Storage equation, storage S = f(water level h)",
    )
    rtc_storageTable: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias="rtc:storageTable",
        description="Storage table with pairs of elevation h and storage S",
    )


class RtcAcceptableConvergenceThreshold(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcConvergenceThreshold1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcTreatNonConvergenceAsError1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsBoolean] = Field(None, alias="$")


class RtcStorageSystemSettingsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_acceptableConvergenceThreshold: Optional[
        RtcAcceptableConvergenceThreshold
    ] = Field(
        None,
        alias="rtc:acceptableConvergenceThreshold",
        description="optional threshold after reaching the maximum number of iterations, writes a warning if reached, writes error otherwise",
    )
    rtc_convergenceThreshold: RtcConvergenceThreshold1 = Field(
        ...,
        alias="rtc:convergenceThreshold",
        description="iteration stops after reaching this threshold",
    )
    rtc_treatNonConvergenceAsError: RtcTreatNonConvergenceAsError1 = Field(
        ...,
        alias="rtc:treatNonConvergenceAsError",
        description="treat non-convergence related to the thresholds as error or not",
    )


class RtcTableLookupTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_record: List[RtcDateRecord2DataComplexType] = Field(
        ..., alias="rtc:record", min_items=1
    )


class RtcConstant1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcFBDown(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTailwaterEquationComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_A: RtcA6 = Field(..., alias="rtc:A")
    rtc_B: RtcB3 = Field(..., alias="rtc:B")
    rtc_C: RtcC3 = Field(..., alias="rtc:C")
    rtc_D: Optional[RtcD7] = Field(None, alias="rtc:D")
    rtc_FBDown: Optional[RtcFBDown] = Field(
        None,
        alias="rtc:FBDown",
        description="time series reference to forebay elevation of the downstream project, only required if B is non-zero",
    )


class RtcHead(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLevel2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTailwaterOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_head: RtcHead = Field(..., alias="rtc:head", description="head [m]")
    rtc_level: RtcLevel2 = Field(
        ..., alias="rtc:level", description="tailwater level [m]"
    )


class RtcQObs(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTWObs(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTailwaterTidalEquationComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_A: RtcA7 = Field(..., alias="rtc:A")
    rtc_QObs: RtcQObs = Field(..., alias="rtc:QObs")
    rtc_TWObs: RtcTWObs = Field(..., alias="rtc:TWObs")


class RtcLevelSetpoint(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcReleaseLimiterPercentage(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcCatchment(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcInflow1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcLevel3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcThunerseeRuleInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_catchment: RtcCatchment = Field(..., alias="rtc:catchment")
    rtc_inflow: RtcInflow1 = Field(..., alias="rtc:inflow")
    rtc_level: RtcLevel3 = Field(..., alias="rtc:level")


class RtcActive1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcReleaseTotal(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcReleaseTunnel(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcReleaseWeir(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcThunerseeRuleOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_active: Optional[RtcActive1] = Field(None, alias="rtc:active")
    rtc_releaseTotal: RtcReleaseTotal = Field(..., alias="rtc:releaseTotal")
    rtc_releaseTunnel: RtcReleaseTunnel = Field(..., alias="rtc:releaseTunnel")
    rtc_releaseWeir: RtcReleaseWeir = Field(..., alias="rtc:releaseWeir")


class RtcX11(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTimeAbsoluteInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_x: RtcX11 = Field(..., alias="rtc:x")


class RtcY15(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTimeAbsoluteOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_y: RtcY15 = Field(..., alias="rtc:y")


class RtcInterpolationOption1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcInterpolationOptionEnumStringType] = Field(None, alias="$")


class RtcMaximumPeriod(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcValueOption(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeRelativeEnumStringType] = Field(None, alias="$")


class RtcTimeRelativeControlTableRecordComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _time: XsDouble = Field(..., alias="@time")
    _value: XsDouble = Field(..., alias="@value")


class RtcY16(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTimeRelativeInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_y: RtcY16 = Field(
        ...,
        alias="rtc:y",
        description="optional input for deriving the timeActive in case of the relative from Value option",
    )


class RtcTimeActive(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcY17(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="$")


class RtcTimeRelativeOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_timeActive: RtcTimeActive = Field(..., alias="rtc:timeActive")
    rtc_y: RtcY17 = Field(..., alias="rtc:y")


class RtcTimeStepComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _divider: Optional[XsPositiveInteger] = Field(None, alias="@divider")
    _multiplier: Optional[XsPositiveInteger] = Field(None, alias="@multiplier")
    _unit: RtcTimeStepUnitEnumStringType = Field(..., alias="@unit")


class RtcRuleReference(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcValue3(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsInteger] = Field(None, alias="$")


class RtcTriggerControllerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_input: RtcInput = Field(..., alias="rtc:input")
    rtc_value: RtcValue3 = Field(..., alias="rtc:value")


class RtcLevelThreshold(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcTurbineCapacityCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_capacityEquation: Optional[RtcEquationsComplexType] = Field(
        None,
        alias="rtc:capacityEquation",
        description="capacity equation of hydropower turbine as a function of the water head",
    )
    rtc_capacityTable: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias="rtc:capacityTable",
        description="capacity table of hydropower turbine as a function of the water head",
    )


class RtcTurbineCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_efficiencyTable: RtcElevationTableComplexType = Field(
        ...,
        alias="rtc:efficiencyTable",
        description="efficiency table unit power output [MW / m3/s] as function of head [m] ",
    )
    rtc_output: RtcTurbineOutputCharacteristicsComplexType = Field(
        ..., alias="rtc:output"
    )


class RtcNodeDown(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcNodeUp(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcEfficiencyConstant(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcTurbineEfficiencyCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_efficiencyConstant: Optional[RtcEfficiencyConstant] = Field(
        None,
        alias="rtc:efficiencyConstant",
        description="constant efficiency over all discharges, typical range is [0.80, 0.90]",
    )


class RtcTurbineEfficiencyTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_columns: RtcColumnsComplexType = Field(
        ...,
        alias="rtc:columns",
        description="column Ids refering to the head [m] of each column",
    )
    rtc_maxFlows: RtcMaxFlowsComplexType = Field(
        ...,
        alias="rtc:maxFlows",
        description="maximum flow for a given head (provided above)",
    )
    rtc_row: List[RtcRowComplexType] = Field(..., alias="rtc:row", min_items=1)


class RtcTypicalProfileComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_data: List[RtcDataTypicalProfileComplexType] = Field(
        ..., alias="rtc:data", min_items=1
    )
    rtc_output: RtcOutput2 = Field(..., alias="rtc:output")


class RtcUnitDelayComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcUnitDelayInputComplexType = Field(..., alias="rtc:input")
    rtc_nStep: Optional[RtcNStep] = Field(
        None,
        alias="rtc:nStep",
        description="nStep optionally provides a delay with an arbitrary numer of time steps or sub time step, i.e. 1.5 time steps, if being used also specify the yFinal tag in the output options",
    )
    rtc_output: RtcUnitDelayOutputComplexType = Field(
        ...,
        alias="rtc:output",
        description="The configuration of a multiple unit delay requires the configuration of a time series for each delay time step",
    )


class RtcWeightItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcUnitHydrographWeightCustomComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_weight: List[RtcWeightItem] = Field(..., alias="rtc:weight", min_items=1)


class RtcFactor(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsDouble] = Field(None, alias="$")


class RtcUnitHydrographWeightTriangularComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_factor: Optional[RtcFactor] = Field(
        None, alias="rtc:factor", description="sum of all weight, if not equal to 1.0"
    )
    rtc_nSteps: RtcNSteps = Field(
        ..., alias="rtc:nSteps", description="number of time steps"
    )


class RtcValidPeriodComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_endDate: RtcDateComplexType = Field(..., alias="rtc:endDate")
    rtc_startDate: RtcDateComplexType = Field(..., alias="rtc:startDate")


class RtcValidPeriodsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_validPeriod: Optional[List[RtcValidPeriodComplexType]] = Field(
        None, alias="rtc:validPeriod"
    )


class RtcValueItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsFloat] = Field(None, alias="$")


class RtcValueArrayComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_value: List[RtcValueItem] = Field(..., alias="rtc:value", min_items=1)


class RtcYDimItem(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsFloat] = Field(None, alias="$")


class RtcYDimComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_yDim: List[RtcYDimItem] = Field(..., alias="rtc:yDim", min_items=1)


class RtcZoneComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _max: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="@max")
    _min: Optional[RtcTimeSeriesSimpleType] = Field(None, alias="@min")
    rtc_dateTable: RtcDateTableComplexType = Field(..., alias="rtc:dateTable")


class RtcZonesComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_zone: List[RtcZoneComplexType] = Field(..., alias="rtc:zone", min_items=1)


class RtcEvaporationActualStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputEvaporationActualStorageSystemComplexType = Field(
        ..., alias="rtc:input"
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterEvaporationActualStorageSystemComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcEvaporationInterceptionStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputEvaporationInterceptionStorageSystemComplexType = Field(
        ..., alias="rtc:input"
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterEvaporationInterceptionStorageSystemComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcGroundwaterFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputGroundwaterFlowStorageSystemComplexType = Field(
        ..., alias="rtc:input"
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParametergroundwaterFlowStorageSystemComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcNodeD(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcNodeU(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcIrrigationStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_nodeD: RtcNodeD = Field(
        ...,
        alias="rtc:nodeD",
        description="downstream node which recieves the irrigation water",
    )
    rtc_nodeU: RtcNodeU = Field(
        ...,
        alias="rtc:nodeU",
        description="upstream node, source of water usually the drinking water treatment plant",
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterIrrigationStorageSystemComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcNodeD1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcNodeU1(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcMeltRefreezingStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInput1 = Field(
        ..., alias="rtc:input", description="instanteneous temperature [oC]"
    )
    rtc_nodeD: RtcNodeD1 = Field(
        ...,
        alias="rtc:nodeD",
        description="downstream node, typically WC (water content)",
    )
    rtc_nodeU: RtcNodeU1 = Field(
        ..., alias="rtc:nodeU", description="upstream node, typically SP (snow pack)"
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterMeltRefreezingStorageSystemComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcReleaseAboveThresholdStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputReleaseAboveThresholdStorageSystemComplexType = Field(
        ..., alias="rtc:input"
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterReleaseAboveThresholdStorageSystemComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcNodeA(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcNodeU2(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    __1: Optional[XsString] = Field(None, alias="$")


class RtcReleaseWaterContentStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_nodeA: RtcNodeA = Field(
        ...,
        alias="rtc:nodeA",
        description="auxiliary node with snow pack, typically SP (snow pack)",
    )
    rtc_nodeU: RtcNodeU2 = Field(
        ...,
        alias="rtc:nodeU",
        description="upstream node, typically WC (water content)",
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterReleaseWaterContentStorageSystemComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcWaterDistributionConstantStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputWaterDistributionConstantStorageSystemComplexType = Field(
        ..., alias="rtc:input"
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterWaterDistributionConstantStorageSystemComplexType = (
        Field(..., alias="rtc:parameter")
    )


class RtcWaterDistributionVariableStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputWaterDistributionVariableStorageSystemComplexType = Field(
        ..., alias="rtc:input"
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterWaterDistributionVariableStorageSystemComplexType = (
        Field(..., alias="rtc:parameter")
    )


class RtcAccumulationComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcAccumulationInputComplexType = Field(
        ..., alias="rtc:input", description="input variable"
    )
    rtc_multiplier: Optional[RtcMultiplier] = Field(
        None, alias="rtc:multiplier", description="optional multiplier"
    )
    rtc_output: RtcAccumulationOutputComplexType = Field(..., alias="rtc:output")


class RtcAebiRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_FactorRTG: RtcFactorRTG = Field(..., alias="rtc:FactorRTG")
    rtc_LangeteFall: RtcLangeteFall = Field(..., alias="rtc:LangeteFall")
    rtc_input: RtcAebiRuleInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcAebiRuleOutputComplexType = Field(..., alias="rtc:output")


class RtcAllocationTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputATableComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcOutputATableComplexType = Field(..., alias="rtc:output")
    rtc_table: Optional[RtcATableComplexType] = Field(None, alias="rtc:table")
    rtc_tableExternal: Optional[RtcTableExternal] = Field(
        None, alias="rtc:tableExternal"
    )


class RtcArmaComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_arCoef: RtcArCoef = Field(
        ...,
        alias="rtc:arCoef",
        description="autoregression coefficient related to prior time step",
    )
    rtc_input: RtcArmaInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcArmaOutputComplexType = Field(..., alias="rtc:output")


class RtcCapacityCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _reference: Optional[RtcCapacityReferenceEnumStringType] = Field(
        None, alias="@reference"
    )
    rtc_capacityEquation: Optional[RtcEquationsComplexType] = Field(
        None, alias="rtc:capacityEquation"
    )
    rtc_capacityTable: Optional[RtcElevationTableComplexType] = Field(
        None, alias="rtc:capacityTable"
    )


class RtcCapillaryFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputCapillaryFlowStorageSystemComplexType = Field(
        ..., alias="rtc:input"
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcParameterCapillaryFlowStorageSystemComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcConstantRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_constant: RtcConstant = Field(..., alias="rtc:constant")
    rtc_output: RtcConstantRuleOutputComplexType = Field(..., alias="rtc:output")


class RtcControlledOutletComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_capacityCharacteristics: RtcCapacityCharacteristicsComplexType = Field(
        ...,
        alias="rtc:capacityCharacteristics",
        description="Maximum capacity of outlet as function of the water level h, minimum capacity is assumed to be zero",
    )
    rtc_input: RtcOutletInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcOutletOutputComplexType = Field(..., alias="rtc:output")
    rtc_turbineCharacteristics: Optional[RtcTurbineCharacteristicsComplexType] = Field(
        None,
        alias="rtc:turbineCharacteristics",
        description="Characteristics of optional turbine",
    )


class RtcCrossSectionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_crossSectionTable: RtcElevationTableComplexType = Field(
        ...,
        alias="rtc:crossSectionTable",
        description="Tabulated cross section, pairs of elevation h and width b ",
    )


class RtcCrossSectionRoughnessComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_roughnessTable: RtcElevationTableComplexType = Field(
        ...,
        alias="rtc:roughnessTable",
        description="Pairs of elevation h and roughness C (according to Chezy)",
    )


class RtcDateRecord2ComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _monthDay: XsGMonthDay = Field(..., alias="@monthDay")
    rtc_record: List[RtcDateRecord2DataComplexType] = Field(
        ..., alias="rtc:record", min_items=1
    )


class RtcDeadBandValueComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcDeadBandValueInputComplexType = Field(..., alias="rtc:input")
    rtc_threshold: RtcThreshold = Field(..., alias="rtc:threshold")


class RtcEvaporationPotentialComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcInputEvaporationPotentialComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcOutputEvaporationPotentialComplexType = Field(
        ..., alias="rtc:output"
    )
    rtc_parameter: RtcParameterEvaporationPotentialComplexType = Field(
        ..., alias="rtc:parameter"
    )


class RtcGradientComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcGradientInputComplexType = Field(
        ..., alias="rtc:input", description="input variable"
    )
    rtc_multiplier: Optional[RtcMultiplier1] = Field(
        None, alias="rtc:multiplier", description="optional multiplier"
    )
    rtc_output: RtcGradientOutputComplexType = Field(
        ..., alias="rtc:output", description="gradient, dx = multiplier*(xNew-xOld)/dt"
    )


class RtcGuideBandRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcGuideBandRuleInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcGuideBandRuleOutputComplexType = Field(..., alias="rtc:output")
    rtc_xMax: RtcDateTableComplexType = Field(..., alias="rtc:xMax")
    rtc_xMin: RtcDateTableComplexType = Field(..., alias="rtc:xMin")
    rtc_yMax: Optional[RtcYMax] = Field(None, alias="rtc:yMax")
    rtc_yMaxSeries: Optional[RtcYMaxSeries] = Field(None, alias="rtc:yMaxSeries")
    rtc_yMin: Optional[RtcYMin] = Field(None, alias="rtc:yMin")
    rtc_yMinSeries: Optional[RtcYMinSeries] = Field(None, alias="rtc:yMinSeries")


class RtcHBVComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcHBVInputComplexType = Field(..., alias="rtc:input")
    rtc_link: Optional[RtcHBVLinkComplexType] = Field(None, alias="rtc:link")
    rtc_output: RtcHBVOutputComplexType = Field(..., alias="rtc:output")
    rtc_parameterInput: RtcHBVParameterInputComplexType = Field(
        ..., alias="rtc:parameterInput"
    )
    rtc_parameterInterception: RtcHBVParameterInterceptionComplexType = Field(
        ..., alias="rtc:parameterInterception"
    )
    rtc_parameterResponse: RtcHBVParameterResponseComplexType = Field(
        ..., alias="rtc:parameterResponse"
    )
    rtc_parameterSnow: RtcHBVParameterSnowComplexType = Field(
        ..., alias="rtc:parameterSnow"
    )
    rtc_parameterSoil: RtcHBVParameterSoilComplexType = Field(
        ..., alias="rtc:parameterSoil"
    )
    rtc_state: RtcHBVStateComplexType = Field(..., alias="rtc:state")
    rtc_stateUpdate: Optional[RtcHBVStateUpdateComplexType] = Field(
        None, alias="rtc:stateUpdate"
    )


class RtcIntervalComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_deadbandSetpointAbsolute: Optional[RtcDeadbandSetpointAbsolute] = Field(
        None, alias="rtc:deadbandSetpointAbsolute"
    )
    rtc_deadbandSetpointRelative: Optional[RtcDeadbandSetpointRelative] = Field(
        None, alias="rtc:deadbandSetpointRelative"
    )
    rtc_input: RtcIntervalInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcIntervalOutputComplexType = Field(..., alias="rtc:output")
    rtc_settingAbove: RtcSettingAbove = Field(..., alias="rtc:settingAbove")
    rtc_settingBelow: RtcSettingBelow = Field(..., alias="rtc:settingBelow")
    rtc_settingMaxSpeed: Optional[RtcSettingMaxSpeed] = Field(
        None, alias="rtc:settingMaxSpeed"
    )
    rtc_settingMaxStep: Optional[RtcSettingMaxStep] = Field(
        None, alias="rtc:settingMaxStep"
    )


class RtcLimiterComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcLimiterInputComplexType = Field(..., alias="rtc:input")
    rtc_mode: RtcMode1 = Field(..., alias="rtc:mode")


class RtcLinkStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_capillaryFlow: Optional[RtcCapillaryFlowStorageSystemComplexType] = Field(
        None,
        alias="rtc:capillaryFlow",
        description="capillary flow, typically from GW (saturated upper zone - ground water) to UZ (unsaturated zone)",
    )
    rtc_evaporationActual: Optional[
        RtcEvaporationActualStorageSystemComplexType
    ] = Field(
        None,
        alias="rtc:evaporationActual",
        description="actual evaporation from unsaturated zone storage node",
    )
    rtc_evaporationInterception: Optional[
        RtcEvaporationInterceptionStorageSystemComplexType
    ] = Field(
        None,
        alias="rtc:evaporationInterception",
        description="evaporation from interception storage node, typically VEG/P/UP (vegeration/paved interception)",
    )
    rtc_groundwaterFlow: Optional[RtcGroundwaterFlowStorageSystemComplexType] = Field(
        None,
        alias="rtc:groundwaterFlow",
        description="GW Groundwater interaction with SW Surface water",
    )
    rtc_irrigation: Optional[RtcIrrigationStorageSystemComplexType] = Field(
        None,
        alias="rtc:irrigation",
        description="NOT REFACTORED. water consumption by domestic irrigation due to dry soil",
    )
    rtc_meltRefreezing: Optional[RtcMeltRefreezingStorageSystemComplexType] = Field(
        None,
        alias="rtc:meltRefreezing",
        description="NOT REFACTORED. melting and refreezing, typically used between SP (snow pack) and WC (water content) nodes",
    )
    rtc_percolation: Optional[RtcPercolationStorageSystemComplexType] = Field(
        None,
        alias="rtc:percolation",
        description="percolation, typically from GW upper zone to GW lower zone), or from UP unpaved surface to UZ unsaturated zone",
    )
    rtc_releaseInterception: Optional[
        RtcReleaseAboveThresholdStorageSystemComplexType
    ] = Field(
        None,
        alias="rtc:releaseInterception",
        description="release above threshold from interception storage node, typically VEG/P/UP (uses relese above threshold link)",
    )
    rtc_releaseWaterContent: Optional[
        RtcReleaseWaterContentStorageSystemComplexType
    ] = Field(
        None,
        alias="rtc:releaseWaterContent",
        description="NOT REFACTORED. release from water content storage node (typically WC)",
    )
    rtc_response: Optional[RtcResponseStorageSystemComplexType] = Field(
        None,
        alias="rtc:response",
        description="response from storage node, typically GW upper and GW lower zone storage nodes",
    )
    rtc_sewerOverflow: Optional[
        RtcReleaseAboveThresholdStorageSystemComplexType
    ] = Field(
        None,
        alias="rtc:sewerOverflow",
        description="sewer overflow (uses relese above threshold link)",
    )
    rtc_soilRunoff: Optional[RtcSoilRunoffStorageSystemComplexType] = Field(
        None,
        alias="rtc:soilRunoff",
        description="soil runoff from UZ unsaturated zone to GW upper zone storage node",
    )
    rtc_wasteWaterTreatmentPlant: Optional[
        RtcWaterDistributionConstantStorageSystemComplexType
    ] = Field(
        None,
        alias="rtc:wasteWaterTreatmentPlant",
        description="water treated via the WWTP, flows at a max rate of a constant max pump capacity. Uses water distribution constant link",
    )
    rtc_waterDistributionConstant: Optional[
        RtcWaterDistributionConstantStorageSystemComplexType
    ] = Field(
        None,
        alias="rtc:waterDistributionConstant",
        description="water abstraction/distribution/consumption referenced to a constant demand (e.i. maxpump capacity). Uses water distribution constant link",
    )
    rtc_waterDistributionVariable: Optional[
        RtcWaterDistributionVariableStorageSystemComplexType
    ] = Field(
        None,
        alias="rtc:waterDistributionVariable",
        description="water abstraction/distribution/consumption referenced to a variable demand (e.i. domestic or industrial water demands). Uses water distribution variable link)",
    )


class RtcLookupTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_extrapolationOption: Optional[RtcExtrapolationOption] = Field(
        None,
        alias="rtc:extrapolationOption",
        description="table interpolation can be BLOCK or LINEAR, default setting if not provided is LINEAR",
    )
    rtc_input: RtcLookupTableInputComplexType = Field(..., alias="rtc:input")
    rtc_interpolationOption: Optional[RtcInterpolationOption] = Field(
        None,
        alias="rtc:interpolationOption",
        description="table interpolation can be BLOCK or LINEAR, default setting if not provided is LINEAR",
    )
    rtc_output: RtcLookupTableOutputComplexType = Field(..., alias="rtc:output")
    rtc_property: Optional[List[RtcPropertyItem]] = Field(None, alias="rtc:property")
    rtc_table: Optional[RtcTableLookupTableComplexType] = Field(None, alias="rtc:table")
    rtc_tableExternal: Optional[RtcTableExternal1] = Field(
        None, alias="rtc:tableExternal"
    )


class RtcLorentGeversComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcLorentGeversInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcLorentGeversOutputComplexType = Field(..., alias="rtc:output")
    rtc_parameterResponse: RtcLorentGeversParameterResponseComplexType = Field(
        ..., alias="rtc:parameterResponse"
    )
    rtc_parameterSoil: RtcLorentGeversParameterSoilComplexType = Field(
        ..., alias="rtc:parameterSoil"
    )
    rtc_state: RtcLorentGeversStateComplexType = Field(..., alias="rtc:state")
    rtc_stateUpdate: Optional[RtcLorentGeversStateUpdateComplexType] = Field(
        None, alias="rtc:stateUpdate"
    )


class RtcMergerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcMergerInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcMergerOutputComplexType = Field(..., alias="rtc:output")


class RtcMergerSplitterComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcMergerSplitterInputComplexType = Field(..., alias="rtc:input")
    rtc_mode: RtcMode2 = Field(..., alias="rtc:mode")
    rtc_output: RtcMergerSplitterOutputComplexType = Field(..., alias="rtc:output")


class RtcMinSimpleRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_dateTable: Optional[RtcDateTableComplexType] = Field(
        None, alias="rtc:dateTable"
    )
    rtc_zones: Optional[RtcZonesComplexType] = Field(None, alias="rtc:zones")


class RtcNeuronComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: RtcNeuronIDSimpleType = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_bias: RtcBias = Field(..., alias="rtc:bias")
    rtc_input: RtcNeuronInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcNeuronOutputComplexType = Field(..., alias="rtc:output")
    rtc_transferFunction: RtcTransferFunction = Field(
        ...,
        alias="rtc:transferFunction",
        description="transfer function: sigmoid, linear etc.",
    )


class RtcNodeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _x: Optional[XsDouble] = Field(None, alias="@x")
    _y: Optional[XsDouble] = Field(None, alias="@y")
    rtc_input: Optional[RtcNodeInputComplexType] = Field(None, alias="rtc:input")
    rtc_output: RtcNodeOutputComplexType = Field(..., alias="rtc:output")
    rtc_storageCharacteristics: RtcStorageCharacteristicsComplexType = Field(
        ...,
        alias="rtc:storageCharacteristics",
        description="Storage characteristics of the node: The storage as a function of water level h. It can be provided as table or as a formula.",
    )


class RtcOrificeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_contractionCoefficient: RtcContractionCoefficient = Field(
        ..., alias="rtc:contractionCoefficient"
    )
    rtc_crestLevel: RtcCrestLevel = Field(..., alias="rtc:crestLevel")
    rtc_exponentGateFormula: Optional[RtcExponentGateFormula] = Field(
        None, alias="rtc:exponentGateFormula"
    )
    rtc_exponentWeirFormula: Optional[RtcExponentWeirFormula] = Field(
        None, alias="rtc:exponentWeirFormula"
    )
    rtc_flowDirection: Optional[RtcFlowDirection] = Field(
        None, alias="rtc:flowDirection"
    )
    rtc_input: RtcOrificeInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcOrificeOutputComplexType = Field(..., alias="rtc:output")
    rtc_width: RtcWidth = Field(..., alias="rtc:width")


class RtcPumpComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_input: RtcPumpInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcPumpOutputComplexType = Field(..., alias="rtc:output")


class RtcReservoirCompactComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcReservoirCompactInputComplexType = Field(
        ..., alias="rtc:input", description="input time series"
    )
    rtc_levelStorageEquation: Optional[RtcLevelStorageEquationComplexType] = Field(
        None,
        alias="rtc:levelStorageEquation",
        description="level storage equation according to S = A0 + A1*FB ( + A2*FB^2 + ...)",
    )
    rtc_levelStorageTable: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias="rtc:levelStorageTable",
        description="level-storage relation of the reservoir, level in [m] or [ft], storage in [m3] or [KCFS-hrs]",
    )
    rtc_levelStorageTableExternal: Optional[RtcLevelStorageTableExternal] = Field(
        None,
        alias="rtc:levelStorageTableExternal",
        description='externalizes the level storage table to a parameter file, requires the two columns "level" and "storage"',
    )
    rtc_output: RtcReservoirCompactOutputComplexType = Field(
        ..., alias="rtc:output", description="output time series"
    )
    rtc_tailwaterConstant: Optional[RtcTailwaterConstant] = Field(
        None,
        alias="rtc:tailwaterConstant",
        description="constant value for tailwater elevation",
    )
    rtc_tailwaterEquation: Optional[RtcTailwaterEquationComplexType] = Field(
        None,
        alias="rtc:tailwaterEquation",
        description="tailwater equation according to TW = A + B*FB_downstream(t-1) + C*Q(t)^D, D is equal 1.0 by default if not provided",
    )
    rtc_tailwaterExternalTable: Optional[RtcTailwaterExternalTable] = Field(
        None, alias="rtc:tailwaterExternalTable", description="external tailwater table"
    )
    rtc_tailwaterExternalTimeSeries: Optional[RtcTailwaterExternalTimeSeries] = Field(
        None,
        alias="rtc:tailwaterExternalTimeSeries",
        description="external tailwater elevation from an external source or a previous calculation OUTSIDE of the reservoirCompact components",
    )
    rtc_tailwaterTable: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias="rtc:tailwaterTable",
        description="tailwater as a function of the reservoir release only",
    )
    rtc_tailwaterTidalEquation: Optional[RtcTailwaterTidalEquationComplexType] = Field(
        None,
        alias="rtc:tailwaterTidalEquation",
        description="tidal influenced tailwater equation (works only in hindcast mode, use tailwater external with appropiate forecast of the tailwater in operational forecasting), TW = TWObs + A*(Q-QObs)",
    )
    rtc_turbineEfficiencyConstant: Optional[RtcTurbineEfficiencyConstant] = Field(
        None, alias="rtc:turbineEfficiencyConstant"
    )
    rtc_turbineEfficiencyTable: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias="rtc:turbineEfficiencyTable",
        description="old formulation, will be removed in the future",
    )
    rtc_turbineEfficiencyTable2D: Optional[
        RtcTurbineEfficiencyTableComplexType
    ] = Field(
        None,
        alias="rtc:turbineEfficiencyTable2D",
        description="new formulation, turbine effiency depends on head and turbine release, computation by 2D lookup",
    )
    rtc_turbineEfficiencyTable2DExternal: Optional[
        RtcTurbineEfficiencyTable2DExternal
    ] = Field(None, alias="rtc:turbineEfficiencyTable2DExternal")
    rtc_turbineEfficiencyTableExternal: Optional[
        RtcTurbineEfficiencyTableExternal
    ] = Field(None, alias="rtc:turbineEfficiencyTableExternal")
    rtc_units: Optional[RtcUnits] = Field(
        None, alias="rtc:units", description=' "SI" or "Imperial" units'
    )


class RtcReservoirThunerseeRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_storageCharacteristics: RtcStorageCharacteristicsComplexType = Field(
        ..., alias="rtc:storageCharacteristics"
    )


class RtcRiverWeirComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_exponentWeirFormula: Optional[RtcExponentWeirFormula1] = Field(
        None, alias="rtc:exponentWeirFormula"
    )
    rtc_flowDirection: Optional[RtcFlowDirection1] = Field(
        None, alias="rtc:flowDirection"
    )
    rtc_input: RtcRiverWeirInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcRiverWeirOutputComplexType = Field(..., alias="rtc:output")
    rtc_submergedFlowFactor: Optional[RtcSubmergedFlowFactor] = Field(
        None, alias="rtc:submergedFlowFactor"
    )
    rtc_submergedFlowRatio: Optional[RtcSubmergedFlowRatio] = Field(
        None, alias="rtc:submergedFlowRatio"
    )
    rtc_width: RtcWidth1 = Field(..., alias="rtc:width")


class RtcSRMComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcSRMInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcSRMOutputComplexType = Field(..., alias="rtc:output")
    rtc_parameter: RtcSRMParameterComplexType = Field(..., alias="rtc:parameter")
    rtc_parameterZone: List[RtcSRMParameterZoneComplexType] = Field(
        ..., alias="rtc:parameterZone", min_items=1
    )
    rtc_state: RtcSRMStateComplexType = Field(..., alias="rtc:state")


class RtcSimpleReservoirComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _multiplier: Optional[conint(ge=1)] = Field(None, alias="@multiplier")
    rtc_capacityCharacteristics: RtcCapacityCharacteristicsComplexType = Field(
        ..., alias="rtc:capacityCharacteristics"
    )
    rtc_storageCharacteristics: RtcStorageCharacteristicsComplexType = Field(
        ..., alias="rtc:storageCharacteristics"
    )


class RtcStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_link: List[RtcLinkStorageSystemComplexType] = Field(
        ..., alias="rtc:link", min_items=1
    )
    rtc_output: Optional[RtcOutputStorageSystemComplexType] = Field(
        None, alias="rtc:output"
    )
    rtc_settings: Optional[RtcStorageSystemSettingsComplexType] = Field(
        None, alias="rtc:settings"
    )
    rtc_storageNode: List[RtcNodeStorageSystemComplexType] = Field(
        ..., alias="rtc:storageNode", min_items=1
    )


class RtcSubmodelComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_evaporationPotential: Optional[RtcEvaporationPotentialComplexType] = Field(
        None, alias="rtc:evaporationPotential", description="potential evaporation"
    )
    rtc_snowRainJunction: Optional[RtcSnowRainJunctionComplexType] = Field(
        None,
        alias="rtc:snowRainJunction",
        description="separates precipitation into snow and rainfall",
    )
    rtc_storageSystem: Optional[RtcStorageSystemComplexType] = Field(
        None,
        alias="rtc:storageSystem",
        description="storage systems with storage nodes and links for setting up bucket models",
    )
    rtc_typicalProfile: Optional[RtcTypicalProfileComplexType] = Field(
        None, alias="rtc:typicalProfile"
    )


class RtcTailwaterComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_constant: Optional[RtcConstant1] = Field(
        None, alias="rtc:constant", description="Constant tailwater level [m]"
    )
    rtc_output: RtcTailwaterOutputComplexType = Field(..., alias="rtc:output")
    rtc_ratingCurve: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias="rtc:ratingCurve",
        description="Tailwater depending on discharge computed by a rating curve",
    )


class RtcTimeAbsoluteComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcTimeAbsoluteInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcTimeAbsoluteOutputComplexType = Field(..., alias="rtc:output")


class RtcTimeRelativeControlTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_record: List[RtcTimeRelativeControlTableRecordComplexType] = Field(
        ..., alias="rtc:record", min_items=1
    )


class RtcTunnelThunerseeRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_capacityCharacteristics: RtcCapacityCharacteristicsComplexType = Field(
        ..., alias="rtc:capacityCharacteristics"
    )
    rtc_levelThreshold: RtcLevelThreshold = Field(..., alias="rtc:levelThreshold")


class RtcTurbineComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_capacityCharacteristics: RtcTurbineCapacityCharacteristicsComplexType = Field(
        ..., alias="rtc:capacityCharacteristics"
    )
    rtc_efficiencyCharacteristics: RtcTurbineEfficiencyCharacteristicsComplexType = (
        Field(..., alias="rtc:efficiencyCharacteristics")
    )
    rtc_input: RtcTurbineInputComplexType = Field(..., alias="rtc:input")
    rtc_nodeDown: RtcNodeDown = Field(..., alias="rtc:nodeDown")
    rtc_nodeUp: RtcNodeUp = Field(..., alias="rtc:nodeUp")
    rtc_output: RtcTurbineOutputComplexType = Field(..., alias="rtc:output")


class RtcUncontrolledOutletComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_capacityCharacteristics: RtcCapacityCharacteristicsComplexType = Field(
        ...,
        alias="rtc:capacityCharacteristics",
        description="Maximum capacity of outlet as function of the water level h, minimum capacity is assumed to be zero",
    )
    rtc_input: Optional[RtcUOutletInputComplexType] = Field(None, alias="rtc:input")
    rtc_output: RtcOutletOutputComplexType = Field(..., alias="rtc:output")


class RtcUnitHydrographWeightComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_custom: Optional[RtcUnitHydrographWeightCustomComplexType] = Field(
        None, alias="rtc:custom", description="user-defined weights"
    )
    rtc_triangular: Optional[RtcUnitHydrographWeightTriangularComplexType] = Field(
        None, alias="rtc:triangular", description="weights with triangular shape"
    )


class RtcWeirThunerseeRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_capacityCharacteristics: RtcCapacityCharacteristicsComplexType = Field(
        ..., alias="rtc:capacityCharacteristics"
    )


class RtcXDimComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_xDim: List[RtcYDimComplexType] = Field(..., alias="rtc:xDim", min_items=1)


class RtcBranchComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    rtc_alpha1: Optional[RtcAlpha1] = Field(
        None,
        alias="rtc:alpha1",
        description="the wind friction coefficient is given by Cw = alpha1 + alpha2 * Vw, with wind velocity Vw",
    )
    rtc_alpha2: Optional[RtcAlpha2] = Field(
        None,
        alias="rtc:alpha2",
        description="the wind friction coefficient is given by Cw = alpha1 + alpha2 * Vw, with wind velocity Vw",
    )
    rtc_crossSection: RtcCrossSectionComplexType = Field(
        ...,
        alias="rtc:crossSection",
        description="Cross section in the center of the flow branch.",
    )
    rtc_equationType: Optional[RtcEquationType] = Field(None, alias="rtc:equationType")
    rtc_input: RtcBranchInputComplexType = Field(..., alias="rtc:input")
    rtc_length: RtcLength = Field(
        ..., alias="rtc:length", description="Length of the flow branch"
    )
    rtc_output: RtcBranchOutputComplexType = Field(..., alias="rtc:output")
    rtc_roughness: RtcCrossSectionRoughnessComplexType = Field(
        ...,
        alias="rtc:roughness",
        description="Roughness (Chezy) as a function of elevation h",
    )
    rtc_slope: Optional[RtcSlope] = Field(
        None, alias="rtc:slope", description="slope for optional kinematic wave branch"
    )
    rtc_spatialScheme: Optional[RtcSpatialScheme] = Field(
        None, alias="rtc:spatialScheme"
    )


class RtcDateLookupTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_dateRecord: List[RtcDateRecord2ComplexType] = Field(
        ..., alias="rtc:dateRecord", min_items=1
    )
    rtc_input: RtcDateLookupTableInputComplexType = Field(..., alias="rtc:input")
    rtc_interpolationOptions: RtcInterpolationOptionsComplexType = Field(
        ...,
        alias="rtc:interpolationOptions",
        description="Interpolation option BLOCK / LINEAR for the two inputs date and value",
    )
    rtc_output: RtcDateLookupTableOutputComplexType = Field(..., alias="rtc:output")


class RtcHydraulicStructureComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    rtc_orifice: Optional[RtcOrificeComplexType] = Field(
        None,
        alias="rtc:orifice",
        description="Orifice according to definition in SOBEK-Rural",
    )
    rtc_pump: Optional[RtcPumpComplexType] = Field(
        None, alias="rtc:pump", description="Pump"
    )
    rtc_weir: Optional[RtcRiverWeirComplexType] = Field(
        None,
        alias="rtc:weir",
        description="Weir according to definition in SOBEK-River",
    )


class RtcHydrologicalModelComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_submodel: List[RtcSubmodelComplexType] = Field(
        ..., alias="rtc:submodel", min_items=1
    )


class RtcLayerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: RtcLayerIDSimpleType = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_neuron: List[RtcNeuronComplexType] = Field(..., alias="rtc:neuron", min_items=1)


class RtcNeuralNetworkComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_layer: List[RtcLayerComplexType] = Field(..., alias="rtc:layer", min_items=1)


class RtcReservoirComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_controlledOutlet: Optional[List[RtcControlledOutletComplexType]] = Field(
        None, alias="rtc:controlledOutlet"
    )
    rtc_input: RtcReservoirInputComplexType = Field(..., alias="rtc:input")
    rtc_mode: RtcMode4 = Field(
        ...,
        alias="rtc:mode",
        description="Time integration scheme for the network components",
    )
    rtc_output: RtcReservoirOutputComplexType = Field(..., alias="rtc:output")
    rtc_storageCharacteristics: RtcStorageCharacteristicsComplexType = Field(
        ...,
        alias="rtc:storageCharacteristics",
        description="Storage characteristics of the reservoir: The storage S as a function of the water level h can be provided as a table or formula.",
    )
    rtc_tailwater: Optional[RtcTailwaterComplexType] = Field(
        None,
        alias="rtc:tailwater",
        description="Tailwater rating curve\n                    ",
    )
    rtc_theta: RtcTheta3 = Field(
        ...,
        alias="rtc:theta",
        description="Time weighting coefficient for the semi-implicit theta schema: 0 is equal to a full weight on the old time step, 1 represents a full weight on new time step. The coefficient is not used in the fully explicit or implicit schemas. The permitted range is between 0.5 and 1.0.",
    )
    rtc_uncontrolledOutlet: Optional[List[RtcUncontrolledOutletComplexType]] = Field(
        None, alias="rtc:uncontrolledOutlet"
    )


class RtcReservoirRoutingComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_simpleReservoir: List[RtcSimpleReservoirComplexType] = Field(
        ..., alias="rtc:simpleReservoir", min_items=1
    )


class RtcRoutingComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_dischargeRef: Optional[RtcDischargeRef] = Field(
        None,
        alias="rtc:dischargeRef",
        description="Reference to timeseries in data configuration",
    )
    rtc_inflow: Optional[List[RtcInflowComplexType]] = Field(None, alias="rtc:inflow")
    rtc_outputReferences: RtcRoutingOutputComplexType = Field(
        ...,
        alias="rtc:outputReferences",
        description="Contains references to the output timeseries in the data configuration",
    )
    rtc_reservoirRouting: Optional[RtcReservoirRoutingComplexType] = Field(
        None, alias="rtc:reservoirRouting"
    )


class RtcTable2DLookupTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_matrix: RtcXDimComplexType = Field(..., alias="rtc:matrix")
    rtc_x: RtcValueArrayComplexType = Field(..., alias="rtc:x")
    rtc_y: RtcValueArrayComplexType = Field(..., alias="rtc:y")


class RtcThunerseeRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcThunerseeRuleInputComplexType = Field(..., alias="rtc:input")
    rtc_levelSetpoint: RtcLevelSetpoint = Field(..., alias="rtc:levelSetpoint")
    rtc_output: RtcThunerseeRuleOutputComplexType = Field(..., alias="rtc:output")
    rtc_releaseLimiterPercentage: RtcReleaseLimiterPercentage = Field(
        ..., alias="rtc:releaseLimiterPercentage"
    )
    rtc_reservoir: RtcReservoirThunerseeRuleComplexType = Field(
        ..., alias="rtc:reservoir"
    )
    rtc_tunnel: RtcTunnelThunerseeRuleComplexType = Field(..., alias="rtc:tunnel")
    rtc_weir: RtcWeirThunerseeRuleComplexType = Field(..., alias="rtc:weir")


class RtcTimeRelativeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_controlTable: RtcTimeRelativeControlTableComplexType = Field(
        ..., alias="rtc:controlTable", description="table with time [s] / value records"
    )
    rtc_input: Optional[RtcTimeRelativeInputComplexType] = Field(
        None, alias="rtc:input"
    )
    rtc_interpolationOption: Optional[RtcInterpolationOption1] = Field(
        None,
        alias="rtc:interpolationOption",
        description="table interpolation can be BLOCK or LINEAR, default setting if not provided is LINEAR",
    )
    rtc_maximumPeriod: Optional[RtcMaximumPeriod] = Field(
        None, alias="rtc:maximumPeriod"
    )
    rtc_mode: Optional[RtcMode5] = Field(
        None,
        alias="rtc:mode",
        description='timeRelative mode, either "NATIVE" or "RETAINVALUEWHENINACTIVE"',
    )
    rtc_output: RtcTimeRelativeOutputComplexType = Field(..., alias="rtc:output")
    rtc_valueOption: RtcValueOption = Field(
        ...,
        alias="rtc:valueOption",
        description="setting if the control table provides the absolute value or the relative value ",
    )


class RtcUnitHydrographComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcUnitHydrographInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcUnitHydrographOutputComplexType = Field(..., alias="rtc:output")
    rtc_weights: RtcUnitHydrographWeightComplexType = Field(..., alias="rtc:weights")


class RtcHydraulicModelComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_branch: Optional[List[RtcBranchComplexType]] = Field(None, alias="rtc:branch")
    rtc_hydraulicStructure: Optional[List[RtcHydraulicStructureComplexType]] = Field(
        None, alias="rtc:hydraulicStructure"
    )
    rtc_mode: RtcMode = Field(..., alias="rtc:mode")
    rtc_node: Optional[List[RtcNodeComplexType]] = Field(None, alias="rtc:node")
    rtc_numericalTolerance: RtcNumericalTolerance = Field(
        ..., alias="rtc:numericalTolerance"
    )
    rtc_output: Optional[RtcHydraulicModelOutputComplexType] = Field(
        None, alias="rtc:output"
    )
    rtc_sequentialImplicitSettings: Optional[
        RtcHydraulicModelSequentialImplicitComplexType
    ] = Field(None, alias="rtc:sequentialImplicitSettings")
    rtc_simultaneousSettings: Optional[
        RtcHydraulicModelSimultaneousComplexType
    ] = Field(None, alias="rtc:simultaneousSettings")


class RtcLookup2DTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_input: RtcLookup2DTableInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcLookup2DTableOutputComplexType = Field(..., alias="rtc:output")
    rtc_table: RtcTable2DLookupTableComplexType = Field(..., alias="rtc:table")


class RtcComponentComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _template: Optional[XsString] = Field(None, alias="@template")
    rtc_accumulation: Optional[RtcAccumulationComplexType] = Field(
        None,
        alias="rtc:accumulation",
        description="Accumulation of a time series over time",
    )
    rtc_allocationTable: Optional[RtcAllocationTableComplexType] = Field(
        None, alias="rtc:allocationTable"
    )
    rtc_arma: Optional[RtcArmaComplexType] = Field(
        None, alias="rtc:arma", description="Arma error correction model"
    )
    rtc_expression: Optional[RtcExpressionComplexType] = Field(
        None, alias="rtc:expression", description="Mathematical expression"
    )
    rtc_gradient: Optional[RtcGradientComplexType] = Field(
        None,
        alias="rtc:gradient",
        description="Post processing for computing gradients of simulated values",
    )
    rtc_hbv: Optional[RtcHBVComplexType] = Field(
        None,
        alias="rtc:hbv",
        description="This is an implementation of the HBV-96 hydrological model. Note that the unit hydrograph is not included, but available separately.",
    )
    rtc_hydraulicModel: Optional[RtcHydraulicModelComplexType] = Field(
        None,
        alias="rtc:hydraulicModel",
        description="Simplifications of the full dynamic, one-dimensional hydraulic model according to the kinematic wave, diffusive wave and inertial assumptions.",
    )
    rtc_hydrologicalModel: Optional[RtcHydrologicalModelComplexType] = Field(
        None,
        alias="rtc:hydrologicalModel",
        description="Modular, conceptual hydrological model with implicit time stepping scheme.",
    )
    rtc_lookup2DTable: Optional[RtcLookup2DTableComplexType] = Field(
        None, alias="rtc:lookup2DTable"
    )
    rtc_lookupTable: Optional[RtcLookupTableComplexType] = Field(
        None, alias="rtc:lookupTable"
    )
    rtc_lorentGevers: Optional[RtcLorentGeversComplexType] = Field(
        None, alias="rtc:lorentGevers", description="Lorent/Gevers hydrological model"
    )
    rtc_merger: Optional[RtcMergerComplexType] = Field(None, alias="rtc:merger")
    rtc_mergerSplitter: Optional[RtcMergerSplitterComplexType] = Field(
        None, alias="rtc:mergerSplitter"
    )
    rtc_neuralNetwork: Optional[RtcNeuralNetworkComplexType] = Field(
        None, alias="rtc:neuralNetwork"
    )
    rtc_reservoir: Optional[RtcReservoirComplexType] = Field(
        None,
        alias="rtc:reservoir",
        description="Reservoir with arbitrary number of inlets and outlets.",
    )
    rtc_reservoirCompact: Optional[RtcReservoirCompactComplexType] = Field(
        None,
        alias="rtc:reservoirCompact",
        description="Test implementation of a compact reservoir class for simultaneous and sequential optimization mode",
    )
    rtc_routing: Optional[RtcRoutingComplexType] = Field(
        None, alias="rtc:routing", description="not implemented yet"
    )
    rtc_srm: Optional[RtcSRMComplexType] = Field(None, alias="rtc:srm")
    rtc_unitDelay: Optional[RtcUnitDelayComplexType] = Field(
        None,
        alias="rtc:unitDelay",
        description="Unit delay operator for  delaying a value by n times the time step of the model.",
    )
    rtc_unitHydrograph: Optional[RtcUnitHydrographComplexType] = Field(
        None, alias="rtc:unitHydrograph", description="Unit hydrograph"
    )


class RtcComponentsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_component: List[RtcComponentComplexType] = Field(
        ..., alias="rtc:component", min_items=1
    )


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _xmlns_rtc: Optional[Any] = Field("http://www.wldelft.nl/fews", alias="@xmlns:rtc")
    _xmlns_xs: Optional[Any] = Field(
        "http://www.w3.org/2001/XMLSchema", alias="@xmlns:xs"
    )
    rtc_rtcToolsConfig: Optional[_.RtcRtcToolsConfig] = Field(
        None, alias="rtc:rtcToolsConfig"
    )


class RtcDeadBandTimeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_discrete: RtcDeadBandTimeDiscreteComplexType = Field(..., alias="rtc:discrete")
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:false",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )
    rtc_input: RtcDeadBandTimeInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcDeadBandTimeOutputComplexType = Field(..., alias="rtc:output")
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:true",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )


class RtcDeadBandTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_conditionOff: RtcRelationalConditionComplexType = Field(
        ..., alias="rtc:conditionOff"
    )
    rtc_conditionOn: RtcRelationalConditionComplexType = Field(
        ..., alias="rtc:conditionOn"
    )
    rtc_default: Optional[RtcDefault] = Field(None, alias="rtc:default")
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:false",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )
    rtc_output: RtcTriggerOutputComplexType = Field(..., alias="rtc:output")
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:true",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )


class RtcPolygonLookupComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_default: Optional[RtcDefault1] = Field(None, alias="rtc:default")
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:false",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )
    rtc_input: RtcPolygonLookupInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcPolygonLookupOutputComplexType = Field(..., alias="rtc:output")
    rtc_polygons: RtcPolygonsComplexType = Field(..., alias="rtc:polygons")
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:true",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )


class RtcRtcToolsConfigComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_components: Optional[RtcComponentsComplexType] = Field(
        None,
        alias="rtc:components",
        description="The components section includes all simulation components.",
    )
    rtc_general: Optional[RtcGeneralModuleConfigComplexType] = Field(
        None,
        alias="rtc:general",
        description="OBSOLETE. Still here for backwards compatibility. Remove after next release.",
    )
    rtc_rules: Optional[RtcRulesComplexType] = Field(
        None,
        alias="rtc:rules",
        description="The rules section includes operating rules or controllers for defining the release of reservoir, structural settings of gates etc.",
    )
    rtc_triggers: Optional[RtcTriggersComplexType] = Field(
        None,
        alias="rtc:triggers",
        description="Triggers may activate or deactivate rules defined in the section above.",
    )


class RtcRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_constant: Optional[RtcConstantRuleComplexType] = Field(
        None, alias="rtc:constant", description="Simple rule with constant value"
    )
    rtc_dateLookupTable: Optional[RtcDateLookupTableComplexType] = Field(
        None,
        alias="rtc:dateLookupTable",
        description="Date lookup table, output y is a function of date and an input value x, the interpolation on the date / value axis can be BLOCK or LINEAR, the number of records should be constant for each date record",
    )
    rtc_deadBandTime: Optional[RtcDeadBandTimeComplexType] = Field(
        None, alias="rtc:deadBandTime"
    )
    rtc_deadBandValue: Optional[RtcDeadBandValueComplexType] = Field(
        None,
        alias="rtc:deadBandValue",
        description="Deadband threshold, yNew will become yOld, if the change yNew-yOld is smaller than the threshold value ",
    )
    rtc_dedicated_Aebi: Optional[RtcAebiRuleComplexType] = Field(
        None,
        alias="rtc:dedicated-Aebi",
        description="Dedicated rule for the control of Bielersee, Canton Bern, CH",
    )
    rtc_dedicated_Thunersee: Optional[RtcThunerseeRuleComplexType] = Field(
        None,
        alias="rtc:dedicated-Thunersee",
        description="Dedicated rule for the control of Thunersee, Canton Bern, CH",
    )
    rtc_expression: Optional[RtcExpressionComplexType] = Field(
        None, alias="rtc:expression", description="mathematical expression"
    )
    rtc_guideband: Optional[RtcGuideBandRuleComplexType] = Field(
        None,
        alias="rtc:guideband",
        description="Guide band rule, output get 0 if input less equal xMin, 1 if input greater equal xMax, linear interpolation otherwise xMin and xMax can be a function of date, main application in combination with a relative release of a reservoir outlet",
    )
    rtc_interval: Optional[RtcIntervalComplexType] = Field(None, alias="rtc:interval")
    rtc_limiter: Optional[RtcLimiterComplexType] = Field(
        None,
        alias="rtc:limiter",
        description="Limiter for limiting the change of a variable in a time step to a relative (PERCENTAGE) or absolute  (ABSOLUTE) change",
    )
    rtc_lookup2DTable: Optional[RtcLookup2DTableComplexType] = Field(
        None, alias="rtc:lookup2DTable"
    )
    rtc_lookupTable: Optional[RtcLookupTableComplexType] = Field(
        None, alias="rtc:lookupTable"
    )
    rtc_merger: Optional[RtcMergerComplexType] = Field(
        None,
        alias="rtc:merger",
        description="Data hierarchy, highest input has highest priority",
    )
    rtc_pid: Optional[RtcPidComplexType] = Field(None, alias="rtc:pid")
    rtc_timeAbsolute: Optional[RtcTimeAbsoluteComplexType] = Field(
        None, alias="rtc:timeAbsolute", description="absolute time controller"
    )
    rtc_timeRelative: Optional[RtcTimeRelativeComplexType] = Field(
        None, alias="rtc:timeRelative", description="relative time controller"
    )
    rtc_unitDelay: Optional[RtcUnitDelayComplexType] = Field(
        None,
        alias="rtc:unitDelay",
        description="Unit delay operator for  delaying a value by n times the time step of the model.",
    )


class RtcRuleTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_trigger: Optional[List[RtcTriggerComplexType]] = Field(
        None, alias="rtc:trigger"
    )


class RtcRulesComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_rule: List[RtcRuleComplexType] = Field(..., alias="rtc:rule", min_items=1)


class RtcSetTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_default: Optional[RtcDefault2] = Field(None, alias="rtc:default")
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:false",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )
    rtc_logicalOperator: RtcLogicalOperator = Field(..., alias="rtc:logicalOperator")
    rtc_output: RtcTriggerOutputComplexType = Field(..., alias="rtc:output")
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:true",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )
    rtc_x1Series: Optional[rtc_TimeSeriesSimpleType.Field24] = Field(
        None, alias="rtc:x1Series"
    )
    rtc_x1Trigger: Optional[RtcTriggerComplexType] = Field(None, alias="rtc:x1Trigger")
    rtc_x1Value: Optional[RtcX1Value2] = Field(None, alias="rtc:x1Value")
    rtc_x2Series: Optional[rtc_TimeSeriesSimpleType.Field25] = Field(
        None, alias="rtc:x2Series"
    )
    rtc_x2Trigger: Optional[RtcTriggerComplexType] = Field(None, alias="rtc:x2Trigger")
    rtc_x2Value: Optional[RtcX2Value2] = Field(None, alias="rtc:x2Value")


class RtcSpreadsheetComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_defaultInputValue: Optional[RtcDefaultInputValue] = Field(
        None,
        alias="rtc:defaultInputValue",
        description="default input value, if input is NaN or infinity",
    )
    rtc_defaultOutputValue: Optional[RtcDefaultOutputValue] = Field(
        None,
        alias="rtc:defaultOutputValue",
        description="default output, if no combination of the table applies",
    )
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:false",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )
    rtc_input: RtcSpreadsheetInputComplexType = Field(..., alias="rtc:input")
    rtc_output: RtcSpreadsheetOutputComplexType = Field(..., alias="rtc:output")
    rtc_tables: RtcSpreadsheetTablesComplexType = Field(
        ...,
        alias="rtc:tables",
        description="number of tables with input, output values, the initial state can be taken into account optionally",
    )
    rtc_tolerance: RtcTolerance = Field(
        ...,
        alias="rtc:tolerance",
        description="tolerance for finding a match, keep in mind that the all variable are stored in doubles",
    )
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:true",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )
    rtc_validPeriods: Optional[RtcValidPeriodsComplexType] = Field(
        None,
        alias="rtc:validPeriods",
        description="optional period of the year for which the trigger is active",
    )


class RtcStandardTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    _id: XsString = Field(..., alias="@id")
    _name: Optional[XsString] = Field(None, alias="@name")
    rtc_condition: RtcRelationalConditionComplexType = Field(..., alias="rtc:condition")
    rtc_default: Optional[RtcDefault3] = Field(None, alias="rtc:default")
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:false",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )
    rtc_output: RtcTriggerOutputComplexType = Field(..., alias="rtc:output")
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias="rtc:true",
        description="link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules",
    )


class RtcTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_deadBand: Optional[RtcDeadBandTriggerComplexType] = Field(
        None, alias="rtc:deadBand", description="trigger with deadband"
    )
    rtc_deadBandTime: Optional[RtcDeadBandTimeComplexType] = Field(
        None, alias="rtc:deadBandTime", description="trigger with time deadband"
    )
    rtc_expression: Optional[RtcExpressionComplexType] = Field(
        None, alias="rtc:expression", description="mathematical expression"
    )
    rtc_lookupTable: Optional[RtcLookupTableComplexType] = Field(
        None, alias="rtc:lookupTable"
    )
    rtc_merger: Optional[RtcMergerComplexType] = Field(
        None,
        alias="rtc:merger",
        description="Data hierarchy, highest input has highest priority",
    )
    rtc_polygonLookup: Optional[RtcPolygonLookupComplexType] = Field(
        None,
        alias="rtc:polygonLookup",
        description="trigger with two-dimensional lookup table, trigger results are defined by polygons",
    )
    rtc_ruleReference: Optional[RtcRuleReference] = Field(
        None, alias="rtc:ruleReference"
    )
    rtc_set: Optional[RtcSetTriggerComplexType] = Field(
        None, alias="rtc:set", description="set of triggers"
    )
    rtc_spreadsheet: Optional[RtcSpreadsheetComplexType] = Field(
        None, alias="rtc:spreadsheet", description="spread sheet trigger"
    )
    rtc_standard: Optional[RtcStandardTriggerComplexType] = Field(
        None, alias="rtc:standard", description="standard trigger"
    )


class RtcTriggersComplexType(BaseModel):
    class Config:
        extra = Extra.forbid

    _: Optional[str] = Field(None, alias="#")
    rtc_trigger: List[RtcTriggerComplexType] = Field(
        ..., alias="rtc:trigger", min_items=1
    )


Model.update_forward_refs()
RtcDeadBandTimeComplexType.update_forward_refs()
RtcDeadBandTriggerComplexType.update_forward_refs()
RtcPolygonLookupComplexType.update_forward_refs()
RtcRtcToolsConfigComplexType.update_forward_refs()
RtcRuleTriggerComplexType.update_forward_refs()
RtcSetTriggerComplexType.update_forward_refs()
