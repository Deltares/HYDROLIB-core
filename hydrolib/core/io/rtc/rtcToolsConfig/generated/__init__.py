# generated by datamodel-codegen:
#   filename:  rtcToolsConfig.json
#   timestamp: 2022-09-27T13:06:58+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Extra, Field

from . import _
from ._._ import rtc_ExternalParameterSimpleType, rtc_TimeSeriesSimpleType, xs_string


class RtcAggregationTypeEnumStringType(str, Enum):
    BLOCK = 'BLOCK'
    LINEAR = 'LINEAR'


class RtcBranchTypeEnumStringType(str, Enum):
    KINEMATIC = 'KINEMATIC'
    DIFFUSIVE = 'DIFFUSIVE'
    DIFFUSIVEPLUSLOCAL = 'DIFFUSIVEPLUSLOCAL'


class RtcCapacityReferenceEnumStringType(str, Enum):
    """
    reference for capacity
    """

    UPSTREAMLEVEL = 'UPSTREAMLEVEL'
    HEAD = 'HEAD'


class _MonthOfYear(str, Enum):
    January = 'January'
    February = 'February'
    March = 'March'
    April = 'April'
    May = 'May'
    June = 'June'
    July = 'July'
    August = 'August'
    September = 'September'
    October = 'October'
    November = 'November'
    December = 'December'


class RtcEnsembleModeEnumStringType(str, Enum):
    JOINT = 'JOINT'
    TREE = 'TREE'
    INDEPENDENT = 'INDEPENDENT'


class RtcEquationEnumStringType(str, Enum):
    KINEMATIC = 'KINEMATIC'
    DIFFUSIVE = 'DIFFUSIVE'
    INERTIAL = 'INERTIAL'


class RtcExternalBooleanSimpleTypeItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(..., regex='^([\\$][\\(-_a-z]+[\\$])$')


class RtcExternalBooleanSimpleType(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: Union[bool, RtcExternalBooleanSimpleTypeItem]


class RtcExternalIntegerSimpleTypeItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(..., regex='^([\\$][\\(-_a-z]+[\\$])$')


class RtcExternalIntegerSimpleType(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: Union[int, RtcExternalIntegerSimpleTypeItem]


class RtcExternalParameterSimpleTypeItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(..., regex='^([#-\\$][\\(-_a-z]+[#-\\$])$')


class RtcExternalParameterSimpleType(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: Union[float, RtcExternalParameterSimpleTypeItem]


class RtcHBVParameterInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_ECORR: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:ECORR', description='correction factor for EP'
    )
    rtc_RFCF: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:RFCF', description='correction factor for rainfall'
    )
    rtc_SFCF: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:SFCF', description='correction factor for snow'
    )
    rtc_TT: RtcExternalParameterSimpleType = Field(
        ...,
        alias='rtc:TT',
        description='temperature limit for snow / rain [oC], normally close to 0 ',
    )
    rtc_TTI: RtcExternalParameterSimpleType = Field(
        ...,
        alias='rtc:TTI',
        description='temperature interval with a mixture of snow / rain [oC]',
    )


class RtcHBVParameterInterceptionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_LIC: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:LIC', description='maximum interception storage'
    )


class RtcHBVParameterResponseComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_ALPHA: RtcExternalParameterSimpleType = Field(
        ...,
        alias='rtc:ALPHA',
        description='response box parameter [-], usually between 1.0 and 2.0',
    )
    rtc_AREA: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:AREA', description='catchment area [km2]'
    )
    rtc_K: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:K', description='recession coefficient'
    )
    rtc_K1: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:K1', description='recession coefficient [1/day]'
    )
    rtc_PERC: RtcExternalParameterSimpleType = Field(
        ...,
        alias='rtc:PERC',
        description='percolation from upper to lower response box [mm/day], usually between 0 and 6',
    )


class RtcHBVParameterSnowComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_CFMAX: RtcExternalParameterSimpleType = Field(
        ...,
        alias='rtc:CFMAX',
        description='degree day factor [mm/(oC*day)], varies normally between 1.5 and 4, 2 and 3.5 can be used in forested and open\nlandscape respectively',
    )
    rtc_CFR: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:CFR', description='refreezing factor [-], about 0.05'
    )
    rtc_CWH: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:CWH', description='water holding capacity [-], usually 0.1'
    )
    rtc_TTM: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:TTM', description='temperature limit for melting [oC]'
    )


class RtcHBVParameterSoilComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_BETA: RtcExternalParameterSimpleType = Field(
        ...,
        alias='rtc:BETA',
        description='parameter in soil routine [-], usually between 1 and 6',
    )
    rtc_CFLUX: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:CFLUX', description='maximum value of CF'
    )
    rtc_ETF: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:ETF', description='temperature correction factor'
    )
    rtc_FC: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:FC', description='field capacity [mm], between 50 and 500'
    )
    rtc_LP: RtcExternalParameterSimpleType = Field(
        ...,
        alias='rtc:LP',
        description='limit for potential evapotranspiration [-], in the range between 0.3 and 1',
    )


class RtcHydraulicModelModeEnumStringType(str, Enum):
    SEQUENTIAL_EXPLICIT = 'SEQUENTIAL_EXPLICIT'
    SEQUENTIAL_IMPLICIT = 'SEQUENTIAL_IMPLICIT'
    SIMULTANEOUS = 'SIMULTANEOUS'


class RtcLayerIDSimpleType(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(..., regex='^([L][0-9]+)$')


class RtcPropertyEnum(str, Enum):
    MONOTON = 'MONOTON'
    POSITIVE = 'POSITIVE'


class RtcLorentGeversParameterResponseComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: RtcExternalParameterSimpleType = Field(..., alias='rtc:AREA')
    rtc_KB: RtcExternalParameterSimpleType = Field(..., alias='rtc:KB')
    rtc_KS: RtcExternalParameterSimpleType = Field(..., alias='rtc:KS')
    rtc_TB1: RtcExternalParameterSimpleType = Field(..., alias='rtc:TB1')
    rtc_TB2: RtcExternalParameterSimpleType = Field(..., alias='rtc:TB2')
    rtc_TS1: RtcExternalParameterSimpleType = Field(..., alias='rtc:TS1')
    rtc_TS2: RtcExternalParameterSimpleType = Field(..., alias='rtc:TS2')


class RtcLorentGeversParameterSoilComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_BETA: RtcExternalParameterSimpleType = Field(..., alias='rtc:BETA')
    rtc_PMAX: RtcExternalParameterSimpleType = Field(..., alias='rtc:PMAX')
    rtc_SMAX: RtcExternalParameterSimpleType = Field(..., alias='rtc:SMAX')


class RtcMathematicalOperatorEnumStringType(str, Enum):
    """
    mathematical operators
    """

    _ = '+'
    __1 = '-'
    __2 = '*'
    __3 = '/'
    min = 'min'
    max = 'max'
    __4 = '^'


class RtcMergerSplitterEnumStringType(str, Enum):
    AVERAGE = 'AVERAGE'
    DATAHIERARCHY = 'DATAHIERARCHY'
    SUM = 'SUM'


class RtcNeuronIDSimpleType(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(..., regex='^([L][0-9]+[N][0-9]+)$')


class RtcParameterCapillaryFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2]'
    )
    rtc_CFLUX: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:CFLUX', description='maximum value of capillary flow [mm/d]'
    )
    rtc_FC: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:FC', description='field capacity [mm]'
    )


class RtcParameterEvaporationActualStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [1000 m2], default = 1.0'
    )
    rtc_D: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:D',
        description='distance measure for smoothing the transitions [-]',
    )
    rtc_FC: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:FC', description='field capacity [mm]'
    )
    rtc_LP: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:LP', description='limit for potential evaporation [-]'
    )


class RtcParameterEvaporationInterceptionStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2]'
    )


class RtcParameterEvaporationPotentialComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_ECORR: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:ECORR',
        description='evaporation correction factor, default = 1.0',
    )
    rtc_ETF: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:ETF', description='temperature correction factor'
    )


class RtcParameterIrrigationStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2], default = 1.0'
    )
    rtc_IRR_CONST: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:IRR_CONST', description='costant irrigation flux [mm/d]'
    )
    rtc_IRR_THR: RtcExternalParameterSimpleType = Field(
        ...,
        alias='rtc:IRR_THR',
        description='Threshold of the downstream node under which irrigation is needed [mm]',
    )
    rtc_M: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:M', description='smoothing factor'
    )


class RtcParameterMeltRefreezingStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2]'
    )
    rtc_CFMAX: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:CFMAX', description='degree day factor [mm/day]'
    )
    rtc_CFR: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:CFR', description='refreezing factor [-]'
    )
    rtc_M: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:M',
        description='smoothing factor, default = 0.05, more smoothing for higher value and vice versa',
    )
    rtc_TTM: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:TTM', description='temperature limit for melting [oC]'
    )


class RtcParameterPercolationStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2]'
    )
    rtc_PERC: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:PERC', description='percolation [mm/d]'
    )


class RtcParameterReleaseAboveThresholdStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2], default = 1.0'
    )
    rtc_FRAC: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:FRAC',
        description='percentage of the flow which flows towards the bucket of interest. The permitted range is between 0 and 100',
    )
    rtc_LIC: RtcExternalParameterSimpleType = Field(
        ...,
        alias='rtc:LIC',
        description='upper limit of (interception) storage node [mm]',
    )
    rtc_M: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:M', description='smoothing factor'
    )


class RtcParameterReleaseTotalComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:AREA', description='area [km2]'
    )


class RtcParameterReleaseWaterContentStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2]'
    )
    rtc_M: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:M', description='smoothing coefficient'
    )
    rtc_WHC: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:WHC', description='water holding capacity [-]'
    )


class RtcParameterResponseStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_ALPHA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:ALPHA', description='response box parameter [-], default = 0.0'
    )
    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2]'
    )
    rtc_K: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:K', description='recession coefficient [1/d]'
    )


class RtcParameterSnowRainJunctionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_D: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:D',
        description='smoothing parameter for switching between a linear ramp (D=0.0) and a sigmoid function (D=1.0)',
    )
    rtc_RFCF: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:RFCF',
        description='rainfall correction factor [-], default is 1.0',
    )
    rtc_SFCF: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:SFCF',
        description='snowfall correction factor [-], default is 1.0',
    )
    rtc_TT: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:TT', description='temperature limit for snow and rainfall [oC]'
    )
    rtc_TTI: RtcExternalParameterSimpleType = Field(
        ...,
        alias='rtc:TTI',
        description='temperature interval with a mixture of snow and rainfall [K]',
    )


class RtcParameterSoilRunoffStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2]'
    )
    rtc_BETA: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:BETA', description='parameter in soil routine [-]'
    )
    rtc_FC: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:FC', description='field capacity [mm]'
    )


class RtcParameterWaterDistributionConstantStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2], default = 1.0'
    )
    rtc_D: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:D', description='capacity of demand/abstraction [m3/s]'
    )
    rtc_M: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:M', description='smoothing factor'
    )
    rtc_MIN_UP: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:MIN_UP',
        description='minimum abstraction level upstream [mm]. Default 0, till empty.',
    )


class RtcParameterWaterDistributionVariableStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2], default = 1.0'
    )
    rtc_M: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:M', description='smoothing factor'
    )
    rtc_MIN_UP: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:MIN_UP',
        description='minimum abstraction level upstream [mm]. Default 0, till empty.',
    )


class RtcParametergroundwaterFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_ALPHA: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:ALPHA', description='Ground water reaction coefficient'
    )
    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='area [km2]'
    )
    rtc_K: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:K', description='Ground water Conductivity [1/d]'
    )
    rtc_MAX_GFLOW: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:MAX_GFLOW', description='Maximum groundwater flow [mm/d]'
    )


class RtcMode(str, Enum):
    """
    pid mode, either "NATIVE" or "SOBEK2" or "PIDPOS" or PIDVEL"
    """

    NATIVE = 'NATIVE'
    SOBEK2 = 'SOBEK2'
    PIDPOS = 'PIDPOS'
    PIDVEL = 'PIDVEL'


class RtcSRMParameterComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_Pt: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:Pt', description='precipitation threshold [mm]'
    )
    rtc_TLag: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:TLag', description='Time lag of input data [h]'
    )
    rtc_x: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:x', description='recession coefficient 1'
    )
    rtc_y: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:y', description='recession coefficient 2'
    )


class RtcSpatialEnumStringType(str, Enum):
    """
    options for spatial schetization
    """

    CENTRAL = 'CENTRAL'
    UPWIND = 'UPWIND'


class RtcMode1(str, Enum):
    """
    timeRelative mode, either "NATIVE" or "RETAINVALUEWHENINACTIVE"
    """

    NATIVE = 'NATIVE'
    RETAINVALUEWHENINACTIVE = 'RETAINVALUEWHENINACTIVE'


class RtcTimeSeriesSimpleType(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(..., min_length=1)


class RtcTimeZoneSimpleType(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: float = Field(
        ...,
        description='The timeZone (in decimal hours shift from GMT)\n            e.g. -1.0 or 3.5. If not present GMT is assumed',
    )


class RtcTriggerInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_status: RtcTimeSeriesSimpleType = Field(..., alias='rtc:status')


class RtcTriggerOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_status: RtcTimeSeriesSimpleType = Field(..., alias='rtc:status')
    rtc_timeFalse: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:timeFalse'
    )
    rtc_timeTrue: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:timeTrue')


class RtcTurbineInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_relativeRelease: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:relativeRelease',
        description='provision of relative turbine release, 1 = maximum capacity',
    )
    rtc_release: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:release', description='provision of absolute turbine release'
    )


class RtcTurbineOutputCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_power: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:power', description='power output [MW]'
    )


class RtcTurbineOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_discharge: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:discharge', description='discharge in m3/s'
    )
    rtc_powerProduction: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:powerProduction', description='power production in MW'
    )


class RtcUOutletInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_release: RtcTimeSeriesSimpleType = Field(..., alias='rtc:release')


class RtcUnitDelayInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: RtcTimeSeriesSimpleType = Field(..., alias='rtc:x')


class RtcUnitDelayOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_y: Optional[List[RtcTimeSeriesSimpleType]] = Field(None, alias='rtc:y')
    rtc_yFinal: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:yFinal',
        description='optional result of the delay operator, identical to yVector[end] if the delay is a multiple of the time step, required in case of sub time steps',
    )
    rtc_yMax: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:yMax')
    rtc_yMean: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:yMean', description='optional mean of input and outputs'
    )
    rtc_yMin: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:yMin')
    rtc_ySum: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:ySum', description='optional sum of input and outputs'
    )
    rtc_yVector: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:yVector')


class RtcUnitHydrographInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: RtcTimeSeriesSimpleType = Field(..., alias='rtc:x')


class RtcUnitHydrographOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_xDelay: Optional[List[RtcTimeSeriesSimpleType]] = Field(
        None, alias='rtc:xDelay'
    )
    rtc_xDelayVector: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:xDelayVector',
        description='definition of delay vector, configure one element less than weights defined above',
    )
    rtc_y: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:y', description='result of unit hydrograph'
    )


class RtcUnitTypeEnumStringType(str, Enum):
    SI = 'SI'
    Imperial = 'Imperial'


class RtcVariableTypeEnumStringType(str, Enum):
    CONTINUOUS = 'CONTINUOUS'
    INTEGER = 'INTEGER'
    TIMEINSTANCE = 'TIMEINSTANCE'


class RtcCaseLangetenEnumStringType(int, Enum):
    integer_1 = 1
    integer_2 = 2


class RtcDateType(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(
        ..., regex='^([\\d][\\d][\\d][\\d]\\-[\\d][\\d]\\-[\\d][\\d])$'
    )


class RtcFlowDirectionEnumStringTypeEnum(str, Enum):
    POSITIVE = 'POSITIVE'
    NEGATIVE = 'NEGATIVE'
    BOTH = 'BOTH'


class RtcFlowDirectionEnumStringTypeItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(..., regex='^([\\$][\\(-_a-z]+[\\$])$')


class RtcFlowDirectionEnumStringType(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: Union[
        RtcFlowDirectionEnumStringTypeEnum, RtcFlowDirectionEnumStringTypeItem
    ] = Field(..., description='flow direction')


class RtcInputReferenceEnumStringType(str, Enum):
    EXPLICIT = 'EXPLICIT'
    IMPLICIT = 'IMPLICIT'


class RtcInterpolationOptionEnumStringType(str, Enum):
    """
    Type of interpolation
    """

    BLOCK = 'BLOCK'
    LINEAR = 'LINEAR'


class RtcLimiterOptionEnumStringType(str, Enum):
    """
    Type of limiting
    """

    PERCENTAGE = 'PERCENTAGE'
    ABSOLUTE = 'ABSOLUTE'


class RtcLogicalOperatorEnumStringType(str, Enum):
    """
    logical operator
    """

    AND = 'AND'
    OR = 'OR'
    XOR = 'XOR'


class RtcPoolRoutingEnumStringType(str, Enum):
    """
    Type of pool routing.
    """

    ForwardEuler = 'ForwardEuler'
    BackwardEuler = 'BackwardEuler'
    Theta = 'Theta'


class RtcRelationalOperatorEnumStringType(str, Enum):
    """
    relational operator
    """

    Less = 'Less'
    LessEqual = 'LessEqual'
    Equal = 'Equal'
    Unequal = 'Unequal'
    GreaterEqual = 'GreaterEqual'
    Greater = 'Greater'


class RtcTimeRelativeEnumStringType(str, Enum):
    """
    Value option
    """

    ABSOLUTE = 'ABSOLUTE'
    RELATIVE = 'RELATIVE'


class RtcTimeSeriesType(str, Enum):
    """
    Type of data, either accumulative or instantaneous.
                        For accumulative data the time/date of the event is
                        the moment at which the data was gathered.
            
    """

    accumulative = 'accumulative'
    instantaneous = 'instantaneous'


class RtcTimeStepUnitEnumStringType(str, Enum):
    second = 'second'
    minute = 'minute'
    hour = 'hour'
    day = 'day'
    week = 'week'


class RtcTimeType(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str = Field(..., regex='^([\\d][\\d]\\:[\\d][\\d]\\:[\\d][\\d])$')


class RtcTransferFunctionEnumStringType(str, Enum):
    """
    Type of transfer function.
    """

    Linear = 'Linear'
    SigmoidLogistic = 'SigmoidLogistic'
    Tansig = 'Tansig'


class XsBoolean(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: bool


class XsDateTime(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str


class XsDouble(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: float


class XsFloat(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: float


class XsGMonthDay(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str


class XsInt(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: int = Field(..., ge=-2147483648, le=2147483647)


class XsInteger(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: int


class XsPositiveInteger(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: int = Field(..., ge=1)


class XsString(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str


class XsTime(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: str


class RtcRowItem(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _value: XsDouble = Field(..., alias='@value')


class RtcATableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_row: List[RtcRowItem] = Field(..., alias='rtc:row', min_items=1)


class RtcAccumulationInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: RtcTimeSeriesSimpleType = Field(..., alias='rtc:x')


class RtcAccumulationOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_y: RtcTimeSeriesSimpleType = Field(..., alias='rtc:y')


class RtcAebiRuleInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AareBruegg: RtcTimeSeriesSimpleType = Field(..., alias='rtc:AareBruegg')
    rtc_AareBrueggMin2: RtcTimeSeriesSimpleType = Field(..., alias='rtc:AareBrueggMin2')
    rtc_AareMurg: RtcTimeSeriesSimpleType = Field(..., alias='rtc:AareMurg')
    rtc_AbflussReglementPort: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:AbflussReglementPort'
    )
    rtc_Emenmatt: RtcTimeSeriesSimpleType = Field(..., alias='rtc:Emenmatt')
    rtc_EmenmattMin4: RtcTimeSeriesSimpleType = Field(..., alias='rtc:EmenmattMin4')
    rtc_Langeten: RtcTimeSeriesSimpleType = Field(..., alias='rtc:Langeten')
    rtc_LangetenMin4: RtcTimeSeriesSimpleType = Field(..., alias='rtc:LangetenMin4')
    rtc_PegelBielersee: RtcTimeSeriesSimpleType = Field(..., alias='rtc:PegelBielersee')


class RtcAebiRuleOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_AareMurg_oKWMin1: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:AareMurg_oKWMin1'
    )
    rtc_AbflussaenderungPort: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:AbflussaenderungPort'
    )
    rtc_MaxAbflussPort: RtcTimeSeriesSimpleType = Field(..., alias='rtc:MaxAbflussPort')
    rtc_ProvMaxAbflussPort: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:ProvMaxAbflussPort'
    )
    rtc_RTG: RtcTimeSeriesSimpleType = Field(..., alias='rtc:RTG')


class RtcArmaInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_obs: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:obs', description='observed data'
    )
    rtc_sim: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:sim', description='simulated data'
    )


class RtcArmaOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_arma: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:arma', description='output-corrected data'
    )


class RtcBranchGradientComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_storageDown: RtcTimeSeriesSimpleType = Field(..., alias='rtc:storageDown')
    rtc_storageUp: RtcTimeSeriesSimpleType = Field(..., alias='rtc:storageUp')
    rtc_surfaceAreaDown: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:surfaceAreaDown'
    )
    rtc_surfaceAreaUp: RtcTimeSeriesSimpleType = Field(..., alias='rtc:surfaceAreaUp')


class RtcBranchInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_HDown: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:HDown', description='ID of downstream node'
    )
    rtc_HUp: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:HUp', description='ID of upstream node'
    )
    rtc_ux: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:ux',
        description='optional wind velocity at an elevation of 10 m above the water surface (x-direction), implementation is for the inertial model only',
    )
    rtc_uy: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:uy',
        description='optional wind velocity at an elevation of 10 m above the water surface (y-direction), implementation is for the inertial model only',
    )


class RtcBranchOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_Q: RtcTimeSeriesSimpleType = Field(..., alias='rtc:Q')


class RtcColumnsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _head01: XsDouble = Field(..., alias='@head01')
    _head02: XsDouble = Field(..., alias='@head02')
    _head03: Optional[XsDouble] = Field(None, alias='@head03')
    _head04: Optional[XsDouble] = Field(None, alias='@head04')
    _head05: Optional[XsDouble] = Field(None, alias='@head05')
    _head06: Optional[XsDouble] = Field(None, alias='@head06')
    _head07: Optional[XsDouble] = Field(None, alias='@head07')
    _head08: Optional[XsDouble] = Field(None, alias='@head08')
    _head09: Optional[XsDouble] = Field(None, alias='@head09')
    _head10: Optional[XsDouble] = Field(None, alias='@head10')
    _head11: Optional[XsDouble] = Field(None, alias='@head11')
    _head12: Optional[XsDouble] = Field(None, alias='@head12')
    _head13: Optional[XsDouble] = Field(None, alias='@head13')
    _head14: Optional[XsDouble] = Field(None, alias='@head14')
    _head15: Optional[XsDouble] = Field(None, alias='@head15')
    _head16: Optional[XsDouble] = Field(None, alias='@head16')
    _head17: Optional[XsDouble] = Field(None, alias='@head17')
    _head18: Optional[XsDouble] = Field(None, alias='@head18')
    _head19: Optional[XsDouble] = Field(None, alias='@head19')
    _head20: Optional[XsDouble] = Field(None, alias='@head20')


class RtcConditionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_greaterThan: Optional[XsDouble] = Field(None, alias='rtc:greaterThan')
    rtc_lessThan: Optional[XsDouble] = Field(None, alias='rtc:lessThan')


class RtcConnectionCoefficientsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_a: RtcExternalParameterSimpleType = Field(..., alias='rtc:a')
    rtc_b: RtcExternalParameterSimpleType = Field(..., alias='rtc:b')
    rtc_c: RtcExternalParameterSimpleType = Field(..., alias='rtc:c')
    rtc_d: RtcExternalParameterSimpleType = Field(..., alias='rtc:d')


class RtcConnectionInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_discharge: RtcTimeSeriesSimpleType = Field(..., alias='rtc:discharge')
    rtc_downstreamLevel: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:downstreamLevel'
    )
    rtc_upstreamLevel: RtcTimeSeriesSimpleType = Field(..., alias='rtc:upstreamLevel')


class RtcConnectionOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_discharge: RtcTimeSeriesSimpleType = Field(..., alias='rtc:discharge')


class RtcConstantRuleOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_y: RtcTimeSeriesSimpleType = Field(..., alias='rtc:y')


class RtcDataTypicalProfileComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _monthOfYear: _MonthOfYear = Field(..., alias='@monthOfYear')
    _value: XsDouble = Field(..., alias='@value')


class RtcDateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _monthDay: XsGMonthDay = Field(..., alias='@monthDay')


class RtcDateLookupTableInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: RtcTimeSeriesSimpleType = Field(..., alias='rtc:x')
    rtc_y: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:y')


class RtcDateLookupTableOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_active: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:active')
    rtc_y: RtcTimeSeriesSimpleType = Field(..., alias='rtc:y')


class RtcDateRecord2DataComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _x: XsDouble = Field(..., alias='@x')
    _y: XsDouble = Field(..., alias='@y')


class RtcDateRecordComplexType(BaseModel):
    """
    defined data input as per time series format date time (defined either by dateTime or time or
                month day) and value
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _comment: Optional[XsString] = Field(None, alias='@comment')
    _dateTime: Optional[XsDateTime] = Field(None, alias='@dateTime')
    _monthDay: Optional[XsGMonthDay] = Field(None, alias='@monthDay')
    _time: Optional[XsTime] = Field(None, alias='@time')
    _value: XsDouble = Field(..., alias='@value')


class RtcDateTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_data: List[RtcDateRecordComplexType] = Field(..., alias='rtc:data', min_items=1)


class RtcDateTimeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _date: RtcDateType = Field(..., alias='@date')
    _time: RtcTimeType = Field(..., alias='@time')


class RtcDeadBandTimeDiscreteComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_numberOfStepsDown: XsInt = Field(..., alias='rtc:numberOfStepsDown')
    rtc_numberOfStepsUp: XsInt = Field(..., alias='rtc:numberOfStepsUp')


class RtcDeadBandTimeInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: rtc_TimeSeriesSimpleType.Field20 = Field(..., alias='rtc:x')


class RtcDeadBandTimeOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_status: RtcTimeSeriesSimpleType = Field(..., alias='rtc:status')
    rtc_stepsDown: RtcTimeSeriesSimpleType = Field(..., alias='rtc:stepsDown')
    rtc_stepsUp: RtcTimeSeriesSimpleType = Field(..., alias='rtc:stepsUp')
    rtc_timeFalse: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:timeFalse'
    )
    rtc_timeTrue: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:timeTrue')


class RtcDeadBandValueInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: RtcTimeSeriesSimpleType = Field(..., alias='rtc:x')


class RtcEdgeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _x1: XsDouble = Field(..., alias='@x1')
    _x2: XsDouble = Field(..., alias='@x2')


class RtcEdgesComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_edge: List[RtcEdgeComplexType] = Field(..., alias='rtc:edge', min_items=1)


class RtcEifelRurRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_a: XsDouble = Field(..., alias='rtc:a')
    rtc_b: XsDouble = Field(..., alias='rtc:b')
    rtc_minimumRelativeStorage: RtcDateTableComplexType = Field(
        ..., alias='rtc:minimumRelativeStorage'
    )


class RtcElevationRecordComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _elevation: XsDouble = Field(..., alias='@elevation')
    _value: RtcExternalParameterSimpleType = Field(..., alias='@value')


class RtcElevationTableComplexType(BaseModel):
    """
    
                Table containing data for different elevations. Type of element 'value'
                depends on purpose for which table is used.
            
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_elevationRecord: List[RtcElevationRecordComplexType] = Field(
        ..., alias='rtc:elevationRecord', min_items=1
    )


class RtcEquationComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_a: RtcExternalParameterSimpleType = Field(..., alias='rtc:a')
    rtc_b: RtcExternalParameterSimpleType = Field(..., alias='rtc:b')
    rtc_c: RtcExternalParameterSimpleType = Field(..., alias='rtc:c')
    rtc_lowerLevel: Optional[XsDouble] = Field(None, alias='rtc:lowerLevel')
    rtc_upperLevel: Optional[XsDouble] = Field(None, alias='rtc:upperLevel')


class RtcEquationsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_equation: List[RtcEquationComplexType] = Field(
        ..., alias='rtc:equation', min_items=1
    )


class RtcExpressionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_mathematicalOperator: RtcMathematicalOperatorEnumStringType = Field(
        ...,
        alias='rtc:mathematicalOperator',
        description='mathematical operator: + (summation), - (substraction), * (multiplication), / (division), min, max, ^ (power)',
    )
    rtc_x1Series: Optional[rtc_TimeSeriesSimpleType.Field2] = Field(
        None, alias='rtc:x1Series', description='reference to time series ID'
    )
    rtc_x1SeriesVector: Optional[rtc_TimeSeriesSimpleType.Field3] = Field(
        None,
        alias='rtc:x1SeriesVector',
        description='reference to time series ID vector',
    )
    rtc_x1Value: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:x1Value', description='user-configured constant value'
    )
    rtc_x2Series: Optional[rtc_TimeSeriesSimpleType.Field4] = Field(
        None, alias='rtc:x2Series'
    )
    rtc_x2SeriesVector: Optional[rtc_TimeSeriesSimpleType.Field5] = Field(
        None, alias='rtc:x2SeriesVector'
    )
    rtc_x2Value: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:x2Value'
    )
    rtc_y: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:y', description='time series ID of resulting value'
    )
    rtc_yVector: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:yVector',
        description='time series ID vector of resulting value',
    )


class RtcGeneralModuleConfigComplexType(BaseModel):
    """
    DEPRICATED
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_description: Optional[XsString] = Field(
        None, alias='rtc:description', description='DEPRICATED'
    )
    rtc_poolRoutingScheme: RtcPoolRoutingEnumStringType = Field(
        ..., alias='rtc:poolRoutingScheme', description='DEPRICATED'
    )
    rtc_theta: XsDouble = Field(..., alias='rtc:theta', description='DEPRICATED')


class RtcGradientInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: RtcTimeSeriesSimpleType = Field(..., alias='rtc:x')


class RtcGradientOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_dx: RtcTimeSeriesSimpleType = Field(..., alias='rtc:dx')


class RtcGuideBandRuleInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: RtcTimeSeriesSimpleType = Field(..., alias='rtc:x')
    rtc_y: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:y')


class RtcGuideBandRuleOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_y: RtcTimeSeriesSimpleType = Field(..., alias='rtc:y')


class RtcHBVInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_EP: RtcTimeSeriesSimpleType = Field(..., alias='rtc:EP')
    rtc_P: RtcTimeSeriesSimpleType = Field(..., alias='rtc:P')
    rtc_T: RtcTimeSeriesSimpleType = Field(..., alias='rtc:T')
    rtc_TM: RtcTimeSeriesSimpleType = Field(..., alias='rtc:TM')


class RtcHBVLinkComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_CF: RtcTimeSeriesSimpleType = Field(..., alias='rtc:CF')
    rtc_EA: RtcTimeSeriesSimpleType = Field(..., alias='rtc:EA')
    rtc_EI: RtcTimeSeriesSimpleType = Field(..., alias='rtc:EI')
    rtc_EP: RtcTimeSeriesSimpleType = Field(..., alias='rtc:EP')
    rtc_IN: RtcTimeSeriesSimpleType = Field(..., alias='rtc:IN')
    rtc_INI: RtcTimeSeriesSimpleType = Field(..., alias='rtc:INI')
    rtc_PERC: RtcTimeSeriesSimpleType = Field(..., alias='rtc:PERC')
    rtc_R: RtcTimeSeriesSimpleType = Field(..., alias='rtc:R')


class RtcHBVOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_Q: RtcTimeSeriesSimpleType = Field(..., alias='rtc:Q')
    rtc_SMPercentage: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:SMPercentage'
    )
    rtc_SWE: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:SWE')


class RtcHBVStateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_IC: RtcTimeSeriesSimpleType = Field(..., alias='rtc:IC')
    rtc_LZ: RtcTimeSeriesSimpleType = Field(..., alias='rtc:LZ')
    rtc_SM: RtcTimeSeriesSimpleType = Field(..., alias='rtc:SM')
    rtc_SP: RtcTimeSeriesSimpleType = Field(..., alias='rtc:SP')
    rtc_UZ: RtcTimeSeriesSimpleType = Field(..., alias='rtc:UZ')
    rtc_WC: RtcTimeSeriesSimpleType = Field(..., alias='rtc:WC')


class RtcHBVStateUpdateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_IC: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:IC')
    rtc_LZ: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:LZ', description='increment on lower zone storage [mm]'
    )
    rtc_SM: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:SM', description='STILL NOT IMPLEMENTED'
    )
    rtc_SP: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:SP', description='STILL NOT IMPLEMENTED'
    )
    rtc_UZ: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:UZ', description='STILL NOT IMPLEMENTED'
    )
    rtc_WC: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:WC', description='STILL NOT IMPLEMENTED'
    )


class RtcHydraulicModelOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_nFun: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:nFun', description='number of function evaluations'
    )
    rtc_nJac: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:nJac', description='number of evaluations of the Jacobian'
    )
    rtc_res: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:res',
        description='residuum at last iteration step, 0.5*sum(SQR(ri))',
    )


class RtcHydraulicModelSequentialImplicitComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_convergenceThreshold: XsDouble = Field(..., alias='rtc:convergenceThreshold')
    rtc_theta: XsDouble = Field(..., alias='rtc:theta')
    rtc_treatNonConvergenceAsError: XsBoolean = Field(
        ..., alias='rtc:treatNonConvergenceAsError'
    )


class RtcHydraulicModelSimultaneousComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_theta: XsDouble = Field(..., alias='rtc:theta')


class RtcInflowComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _factor: Optional[XsDouble] = Field(None, alias='@factor')


class RtcInputATableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_valueSelection: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:valueSelection'
    )
    rtc_x: RtcTimeSeriesSimpleType = Field(..., alias='rtc:x')


class RtcInputCapillaryFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_HDown: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:HDown',
        description='downstream node, typically UZ unsaturted zone',
    )
    rtc_HUp: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:HUp', description='upstream node, typically GW upper zone'
    )


class RtcInputEvaporationActualStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_EI: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:EI')
    rtc_EP: RtcTimeSeriesSimpleType = Field(..., alias='rtc:EP')
    rtc_HUp: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:HUp', description='upstream node, typically SM (soil moisture)'
    )


class RtcInputEvaporationInterceptionStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_EP: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:EP', description='potential evaporation [mm]'
    )
    rtc_HUp: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:HUp', description='upstream node, typically IC (interception)'
    )


class RtcInputEvaporationPotentialComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_EPM: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:EPM',
        description='monthly mean value of potential evaporation [mm/timestep]',
    )
    rtc_T: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:T', description='instantaneous temperature [oC]'
    )
    rtc_TM: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:TM', description='monthly mean temperature [oC]'
    )


class RtcInputGroundwaterFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_HDown: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:HDown',
        description='downstream node, can be GW groundwater or SW surface water',
    )
    rtc_HUp: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:HUp',
        description='upstream node, can be GW groundwater or SW surface water',
    )


class RtcInputNodeStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_discharge: Optional[List[RtcTimeSeriesSimpleType]] = Field(
        None, alias='rtc:discharge'
    )
    rtc_state: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:state',
        description='unit volume [mm], replaces the computes state',
    )
    rtc_unitVolume: Optional[List[RtcTimeSeriesSimpleType]] = Field(
        None, alias='rtc:unitVolume'
    )


class RtcInputPercolationStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_HDown: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:HDown',
        description='downstream node, typically LZ (lower zone storage)',
    )
    rtc_HUp: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:HUp',
        description='upstream node, typically UZ (upper zone storage)',
    )


class RtcInputPidComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_disturbance: Optional[rtc_TimeSeriesSimpleType.Field8] = Field(
        None, alias='rtc:disturbance'
    )
    rtc_setpointSeries: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:setpointSeries'
    )
    rtc_setpointValue: Optional[XsDouble] = Field(None, alias='rtc:setpointValue')
    rtc_x: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:x', description='controllable variable'
    )


class RtcInputReleaseAboveThresholdStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_HDown: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:HDown', description='downstream node'
    )
    rtc_HUp: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:HUp', description='upstream node'
    )


class RtcInputReleaseTotalComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_discharge: List[RtcTimeSeriesSimpleType] = Field(
        ..., alias='rtc:discharge', min_items=1
    )


class RtcInputResponseStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_HUp: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:HUp',
        description='upstream (release) node, typically UZ and/or LZ (upper/lower zone storages)',
    )


class RtcInputSnowRainJunctionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_P: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:P', description='precipitation [mm/timestep]'
    )
    rtc_T: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:T', description='temperature [oC]'
    )


class RtcInputSoilRunoffStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_HDown: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:HDown',
        description='optional downstream node, typically uper saturated zones (UZ upper zone storage). Required if capillary flow is used and SM and UZ are present in one storage system',
    )
    rtc_HUp: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:HUp',
        description='upstream node, typically unsaturated zone (SM soil moisture)',
    )
    rtc_INF: List[RtcTimeSeriesSimpleType] = Field(..., alias='rtc:INF', min_items=1)


class RtcInputWaterDistributionConstantStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_HDown: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:HDown',
        description='downstream node collector of abstracted water. For instance drinking water treatment plant',
    )
    rtc_HUp: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:HUp',
        description='upstream node, source of water abstraction/distribution (i.e. surface water/groundwater/sewerage)',
    )


class RtcInputWaterDistributionVariableStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_D: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:D',
        description='series of industrial or domestic water demands/abstractions [m3/s]',
    )
    rtc_HDown: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:HDown',
        description='downstream node collector of abstracted water. For instance drinking water treatment plant',
    )
    rtc_HUp: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:HUp',
        description='upstream node, source of water abstraction/distribution (i.e. surface water/groundwater/sewerage)',
    )


class RtcInterpolationOptionsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_date: RtcInterpolationOptionEnumStringType = Field(..., alias='rtc:date')
    rtc_value: RtcInterpolationOptionEnumStringType = Field(..., alias='rtc:value')


class RtcIntervalInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_setpoint: RtcTimeSeriesSimpleType = Field(..., alias='rtc:setpoint')
    rtc_x: rtc_TimeSeriesSimpleType.Field9 = Field(
        ..., alias='rtc:x', description='reference to time series ID'
    )


class RtcIntervalOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_status: RtcTimeSeriesSimpleType = Field(..., alias='rtc:status')
    rtc_y: RtcTimeSeriesSimpleType = Field(..., alias='rtc:y')


class RtcLevelStorageEquationComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_A0: XsDouble = Field(..., alias='rtc:A0')
    rtc_A1: XsDouble = Field(..., alias='rtc:A1')
    rtc_A2: Optional[XsDouble] = Field(None, alias='rtc:A2')
    rtc_A3: Optional[XsDouble] = Field(None, alias='rtc:A3')
    rtc_A4: Optional[XsDouble] = Field(None, alias='rtc:A4')


class RtcLimiterInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_thresholdSeries: Optional[rtc_TimeSeriesSimpleType.Field21] = Field(
        None, alias='rtc:thresholdSeries'
    )
    rtc_thresholdValue: Optional[XsDouble] = Field(None, alias='rtc:thresholdValue')
    rtc_x: RtcTimeSeriesSimpleType = Field(..., alias='rtc:x')


class RtcLookup2DTableInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: RtcTimeSeriesSimpleType = Field(..., alias='rtc:x')
    rtc_y: RtcTimeSeriesSimpleType = Field(..., alias='rtc:y')
    rtc_z: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:z')


class RtcLookup2DTableOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_z: RtcTimeSeriesSimpleType = Field(..., alias='rtc:z')


class RtcLookupTableInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: rtc_TimeSeriesSimpleType.Field10 = Field(
        ..., alias='rtc:x', description='reference to time series ID'
    )
    rtc_y: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:y')


class RtcLookupTableOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_y: RtcTimeSeriesSimpleType = Field(..., alias='rtc:y')


class RtcLorentGeversInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_EP: RtcTimeSeriesSimpleType = Field(..., alias='rtc:EP')
    rtc_P: RtcTimeSeriesSimpleType = Field(..., alias='rtc:P')


class RtcLorentGeversOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_Q: RtcTimeSeriesSimpleType = Field(..., alias='rtc:Q')


class RtcLorentGeversStateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_QB1: RtcTimeSeriesSimpleType = Field(..., alias='rtc:QB1')
    rtc_QB2: RtcTimeSeriesSimpleType = Field(..., alias='rtc:QB2')
    rtc_QS1: RtcTimeSeriesSimpleType = Field(..., alias='rtc:QS1')
    rtc_QS2: RtcTimeSeriesSimpleType = Field(..., alias='rtc:QS2')
    rtc_S: RtcTimeSeriesSimpleType = Field(..., alias='rtc:S')


class RtcLorentGeversStateUpdateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_S: RtcTimeSeriesSimpleType = Field(..., alias='rtc:S')


class RtcMaxFlowsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _maxFlow_head01: XsDouble = Field(..., alias='@maxFlow_head01')
    _maxFlow_head02: XsDouble = Field(..., alias='@maxFlow_head02')
    _maxFlow_head03: Optional[XsDouble] = Field(None, alias='@maxFlow_head03')
    _maxFlow_head04: Optional[XsDouble] = Field(None, alias='@maxFlow_head04')
    _maxFlow_head05: Optional[XsDouble] = Field(None, alias='@maxFlow_head05')
    _maxFlow_head06: Optional[XsDouble] = Field(None, alias='@maxFlow_head06')
    _maxFlow_head07: Optional[XsDouble] = Field(None, alias='@maxFlow_head07')
    _maxFlow_head08: Optional[XsDouble] = Field(None, alias='@maxFlow_head08')
    _maxFlow_head09: Optional[XsDouble] = Field(None, alias='@maxFlow_head09')
    _maxFlow_head10: Optional[XsDouble] = Field(None, alias='@maxFlow_head10')
    _maxFlow_head11: Optional[XsDouble] = Field(None, alias='@maxFlow_head11')
    _maxFlow_head12: Optional[XsDouble] = Field(None, alias='@maxFlow_head12')
    _maxFlow_head13: Optional[XsDouble] = Field(None, alias='@maxFlow_head13')
    _maxFlow_head14: Optional[XsDouble] = Field(None, alias='@maxFlow_head14')
    _maxFlow_head15: Optional[XsDouble] = Field(None, alias='@maxFlow_head15')
    _maxFlow_head16: Optional[XsDouble] = Field(None, alias='@maxFlow_head16')
    _maxFlow_head17: Optional[XsDouble] = Field(None, alias='@maxFlow_head17')
    _maxFlow_head18: Optional[XsDouble] = Field(None, alias='@maxFlow_head18')
    _maxFlow_head19: Optional[XsDouble] = Field(None, alias='@maxFlow_head19')
    _maxFlow_head20: Optional[XsDouble] = Field(None, alias='@maxFlow_head20')


class RtcMergerInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: List[rtc_TimeSeriesSimpleType.Field11] = Field(
        ..., alias='rtc:x', min_items=1
    )


class RtcMergerOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_y: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:y')
    rtc_ySum: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:ySum')


class RtcMergerSplitterInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: Optional[List[rtc_TimeSeriesSimpleType.Field17]] = Field(None, alias='rtc:x')
    rtc_xVector: Optional[rtc_TimeSeriesSimpleType.Field18] = Field(
        None, alias='rtc:xVector'
    )


class RtcMergerSplitterOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_y: Optional[List[rtc_TimeSeriesSimpleType.Field19]] = Field(None, alias='rtc:y')


class RtcNeuronInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_external: Optional[List[xs_string.Field1]] = Field(None, alias='rtc:external')
    rtc_internal: Optional[List[xs_string.Field2]] = Field(None, alias='rtc:internal')


class RtcNeuronOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:x', description='result of the transfer function'
    )
    rtc_y: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:y',
        description='result of the summation of weighted input (intermediate result)',
    )


class RtcNodeGradientComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_lambda: RtcTimeSeriesSimpleType = Field(..., alias='rtc:lambda')
    rtc_surfaceArea: RtcTimeSeriesSimpleType = Field(..., alias='rtc:surfaceArea')


class RtcNodeInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_HBC: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:HBC',
        description='Time series with the water level boundary condition, note that a value MUST be provided at all time steps, otherwise the model stops with an error message',
    )
    rtc_HUpdate: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:HUpdate',
        description='Time series with an optional water level for model updating',
    )
    rtc_QBC: Optional[List[rtc_TimeSeriesSimpleType.Field6]] = Field(
        None, alias='rtc:QBC'
    )


class RtcNodeOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_H: RtcTimeSeriesSimpleType = Field(..., alias='rtc:H')
    rtc_R: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:R')
    rtc_S: RtcTimeSeriesSimpleType = Field(..., alias='rtc:S')


class RtcNodeStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_AREA: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:AREA', description='constant area [km2], default is 1.0'
    )
    rtc_input: Optional[RtcInputNodeStorageSystemComplexType] = Field(
        None, alias='rtc:input'
    )
    rtc_residuum: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:residuum', description='residuum [mm]'
    )
    rtc_state: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:state', description='unit volume [mm]'
    )
    rtc_stateMax: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:stateMax'
    )
    rtc_stateMin: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:stateMin'
    )


class RtcOrificeInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_D: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:D', description='deprecated'
    )
    rtc_DConst: Optional[XsDouble] = Field(None, alias='rtc:DConst')
    rtc_DSeries: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:DSeries')
    rtc_DeltaHDown: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:DeltaHDown'
    )
    rtc_DeltaHUp: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:DeltaHUp')
    rtc_HDown: RtcTimeSeriesSimpleType = Field(..., alias='rtc:HDown')
    rtc_HUp: RtcTimeSeriesSimpleType = Field(..., alias='rtc:HUp')


class RtcOrificeOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_D: RtcTimeSeriesSimpleType = Field(..., alias='rtc:D')
    rtc_Q: RtcTimeSeriesSimpleType = Field(..., alias='rtc:Q')
    rtc_flowType: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:flowType')


class RtcOutletInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_relativeRelease: Optional[List[RtcTimeSeriesSimpleType]] = Field(
        None, alias='rtc:relativeRelease'
    )
    rtc_release: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:release',
        description='Reference to timeseries in data configuration containg an absolute release. (ONLY FOR CONTROLLED OUTLET)',
    )


class RtcOutletOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_release: RtcTimeSeriesSimpleType = Field(..., alias='rtc:release')


class RtcOutputATableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_y: List[rtc_TimeSeriesSimpleType.Field1] = Field(
        ..., alias='rtc:y', min_items=1
    )


class RtcOutputEvaporationPotentialComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_EP: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:EP',
        description='instantaneous potential evaporation [mm/timestep]',
    )


class RtcOutputLinkStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_H: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:H', description='Discharge as unit volume [mm/timestep]'
    )
    rtc_Q: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:Q', description='Discharge [m3/s]'
    )


class RtcOutputPidComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_differentialPart: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:differentialPart',
        description='memory of differential part (in fact e of the last time step)',
    )
    rtc_integralPart: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:integralPart',
        description='memory of integral part: integral(e)dt',
    )
    rtc_y: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:y', description='setting of the actuator'
    )


class RtcOutputSnowRainJunctionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_RF: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:RF', description='rainfall [mm/timestep]'
    )
    rtc_SF: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:SF', description='snowfall [mm/timestep]'
    )


class RtcOutputStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_nFun: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:nFun', description='number of function evaluations'
    )
    rtc_nJac: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:nJac', description='number of evaluations of the Jacobian'
    )
    rtc_res: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:res', description='residuum at last iteration step'
    )


class RtcPercolationStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputPercolationStorageSystemComplexType = Field(
        ..., alias='rtc:input'
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterPercolationStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcPidComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputPidComplexType = Field(..., alias='rtc:input')
    rtc_kd: XsDouble = Field(
        ..., alias='rtc:kd', description='fatcor on differential part kd*de/dt'
    )
    rtc_ki: XsDouble = Field(
        ..., alias='rtc:ki', description='factor on the integral part ki*integral(e)dt'
    )
    rtc_kp: XsDouble = Field(
        ..., alias='rtc:kp', description='factor on the proportional part kp*e'
    )
    rtc_mode: Optional[RtcMode] = Field(
        None,
        alias='rtc:mode',
        description='pid mode, either "NATIVE" or "SOBEK2" or "PIDPOS" or PIDVEL"',
    )
    rtc_output: RtcOutputPidComplexType = Field(..., alias='rtc:output')
    rtc_settingMax: XsDouble = Field(
        ..., alias='rtc:settingMax', description='maximum setting of the actuator'
    )
    rtc_settingMaxSpeed: XsDouble = Field(
        ...,
        alias='rtc:settingMaxSpeed',
        description='maximum speed of the actuation in [unit/s]',
    )
    rtc_settingMin: XsDouble = Field(
        ..., alias='rtc:settingMin', description='minimum setting of the actuator'
    )


class RtcPolygonComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: Optional[XsString] = Field(None, alias='@id')
    rtc_edges: RtcEdgesComplexType = Field(..., alias='rtc:edges')
    rtc_value: Optional[XsDouble] = Field(None, alias='rtc:value')


class RtcPolygonLookupInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x1: rtc_TimeSeriesSimpleType.Field12 = Field(..., alias='rtc:x1')
    rtc_x2: rtc_TimeSeriesSimpleType.Field13 = Field(..., alias='rtc:x2')


class RtcPolygonLookupOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_status: RtcTimeSeriesSimpleType = Field(..., alias='rtc:status')


class RtcPolygonsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_polygon: List[RtcPolygonComplexType] = Field(
        ..., alias='rtc:polygon', min_items=1
    )


class RtcPumpGradientComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_storageDown: RtcTimeSeriesSimpleType = Field(..., alias='rtc:storageDown')
    rtc_storageUp: RtcTimeSeriesSimpleType = Field(..., alias='rtc:storageUp')


class RtcPumpInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_HDown: RtcTimeSeriesSimpleType = Field(..., alias='rtc:HDown')
    rtc_HUp: RtcTimeSeriesSimpleType = Field(..., alias='rtc:HUp')
    rtc_Q: RtcTimeSeriesSimpleType = Field(..., alias='rtc:Q')


class RtcPumpOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_Q: RtcTimeSeriesSimpleType = Field(..., alias='rtc:Q')


class RtcRelationalConditionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_relationalOperator: RtcRelationalOperatorEnumStringType = Field(
        ..., alias='rtc:relationalOperator'
    )
    rtc_x1Series: Optional[rtc_TimeSeriesSimpleType.Field22] = Field(
        None, alias='rtc:x1Series'
    )
    rtc_x1Value: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:x1Value'
    )
    rtc_x2Series: Optional[rtc_TimeSeriesSimpleType.Field23] = Field(
        None, alias='rtc:x2Series'
    )
    rtc_x2Value: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:x2Value'
    )


class RtcReleaseTotalComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputReleaseTotalComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:output', description='total discharge [m3/s]'
    )


class RtcReservoirCompactInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_FB: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:FB',
        description='forebay elevation [m above reference level] or [ft above sea level]',
    )
    rtc_OF: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:OF',
        description='optional time series with the unit outage factor [0-1], it reduces the (physical) constraints PXValue and QTXValue (NO impact on PX, QTX)',
    )
    rtc_PM: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:PM',
        description='minimum generation constraint on aggregated turbine level [MW], primarly used as operational constraint',
    )
    rtc_PMValue: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:PMValue',
        description='fixed minimum generation constraint on aggregated turbine level [MW], primarily used as physical constraint',
    )
    rtc_PX: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:PX',
        description='maximum generation constraint on aggregated turbine level [MW], primarly used as operational constraint',
    )
    rtc_PXValue: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:PXValue',
        description='fixed maximum generation constraint on aggregated turbine level [MW], primarly used as physical constraint',
    )
    rtc_Q: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:Q',
        description='reservoir outflow [m3/s] or [KCFS], data is expected to be complete and valid',
    )
    rtc_QI: List[RtcTimeSeriesSimpleType] = Field(..., alias='rtc:QI', min_items=1)
    rtc_QMISC: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:QMISC',
        description='optional miscellaneous flow (uncontrolled), will be zero by default [m3/s] or [KCFS] if no time series is supplied or if the time series includes NaN values',
    )
    rtc_QS: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:QS', description='absolute spill target [m3/s] or [KCFS]'
    )
    rtc_QSPercentage: Optional[rtc_TimeSeriesSimpleType.Field7] = Field(
        None,
        alias='rtc:QSPercentage',
        description='relative spill target as a percentage [0..100] of the total flow Q',
    )
    rtc_QSPercentageValue: Optional[rtc_ExternalParameterSimpleType.Field1] = Field(
        None,
        alias='rtc:QSPercentageValue',
        description='relative spill target as a percentage [0..100] of the total flow Q',
    )
    rtc_QSValue: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:QSValue', description='absolute spill target [m3/s] or [KCFS]'
    )
    rtc_QTX: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:QTX',
        description='maximum generation constraint on aggregated turbine level [m3/s] or [KCFS], primarily used as operational constraint',
    )
    rtc_QTXValue: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:QTXValue',
        description='fixed maximum generation constraint on aggregated turbine level [m3/s] or [KCFS], primarily used as physical constraint',
    )


class RtcReservoirCompactOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_DQ: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:DQ', description='deviation from spill target [m3/s] or [KCFS]'
    )
    rtc_FB: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:FB',
        description='forebay elevation [m above reference level] or [ft above sea level]',
    )
    rtc_H: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:H', description='head [m] or [ft]'
    )
    rtc_P: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:P', description='power generation [MW]'
    )
    rtc_PX: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:PX', description='maximum power generation [MW]'
    )
    rtc_Q: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:Q', description='reservoir outflow [m3/s] or [KCFS]'
    )
    rtc_QI: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:QI', description='reservoir inflow [m3/s] or [KCFS]'
    )
    rtc_QMISC: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:QMISC', description='miscellaneous flow [m3/s] or [KCFS]'
    )
    rtc_QS: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:QS', description='spillage [m3/s] or [KCFS]'
    )
    rtc_QSPercentage: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:QSPercentage', description='relative spillage [0..100]'
    )
    rtc_QT: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:QT', description='turbine flow [m3/s] or [KCFS]'
    )
    rtc_QTX: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:QTX', description='maximum turbine flow [m3/s] or [KCFS]'
    )
    rtc_R: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:R',
        description='residuum of mass balance (in simultaneous mode) [m3/s] or [KCFS]',
    )
    rtc_S: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:S',
        description='storage [m3] or [KCFS-hrs], this is the system state needed in the state file',
    )
    rtc_TW: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:TW',
        description='tailwater elevation [m above reference level] or [ft above sea level]',
    )


class RtcReservoirGradientComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_lambda: RtcTimeSeriesSimpleType = Field(..., alias='rtc:lambda')
    rtc_lambdaDown: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:lambdaDown'
    )


class RtcReservoirInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_evaporation: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:evaporation',
        description='Direct evaporation from the reservoir [mm/time step]',
    )
    rtc_inflow: List[RtcTimeSeriesSimpleType] = Field(
        ..., alias='rtc:inflow', min_items=1
    )
    rtc_level: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:level',
        description='Optional level [m] for updating the simulated level by an observed water level (simple data assimilation), if provided the error output is equal to the mass balance correction ',
    )
    rtc_precipitation: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:precipitation',
        description='Direct precitation into the reservoir [mm/time step], the value will be multiplied by the current water surface area of the reservoir',
    )


class RtcReservoirOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_error: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:error',
        description='optional error output [m3/s] which is non-zero if the simple data assimilation option for overruling the simulated water level is used ',
    )
    rtc_inflow: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:inflow', description='aggregated inflows [m3/s]'
    )
    rtc_level: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:level', description='water level [m] in the reservoir'
    )
    rtc_relativeStorage: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:relativeStorage',
        description='relative storage [-] typically between 0 and 1 depending on the definition of the maximum level above]',
    )
    rtc_release: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:release', description='aggregated release [m3/s]'
    )
    rtc_residuum: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:residuum',
        description='optional residuum of the implicit solution',
    )
    rtc_storage: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:storage', description='storage [m3] (state variable)'
    )


class RtcResponseStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputResponseStorageSystemComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterResponseStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcResultComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_output: RtcTimeSeriesSimpleType = Field(..., alias='rtc:output')
    rtc_value: XsInteger = Field(..., alias='rtc:value')


class RtcRiverWeirInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_CConst: Optional[XsDouble] = Field(None, alias='rtc:CConst')
    rtc_CSeries: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:CSeries')
    rtc_DeltaHDown: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:DeltaHDown'
    )
    rtc_DeltaHUp: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:DeltaHUp')
    rtc_HDown: RtcTimeSeriesSimpleType = Field(..., alias='rtc:HDown')
    rtc_HUp: RtcTimeSeriesSimpleType = Field(..., alias='rtc:HUp')


class RtcRiverWeirOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_C: RtcTimeSeriesSimpleType = Field(..., alias='rtc:C')
    rtc_Q: RtcTimeSeriesSimpleType = Field(..., alias='rtc:Q')
    rtc_flowType: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:flowType')


class RtcRoutingOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_discharge: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:discharge'
    )
    rtc_error: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:error')


class RtcRowComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _eta_head01: XsDouble = Field(..., alias='@eta_head01')
    _eta_head02: XsDouble = Field(..., alias='@eta_head02')
    _eta_head03: Optional[XsDouble] = Field(None, alias='@eta_head03')
    _eta_head04: Optional[XsDouble] = Field(None, alias='@eta_head04')
    _eta_head05: Optional[XsDouble] = Field(None, alias='@eta_head05')
    _eta_head06: Optional[XsDouble] = Field(None, alias='@eta_head06')
    _eta_head07: Optional[XsDouble] = Field(None, alias='@eta_head07')
    _eta_head08: Optional[XsDouble] = Field(None, alias='@eta_head08')
    _eta_head09: Optional[XsDouble] = Field(None, alias='@eta_head09')
    _eta_head10: Optional[XsDouble] = Field(None, alias='@eta_head10')
    _eta_head11: Optional[XsDouble] = Field(None, alias='@eta_head11')
    _eta_head12: Optional[XsDouble] = Field(None, alias='@eta_head12')
    _eta_head13: Optional[XsDouble] = Field(None, alias='@eta_head13')
    _eta_head14: Optional[XsDouble] = Field(None, alias='@eta_head14')
    _eta_head15: Optional[XsDouble] = Field(None, alias='@eta_head15')
    _eta_head16: Optional[XsDouble] = Field(None, alias='@eta_head16')
    _eta_head17: Optional[XsDouble] = Field(None, alias='@eta_head17')
    _eta_head18: Optional[XsDouble] = Field(None, alias='@eta_head18')
    _eta_head19: Optional[XsDouble] = Field(None, alias='@eta_head19')
    _eta_head20: Optional[XsDouble] = Field(None, alias='@eta_head20')
    _flow: XsDouble = Field(..., alias='@flow')


class RtcRuleStateTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_ruleId: XsString = Field(..., alias='rtc:ruleId')


class RtcSRMInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_P: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:P')
    rtc_P_Vector: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:P-Vector')
    rtc_RCA: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:RCA')
    rtc_RCA_Vector: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:RCA-Vector'
    )
    rtc_SCA: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:SCA')
    rtc_SCA_Vector: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:SCA-Vector'
    )
    rtc_T: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:T')
    rtc_T_Vector: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:T-Vector')
    rtc_cr: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:cr')
    rtc_cr_Vector: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:cr-Vector'
    )
    rtc_cs: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:cs')
    rtc_cs_Vector: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:cs-Vector'
    )


class RtcSRMOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_QRain_Vector: RtcTimeSeriesSimpleType = Field(..., alias='rtc:QRain-Vector')
    rtc_QSnow_Vector: RtcTimeSeriesSimpleType = Field(..., alias='rtc:QSnow-Vector')
    rtc_QStorage_Vector: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:QStorage-Vector'
    )


class RtcSRMParameterZoneComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: Optional[XsString] = Field(None, alias='@id')
    rtc_Tcr1: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:Tcr1', description='critical temperature (???) [oC]'
    )
    rtc_Tcr2: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:Tcr2', description='critical temperature (???) [oC]'
    )
    rtc_a: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:a', description='degree day factor [mm/(oC*day)]'
    )
    rtc_area: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:area', description='area [km2]'
    )


class RtcSRMStateComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_PStorage_Vector: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:PStorage-Vector',
        description='snow storage of non-snow-covered areas [mm]',
    )
    rtc_Q: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:Q', description='discharge [m3/s]'
    )


class RtcSnowRainJunctionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputSnowRainJunctionComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcOutputSnowRainJunctionComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterSnowRainJunctionComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcSoilRunoffStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputSoilRunoffStorageSystemComplexType = Field(
        ..., alias='rtc:input'
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterSoilRunoffStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcSpreadsheetInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x1: rtc_TimeSeriesSimpleType.Field14 = Field(..., alias='rtc:x1')
    rtc_x2: rtc_TimeSeriesSimpleType.Field15 = Field(..., alias='rtc:x2')
    rtc_x3: Optional[rtc_TimeSeriesSimpleType.Field16] = Field(None, alias='rtc:x3')


class RtcSpreadsheetOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_status: RtcTimeSeriesSimpleType = Field(..., alias='rtc:status')


class RtcSpreadsheetRecordComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _x1: XsDouble = Field(..., alias='@x1')
    _x2: XsDouble = Field(..., alias='@x2')
    _x3: Optional[XsDouble] = Field(None, alias='@x3')
    _y: XsDouble = Field(..., alias='@y')


class RtcSpreadsheetTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _initialState: Optional[XsDouble] = Field(None, alias='@initialState')
    rtc_record: List[RtcSpreadsheetRecordComplexType] = Field(
        ..., alias='rtc:record', min_items=1
    )


class RtcSpreadsheetTablesComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_table: List[RtcSpreadsheetTableComplexType] = Field(
        ..., alias='rtc:table', min_items=1
    )


class RtcStorageCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_maximumLevel: Optional[XsDouble] = Field(
        None,
        alias='rtc:maximumLevel',
        description='Maximum water level h in the reservoir: this optional value does not limit the water level, it is used however to compute the relative filling percentage of the reservoir according to s = S/S(maximumLevel), where S is the absolute storage volume',
    )
    rtc_storageEquation: Optional[RtcEquationsComplexType] = Field(
        None,
        alias='rtc:storageEquation',
        description='Storage equation, storage S = f(water level h)',
    )
    rtc_storageTable: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias='rtc:storageTable',
        description='Storage table with pairs of elevation h and storage S',
    )


class RtcStorageSystemSettingsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_acceptableConvergenceThreshold: Optional[XsDouble] = Field(
        None,
        alias='rtc:acceptableConvergenceThreshold',
        description='optional threshold after reaching the maximum number of iterations, writes a warning if reached, writes error otherwise',
    )
    rtc_convergenceThreshold: XsDouble = Field(
        ...,
        alias='rtc:convergenceThreshold',
        description='iteration stops after reaching this threshold',
    )
    rtc_treatNonConvergenceAsError: XsBoolean = Field(
        ...,
        alias='rtc:treatNonConvergenceAsError',
        description='treat non-convergence related to the thresholds as error or not',
    )


class RtcTableLookupTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_record: List[RtcDateRecord2DataComplexType] = Field(
        ..., alias='rtc:record', min_items=1
    )


class RtcTailwaterEquationComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_A: RtcExternalParameterSimpleType = Field(..., alias='rtc:A')
    rtc_B: RtcExternalParameterSimpleType = Field(..., alias='rtc:B')
    rtc_C: RtcExternalParameterSimpleType = Field(..., alias='rtc:C')
    rtc_D: Optional[RtcExternalParameterSimpleType] = Field(None, alias='rtc:D')
    rtc_FBDown: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:FBDown',
        description='time series reference to forebay elevation of the downstream project, only required if B is non-zero',
    )


class RtcTailwaterOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_head: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:head', description='head [m]'
    )
    rtc_level: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:level', description='tailwater level [m]'
    )


class RtcTailwaterTidalEquationComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_A: RtcExternalParameterSimpleType = Field(..., alias='rtc:A')
    rtc_QObs: RtcTimeSeriesSimpleType = Field(..., alias='rtc:QObs')
    rtc_TWObs: RtcTimeSeriesSimpleType = Field(..., alias='rtc:TWObs')


class RtcThunerseeRuleInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_catchment: RtcTimeSeriesSimpleType = Field(..., alias='rtc:catchment')
    rtc_inflow: RtcTimeSeriesSimpleType = Field(..., alias='rtc:inflow')
    rtc_level: RtcTimeSeriesSimpleType = Field(..., alias='rtc:level')


class RtcThunerseeRuleOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_active: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='rtc:active')
    rtc_releaseTotal: RtcTimeSeriesSimpleType = Field(..., alias='rtc:releaseTotal')
    rtc_releaseTunnel: RtcTimeSeriesSimpleType = Field(..., alias='rtc:releaseTunnel')
    rtc_releaseWeir: RtcTimeSeriesSimpleType = Field(..., alias='rtc:releaseWeir')


class RtcTimeAbsoluteInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_x: RtcTimeSeriesSimpleType = Field(..., alias='rtc:x')


class RtcTimeAbsoluteOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_y: RtcTimeSeriesSimpleType = Field(..., alias='rtc:y')


class RtcTimeRelativeControlTableRecordComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _time: XsDouble = Field(..., alias='@time')
    _value: XsDouble = Field(..., alias='@value')


class RtcTimeRelativeInputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_y: RtcTimeSeriesSimpleType = Field(
        ...,
        alias='rtc:y',
        description='optional input for deriving the timeActive in case of the relative from Value option',
    )


class RtcTimeRelativeOutputComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_timeActive: RtcTimeSeriesSimpleType = Field(..., alias='rtc:timeActive')
    rtc_y: RtcTimeSeriesSimpleType = Field(..., alias='rtc:y')


class RtcTimeStepComplexType(BaseModel):
    """
    The timeunit element has three attributes, unit and devider and multiplier.
            the unit is second, minute, hour, week, month year.
            The divider attribute is optional (default = 1).
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _divider: Optional[XsPositiveInteger] = Field(None, alias='@divider')
    _multiplier: Optional[XsPositiveInteger] = Field(None, alias='@multiplier')
    _unit: RtcTimeStepUnitEnumStringType = Field(..., alias='@unit')


class RtcTriggerControllerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_input: RtcTimeSeriesSimpleType = Field(..., alias='rtc:input')
    rtc_value: XsInteger = Field(..., alias='rtc:value')


class RtcTurbineCapacityCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_capacityEquation: Optional[RtcEquationsComplexType] = Field(
        None,
        alias='rtc:capacityEquation',
        description='capacity equation of hydropower turbine as a function of the water head',
    )
    rtc_capacityTable: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias='rtc:capacityTable',
        description='capacity table of hydropower turbine as a function of the water head',
    )


class RtcTurbineCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_efficiencyTable: RtcElevationTableComplexType = Field(
        ...,
        alias='rtc:efficiencyTable',
        description='efficiency table unit power output [MW / m3/s] as function of head [m] ',
    )
    rtc_output: RtcTurbineOutputCharacteristicsComplexType = Field(
        ..., alias='rtc:output'
    )


class RtcTurbineEfficiencyCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_efficiencyConstant: Optional[XsDouble] = Field(
        None,
        alias='rtc:efficiencyConstant',
        description='constant efficiency over all discharges, typical range is [0.80, 0.90]',
    )


class RtcTurbineEfficiencyTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_columns: RtcColumnsComplexType = Field(
        ...,
        alias='rtc:columns',
        description='column Ids refering to the head [m] of each column',
    )
    rtc_maxFlows: RtcMaxFlowsComplexType = Field(
        ...,
        alias='rtc:maxFlows',
        description='maximum flow for a given head (provided above)',
    )
    rtc_row: List[RtcRowComplexType] = Field(..., alias='rtc:row', min_items=1)


class RtcTypicalProfileComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_data: List[RtcDataTypicalProfileComplexType] = Field(
        ..., alias='rtc:data', min_items=1
    )
    rtc_output: RtcTimeSeriesSimpleType = Field(..., alias='rtc:output')


class RtcUnitDelayComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcUnitDelayInputComplexType = Field(..., alias='rtc:input')
    rtc_nStep: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:nStep',
        description='nStep optionally provides a delay with an arbitrary numer of time steps or sub time step, i.e. 1.5 time steps, if being used also specify the yFinal tag in the output options',
    )
    rtc_output: RtcUnitDelayOutputComplexType = Field(
        ...,
        alias='rtc:output',
        description='The configuration of a multiple unit delay requires the configuration of a time series for each delay time step',
    )


class RtcUnitHydrographWeightCustomComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_weight: List[XsDouble] = Field(..., alias='rtc:weight', min_items=1)


class RtcUnitHydrographWeightTriangularComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_factor: Optional[XsDouble] = Field(
        None, alias='rtc:factor', description='sum of all weight, if not equal to 1.0'
    )
    rtc_nSteps: RtcExternalParameterSimpleType = Field(
        ..., alias='rtc:nSteps', description='number of time steps'
    )


class RtcValidPeriodComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_endDate: RtcDateComplexType = Field(..., alias='rtc:endDate')
    rtc_startDate: RtcDateComplexType = Field(..., alias='rtc:startDate')


class RtcValidPeriodsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_validPeriod: Optional[List[RtcValidPeriodComplexType]] = Field(
        None, alias='rtc:validPeriod'
    )


class RtcValueArrayComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_value: List[XsFloat] = Field(..., alias='rtc:value', min_items=1)


class RtcYDimComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_yDim: List[XsFloat] = Field(..., alias='rtc:yDim', min_items=1)


class RtcZoneComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _max: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='@max')
    _min: Optional[RtcTimeSeriesSimpleType] = Field(None, alias='@min')
    rtc_dateTable: RtcDateTableComplexType = Field(..., alias='rtc:dateTable')


class RtcZonesComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_zone: List[RtcZoneComplexType] = Field(..., alias='rtc:zone', min_items=1)


class RtcEvaporationActualStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputEvaporationActualStorageSystemComplexType = Field(
        ..., alias='rtc:input'
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterEvaporationActualStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcEvaporationInterceptionStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputEvaporationInterceptionStorageSystemComplexType = Field(
        ..., alias='rtc:input'
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterEvaporationInterceptionStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcGroundwaterFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputGroundwaterFlowStorageSystemComplexType = Field(
        ..., alias='rtc:input'
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParametergroundwaterFlowStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcIrrigationStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_nodeD: XsString = Field(
        ...,
        alias='rtc:nodeD',
        description='downstream node which recieves the irrigation water',
    )
    rtc_nodeU: XsString = Field(
        ...,
        alias='rtc:nodeU',
        description='upstream node, source of water usually the drinking water treatment plant',
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterIrrigationStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcMeltRefreezingStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcTimeSeriesSimpleType = Field(
        ..., alias='rtc:input', description='instanteneous temperature [oC]'
    )
    rtc_nodeD: XsString = Field(
        ...,
        alias='rtc:nodeD',
        description='downstream node, typically WC (water content)',
    )
    rtc_nodeU: XsString = Field(
        ..., alias='rtc:nodeU', description='upstream node, typically SP (snow pack)'
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterMeltRefreezingStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcReleaseAboveThresholdStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputReleaseAboveThresholdStorageSystemComplexType = Field(
        ..., alias='rtc:input'
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterReleaseAboveThresholdStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcReleaseWaterContentStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_nodeA: XsString = Field(
        ...,
        alias='rtc:nodeA',
        description='auxiliary node with snow pack, typically SP (snow pack)',
    )
    rtc_nodeU: XsString = Field(
        ...,
        alias='rtc:nodeU',
        description='upstream node, typically WC (water content)',
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterReleaseWaterContentStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcWaterDistributionConstantStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputWaterDistributionConstantStorageSystemComplexType = Field(
        ..., alias='rtc:input'
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterWaterDistributionConstantStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcWaterDistributionVariableStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputWaterDistributionVariableStorageSystemComplexType = Field(
        ..., alias='rtc:input'
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterWaterDistributionVariableStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcAccumulationComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcAccumulationInputComplexType = Field(
        ..., alias='rtc:input', description='input variable'
    )
    rtc_multiplier: Optional[XsDouble] = Field(
        None, alias='rtc:multiplier', description='optional multiplier'
    )
    rtc_output: RtcAccumulationOutputComplexType = Field(..., alias='rtc:output')


class RtcAebiRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_FactorRTG: XsDouble = Field(..., alias='rtc:FactorRTG')
    rtc_LangeteFall: RtcCaseLangetenEnumStringType = Field(..., alias='rtc:LangeteFall')
    rtc_input: RtcAebiRuleInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcAebiRuleOutputComplexType = Field(..., alias='rtc:output')


class RtcAllocationTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputATableComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcOutputATableComplexType = Field(..., alias='rtc:output')
    rtc_table: Optional[RtcATableComplexType] = Field(None, alias='rtc:table')
    rtc_tableExternal: Optional[XsString] = Field(None, alias='rtc:tableExternal')


class RtcArmaComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_arCoef: XsDouble = Field(
        ...,
        alias='rtc:arCoef',
        description='autoregression coefficient related to prior time step',
    )
    rtc_input: RtcArmaInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcArmaOutputComplexType = Field(..., alias='rtc:output')


class RtcCapacityCharacteristicsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _reference: Optional[RtcCapacityReferenceEnumStringType] = Field(
        None, alias='@reference'
    )
    rtc_capacityEquation: Optional[RtcEquationsComplexType] = Field(
        None, alias='rtc:capacityEquation'
    )
    rtc_capacityTable: Optional[RtcElevationTableComplexType] = Field(
        None, alias='rtc:capacityTable'
    )


class RtcCapillaryFlowStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputCapillaryFlowStorageSystemComplexType = Field(
        ..., alias='rtc:input'
    )
    rtc_output: RtcOutputLinkStorageSystemComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcParameterCapillaryFlowStorageSystemComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcConstantRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_constant: XsDouble = Field(..., alias='rtc:constant')
    rtc_output: RtcConstantRuleOutputComplexType = Field(..., alias='rtc:output')


class RtcControlledOutletComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_capacityCharacteristics: RtcCapacityCharacteristicsComplexType = Field(
        ...,
        alias='rtc:capacityCharacteristics',
        description='Maximum capacity of outlet as function of the water level h, minimum capacity is assumed to be zero',
    )
    rtc_input: RtcOutletInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcOutletOutputComplexType = Field(..., alias='rtc:output')
    rtc_turbineCharacteristics: Optional[RtcTurbineCharacteristicsComplexType] = Field(
        None,
        alias='rtc:turbineCharacteristics',
        description='Characteristics of optional turbine',
    )


class RtcCrossSectionComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_crossSectionTable: RtcElevationTableComplexType = Field(
        ...,
        alias='rtc:crossSectionTable',
        description='Tabulated cross section, pairs of elevation h and width b ',
    )


class RtcCrossSectionRoughnessComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_roughnessTable: RtcElevationTableComplexType = Field(
        ...,
        alias='rtc:roughnessTable',
        description='Pairs of elevation h and roughness C (according to Chezy)',
    )


class RtcDateRecord2ComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _monthDay: XsGMonthDay = Field(..., alias='@monthDay')
    rtc_record: List[RtcDateRecord2DataComplexType] = Field(
        ..., alias='rtc:record', min_items=1
    )


class RtcDeadBandValueComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcDeadBandValueInputComplexType = Field(..., alias='rtc:input')
    rtc_threshold: XsDouble = Field(..., alias='rtc:threshold')


class RtcEvaporationPotentialComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcInputEvaporationPotentialComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcOutputEvaporationPotentialComplexType = Field(
        ..., alias='rtc:output'
    )
    rtc_parameter: RtcParameterEvaporationPotentialComplexType = Field(
        ..., alias='rtc:parameter'
    )


class RtcGradientComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcGradientInputComplexType = Field(
        ..., alias='rtc:input', description='input variable'
    )
    rtc_multiplier: Optional[XsDouble] = Field(
        None, alias='rtc:multiplier', description='optional multiplier'
    )
    rtc_output: RtcGradientOutputComplexType = Field(
        ..., alias='rtc:output', description='gradient, dx = multiplier*(xNew-xOld)/dt'
    )


class RtcGuideBandRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcGuideBandRuleInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcGuideBandRuleOutputComplexType = Field(..., alias='rtc:output')
    rtc_xMax: RtcDateTableComplexType = Field(..., alias='rtc:xMax')
    rtc_xMin: RtcDateTableComplexType = Field(..., alias='rtc:xMin')
    rtc_yMax: Optional[XsDouble] = Field(None, alias='rtc:yMax')
    rtc_yMaxSeries: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:yMaxSeries'
    )
    rtc_yMin: Optional[XsDouble] = Field(None, alias='rtc:yMin')
    rtc_yMinSeries: Optional[RtcTimeSeriesSimpleType] = Field(
        None, alias='rtc:yMinSeries'
    )


class RtcHBVComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcHBVInputComplexType = Field(..., alias='rtc:input')
    rtc_link: Optional[RtcHBVLinkComplexType] = Field(None, alias='rtc:link')
    rtc_output: RtcHBVOutputComplexType = Field(..., alias='rtc:output')
    rtc_parameterInput: RtcHBVParameterInputComplexType = Field(
        ..., alias='rtc:parameterInput'
    )
    rtc_parameterInterception: RtcHBVParameterInterceptionComplexType = Field(
        ..., alias='rtc:parameterInterception'
    )
    rtc_parameterResponse: RtcHBVParameterResponseComplexType = Field(
        ..., alias='rtc:parameterResponse'
    )
    rtc_parameterSnow: RtcHBVParameterSnowComplexType = Field(
        ..., alias='rtc:parameterSnow'
    )
    rtc_parameterSoil: RtcHBVParameterSoilComplexType = Field(
        ..., alias='rtc:parameterSoil'
    )
    rtc_state: RtcHBVStateComplexType = Field(..., alias='rtc:state')
    rtc_stateUpdate: Optional[RtcHBVStateUpdateComplexType] = Field(
        None, alias='rtc:stateUpdate'
    )


class RtcIntervalComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_deadbandSetpointAbsolute: Optional[XsDouble] = Field(
        None, alias='rtc:deadbandSetpointAbsolute'
    )
    rtc_deadbandSetpointRelative: Optional[XsDouble] = Field(
        None, alias='rtc:deadbandSetpointRelative'
    )
    rtc_input: RtcIntervalInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcIntervalOutputComplexType = Field(..., alias='rtc:output')
    rtc_settingAbove: XsDouble = Field(..., alias='rtc:settingAbove')
    rtc_settingBelow: XsDouble = Field(..., alias='rtc:settingBelow')
    rtc_settingMaxSpeed: Optional[XsDouble] = Field(None, alias='rtc:settingMaxSpeed')
    rtc_settingMaxStep: Optional[XsDouble] = Field(None, alias='rtc:settingMaxStep')


class RtcLimiterComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcLimiterInputComplexType = Field(..., alias='rtc:input')
    rtc_mode: RtcLimiterOptionEnumStringType = Field(..., alias='rtc:mode')


class RtcLinkStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_capillaryFlow: Optional[RtcCapillaryFlowStorageSystemComplexType] = Field(
        None,
        alias='rtc:capillaryFlow',
        description='capillary flow, typically from GW (saturated upper zone - ground water) to UZ (unsaturated zone)',
    )
    rtc_evaporationActual: Optional[
        RtcEvaporationActualStorageSystemComplexType
    ] = Field(
        None,
        alias='rtc:evaporationActual',
        description='actual evaporation from unsaturated zone storage node',
    )
    rtc_evaporationInterception: Optional[
        RtcEvaporationInterceptionStorageSystemComplexType
    ] = Field(
        None,
        alias='rtc:evaporationInterception',
        description='evaporation from interception storage node, typically VEG/P/UP (vegeration/paved interception)',
    )
    rtc_groundwaterFlow: Optional[RtcGroundwaterFlowStorageSystemComplexType] = Field(
        None,
        alias='rtc:groundwaterFlow',
        description='GW Groundwater interaction with SW Surface water',
    )
    rtc_irrigation: Optional[RtcIrrigationStorageSystemComplexType] = Field(
        None,
        alias='rtc:irrigation',
        description='NOT REFACTORED. water consumption by domestic irrigation due to dry soil',
    )
    rtc_meltRefreezing: Optional[RtcMeltRefreezingStorageSystemComplexType] = Field(
        None,
        alias='rtc:meltRefreezing',
        description='NOT REFACTORED. melting and refreezing, typically used between SP (snow pack) and WC (water content) nodes',
    )
    rtc_percolation: Optional[RtcPercolationStorageSystemComplexType] = Field(
        None,
        alias='rtc:percolation',
        description='percolation, typically from GW upper zone to GW lower zone), or from UP unpaved surface to UZ unsaturated zone',
    )
    rtc_releaseInterception: Optional[
        RtcReleaseAboveThresholdStorageSystemComplexType
    ] = Field(
        None,
        alias='rtc:releaseInterception',
        description='release above threshold from interception storage node, typically VEG/P/UP (uses relese above threshold link)',
    )
    rtc_releaseWaterContent: Optional[
        RtcReleaseWaterContentStorageSystemComplexType
    ] = Field(
        None,
        alias='rtc:releaseWaterContent',
        description='NOT REFACTORED. release from water content storage node (typically WC)',
    )
    rtc_response: Optional[RtcResponseStorageSystemComplexType] = Field(
        None,
        alias='rtc:response',
        description='response from storage node, typically GW upper and GW lower zone storage nodes',
    )
    rtc_sewerOverflow: Optional[
        RtcReleaseAboveThresholdStorageSystemComplexType
    ] = Field(
        None,
        alias='rtc:sewerOverflow',
        description='sewer overflow (uses relese above threshold link)',
    )
    rtc_soilRunoff: Optional[RtcSoilRunoffStorageSystemComplexType] = Field(
        None,
        alias='rtc:soilRunoff',
        description='soil runoff from UZ unsaturated zone to GW upper zone storage node',
    )
    rtc_wasteWaterTreatmentPlant: Optional[
        RtcWaterDistributionConstantStorageSystemComplexType
    ] = Field(
        None,
        alias='rtc:wasteWaterTreatmentPlant',
        description='water treated via the WWTP, flows at a max rate of a constant max pump capacity. Uses water distribution constant link',
    )
    rtc_waterDistributionConstant: Optional[
        RtcWaterDistributionConstantStorageSystemComplexType
    ] = Field(
        None,
        alias='rtc:waterDistributionConstant',
        description='water abstraction/distribution/consumption referenced to a constant demand (e.i. maxpump capacity). Uses water distribution constant link',
    )
    rtc_waterDistributionVariable: Optional[
        RtcWaterDistributionVariableStorageSystemComplexType
    ] = Field(
        None,
        alias='rtc:waterDistributionVariable',
        description='water abstraction/distribution/consumption referenced to a variable demand (e.i. domestic or industrial water demands). Uses water distribution variable link)',
    )


class RtcLookupTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_extrapolationOption: Optional[RtcInterpolationOptionEnumStringType] = Field(
        None,
        alias='rtc:extrapolationOption',
        description='table interpolation can be BLOCK or LINEAR, default setting if not provided is LINEAR',
    )
    rtc_input: RtcLookupTableInputComplexType = Field(..., alias='rtc:input')
    rtc_interpolationOption: Optional[RtcInterpolationOptionEnumStringType] = Field(
        None,
        alias='rtc:interpolationOption',
        description='table interpolation can be BLOCK or LINEAR, default setting if not provided is LINEAR',
    )
    rtc_output: RtcLookupTableOutputComplexType = Field(..., alias='rtc:output')
    rtc_property: Optional[List[RtcPropertyEnum]] = Field(None, alias='rtc:property')
    rtc_table: Optional[RtcTableLookupTableComplexType] = Field(None, alias='rtc:table')
    rtc_tableExternal: Optional[XsString] = Field(None, alias='rtc:tableExternal')


class RtcLorentGeversComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcLorentGeversInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcLorentGeversOutputComplexType = Field(..., alias='rtc:output')
    rtc_parameterResponse: RtcLorentGeversParameterResponseComplexType = Field(
        ..., alias='rtc:parameterResponse'
    )
    rtc_parameterSoil: RtcLorentGeversParameterSoilComplexType = Field(
        ..., alias='rtc:parameterSoil'
    )
    rtc_state: RtcLorentGeversStateComplexType = Field(..., alias='rtc:state')
    rtc_stateUpdate: Optional[RtcLorentGeversStateUpdateComplexType] = Field(
        None, alias='rtc:stateUpdate'
    )


class RtcMergerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcMergerInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcMergerOutputComplexType = Field(..., alias='rtc:output')


class RtcMergerSplitterComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcMergerSplitterInputComplexType = Field(..., alias='rtc:input')
    rtc_mode: RtcMergerSplitterEnumStringType = Field(..., alias='rtc:mode')
    rtc_output: RtcMergerSplitterOutputComplexType = Field(..., alias='rtc:output')


class RtcMinSimpleRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_dateTable: Optional[RtcDateTableComplexType] = Field(
        None, alias='rtc:dateTable'
    )
    rtc_zones: Optional[RtcZonesComplexType] = Field(None, alias='rtc:zones')


class RtcNeuronComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: RtcNeuronIDSimpleType = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_bias: RtcExternalParameterSimpleType = Field(..., alias='rtc:bias')
    rtc_input: RtcNeuronInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcNeuronOutputComplexType = Field(..., alias='rtc:output')
    rtc_transferFunction: RtcTransferFunctionEnumStringType = Field(
        ...,
        alias='rtc:transferFunction',
        description='transfer function: sigmoid, linear etc.',
    )


class RtcNodeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _x: Optional[XsDouble] = Field(None, alias='@x')
    _y: Optional[XsDouble] = Field(None, alias='@y')
    rtc_input: Optional[RtcNodeInputComplexType] = Field(None, alias='rtc:input')
    rtc_output: RtcNodeOutputComplexType = Field(..., alias='rtc:output')
    rtc_storageCharacteristics: RtcStorageCharacteristicsComplexType = Field(
        ...,
        alias='rtc:storageCharacteristics',
        description='Storage characteristics of the node: The storage as a function of water level h. It can be provided as table or as a formula.',
    )


class RtcOrificeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_contractionCoefficient: XsDouble = Field(
        ..., alias='rtc:contractionCoefficient'
    )
    rtc_crestLevel: XsDouble = Field(..., alias='rtc:crestLevel')
    rtc_exponentGateFormula: Optional[XsDouble] = Field(
        None, alias='rtc:exponentGateFormula'
    )
    rtc_exponentWeirFormula: Optional[XsDouble] = Field(
        None, alias='rtc:exponentWeirFormula'
    )
    rtc_flowDirection: Optional[RtcFlowDirectionEnumStringType] = Field(
        None, alias='rtc:flowDirection'
    )
    rtc_input: RtcOrificeInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcOrificeOutputComplexType = Field(..., alias='rtc:output')
    rtc_width: XsDouble = Field(..., alias='rtc:width')


class RtcPumpComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_input: RtcPumpInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcPumpOutputComplexType = Field(..., alias='rtc:output')


class RtcReservoirCompactComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcReservoirCompactInputComplexType = Field(
        ..., alias='rtc:input', description='input time series'
    )
    rtc_levelStorageEquation: Optional[RtcLevelStorageEquationComplexType] = Field(
        None,
        alias='rtc:levelStorageEquation',
        description='level storage equation according to S = A0 + A1*FB ( + A2*FB^2 + ...)',
    )
    rtc_levelStorageTable: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias='rtc:levelStorageTable',
        description='level-storage relation of the reservoir, level in [m] or [ft], storage in [m3] or [KCFS-hrs]',
    )
    rtc_levelStorageTableExternal: Optional[XsString] = Field(
        None,
        alias='rtc:levelStorageTableExternal',
        description='externalizes the level storage table to a parameter file, requires the two columns "level" and "storage"',
    )
    rtc_output: RtcReservoirCompactOutputComplexType = Field(
        ..., alias='rtc:output', description='output time series'
    )
    rtc_tailwaterConstant: Optional[RtcExternalParameterSimpleType] = Field(
        None,
        alias='rtc:tailwaterConstant',
        description='constant value for tailwater elevation',
    )
    rtc_tailwaterEquation: Optional[RtcTailwaterEquationComplexType] = Field(
        None,
        alias='rtc:tailwaterEquation',
        description='tailwater equation according to TW = A + B*FB_downstream(t-1) + C*Q(t)^D, D is equal 1.0 by default if not provided',
    )
    rtc_tailwaterExternalTable: Optional[XsString] = Field(
        None, alias='rtc:tailwaterExternalTable', description='external tailwater table'
    )
    rtc_tailwaterExternalTimeSeries: Optional[RtcTimeSeriesSimpleType] = Field(
        None,
        alias='rtc:tailwaterExternalTimeSeries',
        description='external tailwater elevation from an external source or a previous calculation OUTSIDE of the reservoirCompact components',
    )
    rtc_tailwaterTable: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias='rtc:tailwaterTable',
        description='tailwater as a function of the reservoir release only',
    )
    rtc_tailwaterTidalEquation: Optional[RtcTailwaterTidalEquationComplexType] = Field(
        None,
        alias='rtc:tailwaterTidalEquation',
        description='tidal influenced tailwater equation (works only in hindcast mode, use tailwater external with appropiate forecast of the tailwater in operational forecasting), TW = TWObs + A*(Q-QObs)',
    )
    rtc_turbineEfficiencyConstant: Optional[RtcExternalParameterSimpleType] = Field(
        None, alias='rtc:turbineEfficiencyConstant'
    )
    rtc_turbineEfficiencyTable: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias='rtc:turbineEfficiencyTable',
        description='old formulation, will be removed in the future',
    )
    rtc_turbineEfficiencyTable2D: Optional[
        RtcTurbineEfficiencyTableComplexType
    ] = Field(
        None,
        alias='rtc:turbineEfficiencyTable2D',
        description='new formulation, turbine effiency depends on head and turbine release, computation by 2D lookup',
    )
    rtc_turbineEfficiencyTable2DExternal: Optional[XsString] = Field(
        None, alias='rtc:turbineEfficiencyTable2DExternal'
    )
    rtc_turbineEfficiencyTableExternal: Optional[XsString] = Field(
        None, alias='rtc:turbineEfficiencyTableExternal'
    )
    rtc_units: Optional[RtcUnitTypeEnumStringType] = Field(
        None, alias='rtc:units', description=' "SI" or "Imperial" units'
    )


class RtcReservoirThunerseeRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_storageCharacteristics: RtcStorageCharacteristicsComplexType = Field(
        ..., alias='rtc:storageCharacteristics'
    )


class RtcRiverWeirComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_exponentWeirFormula: Optional[XsDouble] = Field(
        None, alias='rtc:exponentWeirFormula'
    )
    rtc_flowDirection: Optional[RtcFlowDirectionEnumStringType] = Field(
        None, alias='rtc:flowDirection'
    )
    rtc_input: RtcRiverWeirInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcRiverWeirOutputComplexType = Field(..., alias='rtc:output')
    rtc_submergedFlowFactor: Optional[XsDouble] = Field(
        None, alias='rtc:submergedFlowFactor'
    )
    rtc_submergedFlowRatio: Optional[XsDouble] = Field(
        None, alias='rtc:submergedFlowRatio'
    )
    rtc_width: XsDouble = Field(..., alias='rtc:width')


class RtcSRMComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcSRMInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcSRMOutputComplexType = Field(..., alias='rtc:output')
    rtc_parameter: RtcSRMParameterComplexType = Field(..., alias='rtc:parameter')
    rtc_parameterZone: List[RtcSRMParameterZoneComplexType] = Field(
        ..., alias='rtc:parameterZone', min_items=1
    )
    rtc_state: RtcSRMStateComplexType = Field(..., alias='rtc:state')


class RtcSimpleReservoirComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _multiplier: Optional[int] = Field(None, alias='@multiplier', ge=1)
    rtc_capacityCharacteristics: RtcCapacityCharacteristicsComplexType = Field(
        ..., alias='rtc:capacityCharacteristics'
    )
    rtc_storageCharacteristics: RtcStorageCharacteristicsComplexType = Field(
        ..., alias='rtc:storageCharacteristics'
    )


class RtcStorageSystemComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_link: List[RtcLinkStorageSystemComplexType] = Field(
        ..., alias='rtc:link', min_items=1
    )
    rtc_output: Optional[RtcOutputStorageSystemComplexType] = Field(
        None, alias='rtc:output'
    )
    rtc_settings: Optional[RtcStorageSystemSettingsComplexType] = Field(
        None, alias='rtc:settings'
    )
    rtc_storageNode: List[RtcNodeStorageSystemComplexType] = Field(
        ..., alias='rtc:storageNode', min_items=1
    )


class RtcSubmodelComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_evaporationPotential: Optional[RtcEvaporationPotentialComplexType] = Field(
        None, alias='rtc:evaporationPotential', description='potential evaporation'
    )
    rtc_snowRainJunction: Optional[RtcSnowRainJunctionComplexType] = Field(
        None,
        alias='rtc:snowRainJunction',
        description='separates precipitation into snow and rainfall',
    )
    rtc_storageSystem: Optional[RtcStorageSystemComplexType] = Field(
        None,
        alias='rtc:storageSystem',
        description='storage systems with storage nodes and links for setting up bucket models',
    )
    rtc_typicalProfile: Optional[RtcTypicalProfileComplexType] = Field(
        None, alias='rtc:typicalProfile'
    )


class RtcTailwaterComplexType(BaseModel):
    """
    
                Table containing data for different elevations. Type of element 'value'
                depends on purpose for which table is used.
            
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_constant: Optional[XsDouble] = Field(
        None, alias='rtc:constant', description='Constant tailwater level [m]'
    )
    rtc_output: RtcTailwaterOutputComplexType = Field(..., alias='rtc:output')
    rtc_ratingCurve: Optional[RtcElevationTableComplexType] = Field(
        None,
        alias='rtc:ratingCurve',
        description='Tailwater depending on discharge computed by a rating curve',
    )


class RtcTimeAbsoluteComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcTimeAbsoluteInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcTimeAbsoluteOutputComplexType = Field(..., alias='rtc:output')


class RtcTimeRelativeControlTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_record: List[RtcTimeRelativeControlTableRecordComplexType] = Field(
        ..., alias='rtc:record', min_items=1
    )


class RtcTunnelThunerseeRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_capacityCharacteristics: RtcCapacityCharacteristicsComplexType = Field(
        ..., alias='rtc:capacityCharacteristics'
    )
    rtc_levelThreshold: XsDouble = Field(..., alias='rtc:levelThreshold')


class RtcTurbineComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_capacityCharacteristics: RtcTurbineCapacityCharacteristicsComplexType = Field(
        ..., alias='rtc:capacityCharacteristics'
    )
    rtc_efficiencyCharacteristics: RtcTurbineEfficiencyCharacteristicsComplexType = Field(
        ..., alias='rtc:efficiencyCharacteristics'
    )
    rtc_input: RtcTurbineInputComplexType = Field(..., alias='rtc:input')
    rtc_nodeDown: XsString = Field(..., alias='rtc:nodeDown')
    rtc_nodeUp: XsString = Field(..., alias='rtc:nodeUp')
    rtc_output: RtcTurbineOutputComplexType = Field(..., alias='rtc:output')


class RtcUncontrolledOutletComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_capacityCharacteristics: RtcCapacityCharacteristicsComplexType = Field(
        ...,
        alias='rtc:capacityCharacteristics',
        description='Maximum capacity of outlet as function of the water level h, minimum capacity is assumed to be zero',
    )
    rtc_input: Optional[RtcUOutletInputComplexType] = Field(None, alias='rtc:input')
    rtc_output: RtcOutletOutputComplexType = Field(..., alias='rtc:output')


class RtcUnitHydrographWeightComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_custom: Optional[RtcUnitHydrographWeightCustomComplexType] = Field(
        None, alias='rtc:custom', description='user-defined weights'
    )
    rtc_triangular: Optional[RtcUnitHydrographWeightTriangularComplexType] = Field(
        None, alias='rtc:triangular', description='weights with triangular shape'
    )


class RtcWeirThunerseeRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_capacityCharacteristics: RtcCapacityCharacteristicsComplexType = Field(
        ..., alias='rtc:capacityCharacteristics'
    )


class RtcXDimComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_xDim: List[RtcYDimComplexType] = Field(..., alias='rtc:xDim', min_items=1)


class RtcBranchComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    rtc_alpha1: Optional[XsDouble] = Field(
        None,
        alias='rtc:alpha1',
        description='the wind friction coefficient is given by Cw = alpha1 + alpha2 * Vw, with wind velocity Vw',
    )
    rtc_alpha2: Optional[XsDouble] = Field(
        None,
        alias='rtc:alpha2',
        description='the wind friction coefficient is given by Cw = alpha1 + alpha2 * Vw, with wind velocity Vw',
    )
    rtc_crossSection: RtcCrossSectionComplexType = Field(
        ...,
        alias='rtc:crossSection',
        description='Cross section in the center of the flow branch.',
    )
    rtc_equationType: Optional[RtcEquationEnumStringType] = Field(
        None, alias='rtc:equationType'
    )
    rtc_input: RtcBranchInputComplexType = Field(..., alias='rtc:input')
    rtc_length: XsDouble = Field(
        ..., alias='rtc:length', description='Length of the flow branch'
    )
    rtc_output: RtcBranchOutputComplexType = Field(..., alias='rtc:output')
    rtc_roughness: RtcCrossSectionRoughnessComplexType = Field(
        ...,
        alias='rtc:roughness',
        description='Roughness (Chezy) as a function of elevation h',
    )
    rtc_slope: Optional[XsDouble] = Field(
        None, alias='rtc:slope', description='slope for optional kinematic wave branch'
    )
    rtc_spatialScheme: Optional[RtcSpatialEnumStringType] = Field(
        None, alias='rtc:spatialScheme'
    )


class RtcDateLookupTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_dateRecord: List[RtcDateRecord2ComplexType] = Field(
        ..., alias='rtc:dateRecord', min_items=1
    )
    rtc_input: RtcDateLookupTableInputComplexType = Field(..., alias='rtc:input')
    rtc_interpolationOptions: RtcInterpolationOptionsComplexType = Field(
        ...,
        alias='rtc:interpolationOptions',
        description='Interpolation option BLOCK / LINEAR for the two inputs date and value',
    )
    rtc_output: RtcDateLookupTableOutputComplexType = Field(..., alias='rtc:output')


class RtcHydraulicStructureComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    rtc_orifice: Optional[RtcOrificeComplexType] = Field(
        None,
        alias='rtc:orifice',
        description='Orifice according to definition in SOBEK-Rural',
    )
    rtc_pump: Optional[RtcPumpComplexType] = Field(
        None, alias='rtc:pump', description='Pump'
    )
    rtc_weir: Optional[RtcRiverWeirComplexType] = Field(
        None,
        alias='rtc:weir',
        description='Weir according to definition in SOBEK-River',
    )


class RtcHydrologicalModelComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_submodel: List[RtcSubmodelComplexType] = Field(
        ..., alias='rtc:submodel', min_items=1
    )


class RtcLayerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: RtcLayerIDSimpleType = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_neuron: List[RtcNeuronComplexType] = Field(..., alias='rtc:neuron', min_items=1)


class RtcNeuralNetworkComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_layer: List[RtcLayerComplexType] = Field(..., alias='rtc:layer', min_items=1)


class RtcReservoirComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_controlledOutlet: Optional[List[RtcControlledOutletComplexType]] = Field(
        None, alias='rtc:controlledOutlet'
    )
    rtc_input: RtcReservoirInputComplexType = Field(..., alias='rtc:input')
    rtc_mode: RtcPoolRoutingEnumStringType = Field(
        ...,
        alias='rtc:mode',
        description='Time integration scheme for the network components',
    )
    rtc_output: RtcReservoirOutputComplexType = Field(..., alias='rtc:output')
    rtc_storageCharacteristics: RtcStorageCharacteristicsComplexType = Field(
        ...,
        alias='rtc:storageCharacteristics',
        description='Storage characteristics of the reservoir: The storage S as a function of the water level h can be provided as a table or formula.',
    )
    rtc_tailwater: Optional[RtcTailwaterComplexType] = Field(
        None,
        alias='rtc:tailwater',
        description='Tailwater rating curve\n                    ',
    )
    rtc_theta: XsDouble = Field(
        ...,
        alias='rtc:theta',
        description='Time weighting coefficient for the semi-implicit theta schema: 0 is equal to a full weight on the old time step, 1 represents a full weight on new time step. The coefficient is not used in the fully explicit or implicit schemas. The permitted range is between 0.5 and 1.0.',
    )
    rtc_uncontrolledOutlet: Optional[List[RtcUncontrolledOutletComplexType]] = Field(
        None, alias='rtc:uncontrolledOutlet'
    )


class RtcReservoirRoutingComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_simpleReservoir: List[RtcSimpleReservoirComplexType] = Field(
        ..., alias='rtc:simpleReservoir', min_items=1
    )


class RtcRoutingComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_dischargeRef: Optional[XsString] = Field(
        None,
        alias='rtc:dischargeRef',
        description='Reference to timeseries in data configuration',
    )
    rtc_inflow: Optional[List[RtcInflowComplexType]] = Field(None, alias='rtc:inflow')
    rtc_outputReferences: RtcRoutingOutputComplexType = Field(
        ...,
        alias='rtc:outputReferences',
        description='Contains references to the output timeseries in the data configuration',
    )
    rtc_reservoirRouting: Optional[RtcReservoirRoutingComplexType] = Field(
        None, alias='rtc:reservoirRouting'
    )


class RtcTable2DLookupTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_matrix: RtcXDimComplexType = Field(..., alias='rtc:matrix')
    rtc_x: RtcValueArrayComplexType = Field(..., alias='rtc:x')
    rtc_y: RtcValueArrayComplexType = Field(..., alias='rtc:y')


class RtcThunerseeRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcThunerseeRuleInputComplexType = Field(..., alias='rtc:input')
    rtc_levelSetpoint: XsDouble = Field(..., alias='rtc:levelSetpoint')
    rtc_output: RtcThunerseeRuleOutputComplexType = Field(..., alias='rtc:output')
    rtc_releaseLimiterPercentage: XsDouble = Field(
        ..., alias='rtc:releaseLimiterPercentage'
    )
    rtc_reservoir: RtcReservoirThunerseeRuleComplexType = Field(
        ..., alias='rtc:reservoir'
    )
    rtc_tunnel: RtcTunnelThunerseeRuleComplexType = Field(..., alias='rtc:tunnel')
    rtc_weir: RtcWeirThunerseeRuleComplexType = Field(..., alias='rtc:weir')


class RtcTimeRelativeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_controlTable: RtcTimeRelativeControlTableComplexType = Field(
        ..., alias='rtc:controlTable', description='table with time [s] / value records'
    )
    rtc_input: Optional[RtcTimeRelativeInputComplexType] = Field(
        None, alias='rtc:input'
    )
    rtc_interpolationOption: Optional[RtcInterpolationOptionEnumStringType] = Field(
        None,
        alias='rtc:interpolationOption',
        description='table interpolation can be BLOCK or LINEAR, default setting if not provided is LINEAR',
    )
    rtc_maximumPeriod: Optional[XsDouble] = Field(None, alias='rtc:maximumPeriod')
    rtc_mode: Optional[RtcMode1] = Field(
        None,
        alias='rtc:mode',
        description='timeRelative mode, either "NATIVE" or "RETAINVALUEWHENINACTIVE"',
    )
    rtc_output: RtcTimeRelativeOutputComplexType = Field(..., alias='rtc:output')
    rtc_valueOption: RtcTimeRelativeEnumStringType = Field(
        ...,
        alias='rtc:valueOption',
        description='setting if the control table provides the absolute value or the relative value ',
    )


class RtcUnitHydrographComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcUnitHydrographInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcUnitHydrographOutputComplexType = Field(..., alias='rtc:output')
    rtc_weights: RtcUnitHydrographWeightComplexType = Field(..., alias='rtc:weights')


class RtcHydraulicModelComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_branch: Optional[List[RtcBranchComplexType]] = Field(None, alias='rtc:branch')
    rtc_hydraulicStructure: Optional[List[RtcHydraulicStructureComplexType]] = Field(
        None, alias='rtc:hydraulicStructure'
    )
    rtc_mode: RtcHydraulicModelModeEnumStringType = Field(..., alias='rtc:mode')
    rtc_node: Optional[List[RtcNodeComplexType]] = Field(None, alias='rtc:node')
    rtc_numericalTolerance: XsDouble = Field(..., alias='rtc:numericalTolerance')
    rtc_output: Optional[RtcHydraulicModelOutputComplexType] = Field(
        None, alias='rtc:output'
    )
    rtc_sequentialImplicitSettings: Optional[
        RtcHydraulicModelSequentialImplicitComplexType
    ] = Field(None, alias='rtc:sequentialImplicitSettings')
    rtc_simultaneousSettings: Optional[
        RtcHydraulicModelSimultaneousComplexType
    ] = Field(None, alias='rtc:simultaneousSettings')


class RtcLookup2DTableComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_input: RtcLookup2DTableInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcLookup2DTableOutputComplexType = Field(..., alias='rtc:output')
    rtc_table: RtcTable2DLookupTableComplexType = Field(..., alias='rtc:table')


class RtcComponentComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _template: Optional[XsString] = Field(None, alias='@template')
    rtc_accumulation: Optional[RtcAccumulationComplexType] = Field(
        None,
        alias='rtc:accumulation',
        description='Accumulation of a time series over time',
    )
    rtc_allocationTable: Optional[RtcAllocationTableComplexType] = Field(
        None, alias='rtc:allocationTable'
    )
    rtc_arma: Optional[RtcArmaComplexType] = Field(
        None, alias='rtc:arma', description='Arma error correction model'
    )
    rtc_expression: Optional[RtcExpressionComplexType] = Field(
        None, alias='rtc:expression', description='Mathematical expression'
    )
    rtc_gradient: Optional[RtcGradientComplexType] = Field(
        None,
        alias='rtc:gradient',
        description='Post processing for computing gradients of simulated values',
    )
    rtc_hbv: Optional[RtcHBVComplexType] = Field(
        None,
        alias='rtc:hbv',
        description='This is an implementation of the HBV-96 hydrological model. Note that the unit hydrograph is not included, but available separately.',
    )
    rtc_hydraulicModel: Optional[RtcHydraulicModelComplexType] = Field(
        None,
        alias='rtc:hydraulicModel',
        description='Simplifications of the full dynamic, one-dimensional hydraulic model according to the kinematic wave, diffusive wave and inertial assumptions.',
    )
    rtc_hydrologicalModel: Optional[RtcHydrologicalModelComplexType] = Field(
        None,
        alias='rtc:hydrologicalModel',
        description='Modular, conceptual hydrological model with implicit time stepping scheme.',
    )
    rtc_lookup2DTable: Optional[RtcLookup2DTableComplexType] = Field(
        None, alias='rtc:lookup2DTable'
    )
    rtc_lookupTable: Optional[RtcLookupTableComplexType] = Field(
        None, alias='rtc:lookupTable'
    )
    rtc_lorentGevers: Optional[RtcLorentGeversComplexType] = Field(
        None, alias='rtc:lorentGevers', description='Lorent/Gevers hydrological model'
    )
    rtc_merger: Optional[RtcMergerComplexType] = Field(None, alias='rtc:merger')
    rtc_mergerSplitter: Optional[RtcMergerSplitterComplexType] = Field(
        None, alias='rtc:mergerSplitter'
    )
    rtc_neuralNetwork: Optional[RtcNeuralNetworkComplexType] = Field(
        None, alias='rtc:neuralNetwork'
    )
    rtc_reservoir: Optional[RtcReservoirComplexType] = Field(
        None,
        alias='rtc:reservoir',
        description='Reservoir with arbitrary number of inlets and outlets.',
    )
    rtc_reservoirCompact: Optional[RtcReservoirCompactComplexType] = Field(
        None,
        alias='rtc:reservoirCompact',
        description='Test implementation of a compact reservoir class for simultaneous and sequential optimization mode',
    )
    rtc_routing: Optional[RtcRoutingComplexType] = Field(
        None, alias='rtc:routing', description='not implemented yet'
    )
    rtc_srm: Optional[RtcSRMComplexType] = Field(None, alias='rtc:srm')
    rtc_unitDelay: Optional[RtcUnitDelayComplexType] = Field(
        None,
        alias='rtc:unitDelay',
        description='Unit delay operator for  delaying a value by n times the time step of the model.',
    )
    rtc_unitHydrograph: Optional[RtcUnitHydrographComplexType] = Field(
        None, alias='rtc:unitHydrograph', description='Unit hydrograph'
    )


class RtcComponentsComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_component: List[RtcComponentComplexType] = Field(
        ..., alias='rtc:component', min_items=1
    )


class Model(BaseModel):
    """
    JSON Schema generated by XMLSpy v2019 rel. 3 sp1 (x64) (http://www.altova.com)
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _xmlns_rtc: Optional[Any] = Field('http://www.wldelft.nl/fews', alias='@xmlns:rtc')
    _xmlns_xs: Optional[Any] = Field(
        'http://www.w3.org/2001/XMLSchema', alias='@xmlns:xs'
    )
    rtc_rtcToolsConfig: Optional[_.RtcRtcToolsConfig] = Field(
        None, alias='rtc:rtcToolsConfig'
    )


class RtcDeadBandTimeComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_discrete: RtcDeadBandTimeDiscreteComplexType = Field(..., alias='rtc:discrete')
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:false',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    rtc_input: RtcDeadBandTimeInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcDeadBandTimeOutputComplexType = Field(..., alias='rtc:output')
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:true',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )


class RtcDeadBandTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_conditionOff: RtcRelationalConditionComplexType = Field(
        ..., alias='rtc:conditionOff'
    )
    rtc_conditionOn: RtcRelationalConditionComplexType = Field(
        ..., alias='rtc:conditionOn'
    )
    rtc_default: Optional[XsBoolean] = Field(None, alias='rtc:default')
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:false',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    rtc_output: RtcTriggerOutputComplexType = Field(..., alias='rtc:output')
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:true',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )


class RtcPolygonLookupComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_default: Optional[XsDouble] = Field(None, alias='rtc:default')
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:false',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    rtc_input: RtcPolygonLookupInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcPolygonLookupOutputComplexType = Field(..., alias='rtc:output')
    rtc_polygons: RtcPolygonsComplexType = Field(..., alias='rtc:polygons')
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:true',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )


class RtcRtcToolsConfigComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_components: Optional[RtcComponentsComplexType] = Field(
        None,
        alias='rtc:components',
        description='The components section includes all simulation components.',
    )
    rtc_general: Optional[RtcGeneralModuleConfigComplexType] = Field(
        None,
        alias='rtc:general',
        description='OBSOLETE. Still here for backwards compatibility. Remove after next release.',
    )
    rtc_rules: Optional[RtcRulesComplexType] = Field(
        None,
        alias='rtc:rules',
        description='The rules section includes operating rules or controllers for defining the release of reservoir, structural settings of gates etc.',
    )
    rtc_triggers: Optional[RtcTriggersComplexType] = Field(
        None,
        alias='rtc:triggers',
        description='Triggers may activate or deactivate rules defined in the section above.',
    )


class RtcRuleComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_constant: Optional[RtcConstantRuleComplexType] = Field(
        None, alias='rtc:constant', description='Simple rule with constant value'
    )
    rtc_dateLookupTable: Optional[RtcDateLookupTableComplexType] = Field(
        None,
        alias='rtc:dateLookupTable',
        description='Date lookup table, output y is a function of date and an input value x, the interpolation on the date / value axis can be BLOCK or LINEAR, the number of records should be constant for each date record',
    )
    rtc_deadBandTime: Optional[RtcDeadBandTimeComplexType] = Field(
        None, alias='rtc:deadBandTime'
    )
    rtc_deadBandValue: Optional[RtcDeadBandValueComplexType] = Field(
        None,
        alias='rtc:deadBandValue',
        description='Deadband threshold, yNew will become yOld, if the change yNew-yOld is smaller than the threshold value ',
    )
    rtc_dedicated_Aebi: Optional[RtcAebiRuleComplexType] = Field(
        None,
        alias='rtc:dedicated-Aebi',
        description='Dedicated rule for the control of Bielersee, Canton Bern, CH',
    )
    rtc_dedicated_Thunersee: Optional[RtcThunerseeRuleComplexType] = Field(
        None,
        alias='rtc:dedicated-Thunersee',
        description='Dedicated rule for the control of Thunersee, Canton Bern, CH',
    )
    rtc_expression: Optional[RtcExpressionComplexType] = Field(
        None, alias='rtc:expression', description='mathematical expression'
    )
    rtc_guideband: Optional[RtcGuideBandRuleComplexType] = Field(
        None,
        alias='rtc:guideband',
        description='Guide band rule, output get 0 if input less equal xMin, 1 if input greater equal xMax, linear interpolation otherwise xMin and xMax can be a function of date, main application in combination with a relative release of a reservoir outlet',
    )
    rtc_interval: Optional[RtcIntervalComplexType] = Field(None, alias='rtc:interval')
    rtc_limiter: Optional[RtcLimiterComplexType] = Field(
        None,
        alias='rtc:limiter',
        description='Limiter for limiting the change of a variable in a time step to a relative (PERCENTAGE) or absolute  (ABSOLUTE) change',
    )
    rtc_lookup2DTable: Optional[RtcLookup2DTableComplexType] = Field(
        None, alias='rtc:lookup2DTable'
    )
    rtc_lookupTable: Optional[RtcLookupTableComplexType] = Field(
        None, alias='rtc:lookupTable'
    )
    rtc_merger: Optional[RtcMergerComplexType] = Field(
        None,
        alias='rtc:merger',
        description='Data hierarchy, highest input has highest priority',
    )
    rtc_pid: Optional[RtcPidComplexType] = Field(None, alias='rtc:pid')
    rtc_timeAbsolute: Optional[RtcTimeAbsoluteComplexType] = Field(
        None, alias='rtc:timeAbsolute', description='absolute time controller'
    )
    rtc_timeRelative: Optional[RtcTimeRelativeComplexType] = Field(
        None, alias='rtc:timeRelative', description='relative time controller'
    )
    rtc_unitDelay: Optional[RtcUnitDelayComplexType] = Field(
        None,
        alias='rtc:unitDelay',
        description='Unit delay operator for  delaying a value by n times the time step of the model.',
    )


class RtcRuleTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_trigger: Optional[List[RtcTriggerComplexType]] = Field(
        None, alias='rtc:trigger'
    )


class RtcRulesComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_rule: List[RtcRuleComplexType] = Field(..., alias='rtc:rule', min_items=1)


class RtcSetTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_default: Optional[XsBoolean] = Field(None, alias='rtc:default')
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:false',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    rtc_logicalOperator: RtcLogicalOperatorEnumStringType = Field(
        ..., alias='rtc:logicalOperator'
    )
    rtc_output: RtcTriggerOutputComplexType = Field(..., alias='rtc:output')
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:true',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    rtc_x1Series: Optional[rtc_TimeSeriesSimpleType.Field24] = Field(
        None, alias='rtc:x1Series'
    )
    rtc_x1Trigger: Optional[RtcTriggerComplexType] = Field(None, alias='rtc:x1Trigger')
    rtc_x1Value: Optional[XsBoolean] = Field(None, alias='rtc:x1Value')
    rtc_x2Series: Optional[rtc_TimeSeriesSimpleType.Field25] = Field(
        None, alias='rtc:x2Series'
    )
    rtc_x2Trigger: Optional[RtcTriggerComplexType] = Field(None, alias='rtc:x2Trigger')
    rtc_x2Value: Optional[XsBoolean] = Field(None, alias='rtc:x2Value')


class RtcSpreadsheetComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_defaultInputValue: Optional[XsDouble] = Field(
        None,
        alias='rtc:defaultInputValue',
        description='default input value, if input is NaN or infinity',
    )
    rtc_defaultOutputValue: Optional[XsDouble] = Field(
        None,
        alias='rtc:defaultOutputValue',
        description='default output, if no combination of the table applies',
    )
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:false',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    rtc_input: RtcSpreadsheetInputComplexType = Field(..., alias='rtc:input')
    rtc_output: RtcSpreadsheetOutputComplexType = Field(..., alias='rtc:output')
    rtc_tables: RtcSpreadsheetTablesComplexType = Field(
        ...,
        alias='rtc:tables',
        description='number of tables with input, output values, the initial state can be taken into account optionally',
    )
    rtc_tolerance: XsDouble = Field(
        ...,
        alias='rtc:tolerance',
        description='tolerance for finding a match, keep in mind that the all variable are stored in doubles',
    )
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:true',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    rtc_validPeriods: Optional[RtcValidPeriodsComplexType] = Field(
        None,
        alias='rtc:validPeriods',
        description='optional period of the year for which the trigger is active',
    )


class RtcStandardTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    _id: XsString = Field(..., alias='@id')
    _name: Optional[XsString] = Field(None, alias='@name')
    rtc_condition: RtcRelationalConditionComplexType = Field(..., alias='rtc:condition')
    rtc_default: Optional[XsBoolean] = Field(None, alias='rtc:default')
    rtc_false: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:false',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    rtc_output: RtcTriggerOutputComplexType = Field(..., alias='rtc:output')
    rtc_true: Optional[RtcRuleTriggerComplexType] = Field(
        None,
        alias='rtc:true',
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )


class RtcTriggerComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_deadBand: Optional[RtcDeadBandTriggerComplexType] = Field(
        None, alias='rtc:deadBand', description='trigger with deadband'
    )
    rtc_deadBandTime: Optional[RtcDeadBandTimeComplexType] = Field(
        None, alias='rtc:deadBandTime', description='trigger with time deadband'
    )
    rtc_expression: Optional[RtcExpressionComplexType] = Field(
        None, alias='rtc:expression', description='mathematical expression'
    )
    rtc_lookupTable: Optional[RtcLookupTableComplexType] = Field(
        None, alias='rtc:lookupTable'
    )
    rtc_merger: Optional[RtcMergerComplexType] = Field(
        None,
        alias='rtc:merger',
        description='Data hierarchy, highest input has highest priority',
    )
    rtc_polygonLookup: Optional[RtcPolygonLookupComplexType] = Field(
        None,
        alias='rtc:polygonLookup',
        description='trigger with two-dimensional lookup table, trigger results are defined by polygons',
    )
    rtc_ruleReference: Optional[XsString] = Field(None, alias='rtc:ruleReference')
    rtc_set: Optional[RtcSetTriggerComplexType] = Field(
        None, alias='rtc:set', description='set of triggers'
    )
    rtc_spreadsheet: Optional[RtcSpreadsheetComplexType] = Field(
        None, alias='rtc:spreadsheet', description='spread sheet trigger'
    )
    rtc_standard: Optional[RtcStandardTriggerComplexType] = Field(
        None, alias='rtc:standard', description='standard trigger'
    )


class RtcTriggersComplexType(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    rtc_trigger: List[RtcTriggerComplexType] = Field(
        ..., alias='rtc:trigger', min_items=1
    )


Model.update_forward_refs()
RtcDeadBandTimeComplexType.update_forward_refs()
RtcDeadBandTriggerComplexType.update_forward_refs()
RtcPolygonLookupComplexType.update_forward_refs()
RtcRtcToolsConfigComplexType.update_forward_refs()
RtcRuleTriggerComplexType.update_forward_refs()
RtcSetTriggerComplexType.update_forward_refs()
