# generated by datamodel-codegen:
#   filename:  rtcToolsConfig.json
#   timestamp: 2022-09-27T13:34:13+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from hydrolib.core.io.rtc.basemodel import RtcBaseModel
from pydantic import Extra, Field

from . import _
from ._._ import ExternalParameterSimpleType, TimeSeriesSimpleType, xs_string


class AggregationTypeEnumStringType(str, Enum):
    BLOCK = 'BLOCK'
    LINEAR = 'LINEAR'


class BranchTypeEnumStringType(str, Enum):
    KINEMATIC = 'KINEMATIC'
    DIFFUSIVE = 'DIFFUSIVE'
    DIFFUSIVEPLUSLOCAL = 'DIFFUSIVEPLUSLOCAL'


class CapacityReferenceEnumStringType(str, Enum):
    """
    reference for capacity
    """

    UPSTREAMLEVEL = 'UPSTREAMLEVEL'
    HEAD = 'HEAD'


class AttrMonthOfYear(str, Enum):
    January = 'January'
    February = 'February'
    March = 'March'
    April = 'April'
    May = 'May'
    June = 'June'
    July = 'July'
    August = 'August'
    September = 'September'
    October = 'October'
    November = 'November'
    December = 'December'


class EnsembleModeEnumStringType(str, Enum):
    JOINT = 'JOINT'
    TREE = 'TREE'
    INDEPENDENT = 'INDEPENDENT'


class EquationEnumStringType(str, Enum):
    KINEMATIC = 'KINEMATIC'
    DIFFUSIVE = 'DIFFUSIVE'
    INERTIAL = 'INERTIAL'


class ExternalBooleanSimpleTypeItem(RtcBaseModel):
    __root__: str = Field(..., regex='^([\\$][\\(-_a-z]+[\\$])$')


class ExternalBooleanSimpleType(RtcBaseModel):
    __root__: Union[bool, ExternalBooleanSimpleTypeItem]


class ExternalIntegerSimpleTypeItem(RtcBaseModel):
    __root__: str = Field(..., regex='^([\\$][\\(-_a-z]+[\\$])$')


class ExternalIntegerSimpleType(RtcBaseModel):
    __root__: Union[int, ExternalIntegerSimpleTypeItem]


class ExternalParameterSimpleTypeItem(RtcBaseModel):
    __root__: str = Field(..., regex='^([#-\\$][\\(-_a-z]+[#-\\$])$')


class ExternalParameterSimpleType(RtcBaseModel):
    __root__: Union[float, ExternalParameterSimpleTypeItem]


class HBVParameterInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    ECORR: Optional[ExternalParameterSimpleType] = Field(
        None, description='correction factor for EP'
    )
    RFCF: Optional[ExternalParameterSimpleType] = Field(
        None, description='correction factor for rainfall'
    )
    SFCF: Optional[ExternalParameterSimpleType] = Field(
        None, description='correction factor for snow'
    )
    TT: ExternalParameterSimpleType = Field(
        ..., description='temperature limit for snow / rain [oC], normally close to 0 '
    )
    TTI: ExternalParameterSimpleType = Field(
        ..., description='temperature interval with a mixture of snow / rain [oC]'
    )


class HBVParameterInterceptionComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    LIC: ExternalParameterSimpleType = Field(
        ..., description='maximum interception storage'
    )


class HBVParameterResponseComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    ALPHA: ExternalParameterSimpleType = Field(
        ..., description='response box parameter [-], usually between 1.0 and 2.0'
    )
    AREA: ExternalParameterSimpleType = Field(..., description='catchment area [km2]')
    K: ExternalParameterSimpleType = Field(..., description='recession coefficient')
    K1: ExternalParameterSimpleType = Field(
        ..., description='recession coefficient [1/day]'
    )
    PERC: ExternalParameterSimpleType = Field(
        ...,
        description='percolation from upper to lower response box [mm/day], usually between 0 and 6',
    )


class HBVParameterSnowComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    CFMAX: ExternalParameterSimpleType = Field(
        ...,
        description='degree day factor [mm/(oC*day)], varies normally between 1.5 and 4, 2 and 3.5 can be used in forested and open\nlandscape respectively',
    )
    CFR: ExternalParameterSimpleType = Field(
        ..., description='refreezing factor [-], about 0.05'
    )
    CWH: ExternalParameterSimpleType = Field(
        ..., description='water holding capacity [-], usually 0.1'
    )
    TTM: ExternalParameterSimpleType = Field(
        ..., description='temperature limit for melting [oC]'
    )


class HBVParameterSoilComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    BETA: ExternalParameterSimpleType = Field(
        ..., description='parameter in soil routine [-], usually between 1 and 6'
    )
    CFLUX: ExternalParameterSimpleType = Field(..., description='maximum value of CF')
    ETF: ExternalParameterSimpleType = Field(
        ..., description='temperature correction factor'
    )
    FC: ExternalParameterSimpleType = Field(
        ..., description='field capacity [mm], between 50 and 500'
    )
    LP: ExternalParameterSimpleType = Field(
        ...,
        description='limit for potential evapotranspiration [-], in the range between 0.3 and 1',
    )


class HydraulicModelModeEnumStringType(str, Enum):
    SEQUENTIAL_EXPLICIT = 'SEQUENTIAL_EXPLICIT'
    SEQUENTIAL_IMPLICIT = 'SEQUENTIAL_IMPLICIT'
    SIMULTANEOUS = 'SIMULTANEOUS'


class LayerIDSimpleType(RtcBaseModel):
    __root__: str = Field(..., regex='^([L][0-9]+)$')


class PropertyEnum(str, Enum):
    MONOTON = 'MONOTON'
    POSITIVE = 'POSITIVE'


class LorentGeversParameterResponseComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: ExternalParameterSimpleType
    KB: ExternalParameterSimpleType
    KS: ExternalParameterSimpleType
    TB1: ExternalParameterSimpleType
    TB2: ExternalParameterSimpleType
    TS1: ExternalParameterSimpleType
    TS2: ExternalParameterSimpleType


class LorentGeversParameterSoilComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    BETA: ExternalParameterSimpleType
    PMAX: ExternalParameterSimpleType
    SMAX: ExternalParameterSimpleType


class MathematicalOperatorEnumStringType(str, Enum):
    """
    mathematical operators
    """

    _ = '+'
    __1 = '-'
    __2 = '*'
    __3 = '/'
    min = 'min'
    max = 'max'
    __4 = '^'


class MergerSplitterEnumStringType(str, Enum):
    AVERAGE = 'AVERAGE'
    DATAHIERARCHY = 'DATAHIERARCHY'
    SUM = 'SUM'


class NeuronIDSimpleType(RtcBaseModel):
    __root__: str = Field(..., regex='^([L][0-9]+[N][0-9]+)$')


class ParameterCapillaryFlowStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: Optional[ExternalParameterSimpleType] = Field(None, description='area [km2]')
    CFLUX: ExternalParameterSimpleType = Field(
        ..., description='maximum value of capillary flow [mm/d]'
    )
    FC: ExternalParameterSimpleType = Field(..., description='field capacity [mm]')


class ParameterEvaporationActualStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: Optional[ExternalParameterSimpleType] = Field(
        None, description='area [1000 m2], default = 1.0'
    )
    D: Optional[ExternalParameterSimpleType] = Field(
        None, description='distance measure for smoothing the transitions [-]'
    )
    FC: ExternalParameterSimpleType = Field(..., description='field capacity [mm]')
    LP: ExternalParameterSimpleType = Field(
        ..., description='limit for potential evaporation [-]'
    )


class ParameterEvaporationInterceptionStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: Optional[ExternalParameterSimpleType] = Field(None, description='area [km2]')


class ParameterEvaporationPotentialComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    ECORR: Optional[ExternalParameterSimpleType] = Field(
        None, description='evaporation correction factor, default = 1.0'
    )
    ETF: ExternalParameterSimpleType = Field(
        ..., description='temperature correction factor'
    )


class ParameterIrrigationStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: Optional[ExternalParameterSimpleType] = Field(
        None, description='area [km2], default = 1.0'
    )
    IRR_CONST: Optional[ExternalParameterSimpleType] = Field(
        None, description='costant irrigation flux [mm/d]'
    )
    IRR_THR: ExternalParameterSimpleType = Field(
        ...,
        description='Threshold of the downstream node under which irrigation is needed [mm]',
    )
    M: Optional[ExternalParameterSimpleType] = Field(
        None, description='smoothing factor'
    )


class ParameterMeltRefreezingStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: Optional[ExternalParameterSimpleType] = Field(None, description='area [km2]')
    CFMAX: ExternalParameterSimpleType = Field(
        ..., description='degree day factor [mm/day]'
    )
    CFR: ExternalParameterSimpleType = Field(..., description='refreezing factor [-]')
    M: Optional[ExternalParameterSimpleType] = Field(
        None,
        description='smoothing factor, default = 0.05, more smoothing for higher value and vice versa',
    )
    TTM: ExternalParameterSimpleType = Field(
        ..., description='temperature limit for melting [oC]'
    )


class ParameterPercolationStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: Optional[ExternalParameterSimpleType] = Field(None, description='area [km2]')
    PERC: ExternalParameterSimpleType = Field(..., description='percolation [mm/d]')


class ParameterReleaseAboveThresholdStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: Optional[ExternalParameterSimpleType] = Field(
        None, description='area [km2], default = 1.0'
    )
    FRAC: Optional[ExternalParameterSimpleType] = Field(
        None,
        description='percentage of the flow which flows towards the bucket of interest. The permitted range is between 0 and 100',
    )
    LIC: ExternalParameterSimpleType = Field(
        ..., description='upper limit of (interception) storage node [mm]'
    )
    M: Optional[ExternalParameterSimpleType] = Field(
        None, description='smoothing factor'
    )


class ParameterReleaseTotalComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: ExternalParameterSimpleType = Field(..., description='area [km2]')


class ParameterReleaseWaterContentStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: Optional[ExternalParameterSimpleType] = Field(None, description='area [km2]')
    M: Optional[ExternalParameterSimpleType] = Field(
        None, description='smoothing coefficient'
    )
    WHC: ExternalParameterSimpleType = Field(
        ..., description='water holding capacity [-]'
    )


class ParameterResponseStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    ALPHA: Optional[ExternalParameterSimpleType] = Field(
        None, description='response box parameter [-], default = 0.0'
    )
    AREA: Optional[ExternalParameterSimpleType] = Field(None, description='area [km2]')
    K: ExternalParameterSimpleType = Field(
        ..., description='recession coefficient [1/d]'
    )


class ParameterSnowRainJunctionComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    D: Optional[ExternalParameterSimpleType] = Field(
        None,
        description='smoothing parameter for switching between a linear ramp (D=0.0) and a sigmoid function (D=1.0)',
    )
    RFCF: Optional[ExternalParameterSimpleType] = Field(
        None, description='rainfall correction factor [-], default is 1.0'
    )
    SFCF: Optional[ExternalParameterSimpleType] = Field(
        None, description='snowfall correction factor [-], default is 1.0'
    )
    TT: ExternalParameterSimpleType = Field(
        ..., description='temperature limit for snow and rainfall [oC]'
    )
    TTI: ExternalParameterSimpleType = Field(
        ..., description='temperature interval with a mixture of snow and rainfall [K]'
    )


class ParameterSoilRunoffStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: Optional[ExternalParameterSimpleType] = Field(None, description='area [km2]')
    BETA: ExternalParameterSimpleType = Field(
        ..., description='parameter in soil routine [-]'
    )
    FC: ExternalParameterSimpleType = Field(..., description='field capacity [mm]')


class ParameterWaterDistributionConstantStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: Optional[ExternalParameterSimpleType] = Field(
        None, description='area [km2], default = 1.0'
    )
    D: ExternalParameterSimpleType = Field(
        ..., description='capacity of demand/abstraction [m3/s]'
    )
    M: Optional[ExternalParameterSimpleType] = Field(
        None, description='smoothing factor'
    )
    MIN_UP: Optional[ExternalParameterSimpleType] = Field(
        None,
        description='minimum abstraction level upstream [mm]. Default 0, till empty.',
    )


class ParameterWaterDistributionVariableStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AREA: Optional[ExternalParameterSimpleType] = Field(
        None, description='area [km2], default = 1.0'
    )
    M: Optional[ExternalParameterSimpleType] = Field(
        None, description='smoothing factor'
    )
    MIN_UP: Optional[ExternalParameterSimpleType] = Field(
        None,
        description='minimum abstraction level upstream [mm]. Default 0, till empty.',
    )


class ParametergroundwaterFlowStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    ALPHA: ExternalParameterSimpleType = Field(
        ..., description='Ground water reaction coefficient'
    )
    AREA: Optional[ExternalParameterSimpleType] = Field(None, description='area [km2]')
    K: ExternalParameterSimpleType = Field(
        ..., description='Ground water Conductivity [1/d]'
    )
    MAX_GFLOW: ExternalParameterSimpleType = Field(
        ..., description='Maximum groundwater flow [mm/d]'
    )


class Mode(str, Enum):
    """
    pid mode, either "NATIVE" or "SOBEK2" or "PIDPOS" or PIDVEL"
    """

    NATIVE = 'NATIVE'
    SOBEK2 = 'SOBEK2'
    PIDPOS = 'PIDPOS'
    PIDVEL = 'PIDVEL'


class SRMParameterComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    Pt: ExternalParameterSimpleType = Field(
        ..., description='precipitation threshold [mm]'
    )
    TLag: ExternalParameterSimpleType = Field(
        ..., description='Time lag of input data [h]'
    )
    x: ExternalParameterSimpleType = Field(..., description='recession coefficient 1')
    y: ExternalParameterSimpleType = Field(..., description='recession coefficient 2')


class SpatialEnumStringType(str, Enum):
    """
    options for spatial schetization
    """

    CENTRAL = 'CENTRAL'
    UPWIND = 'UPWIND'


class Mode1(str, Enum):
    """
    timeRelative mode, either "NATIVE" or "RETAINVALUEWHENINACTIVE"
    """

    NATIVE = 'NATIVE'
    RETAINVALUEWHENINACTIVE = 'RETAINVALUEWHENINACTIVE'


class TimeSeriesSimpleType(RtcBaseModel):
    __root__: str = Field(..., min_length=1)


class TimeZoneSimpleType(RtcBaseModel):
    __root__: float = Field(
        ...,
        description='The timeZone (in decimal hours shift from GMT)\n            e.g. -1.0 or 3.5. If not present GMT is assumed',
    )


class TriggerInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    status: TimeSeriesSimpleType


class TriggerOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    status: TimeSeriesSimpleType
    timeFalse: Optional[TimeSeriesSimpleType] = None
    timeTrue: Optional[TimeSeriesSimpleType] = None


class TurbineInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    relativeRelease: Optional[TimeSeriesSimpleType] = Field(
        None, description='provision of relative turbine release, 1 = maximum capacity'
    )
    release: Optional[TimeSeriesSimpleType] = Field(
        None, description='provision of absolute turbine release'
    )


class TurbineOutputCharacteristicsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    power: TimeSeriesSimpleType = Field(..., description='power output [MW]')


class TurbineOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    discharge: TimeSeriesSimpleType = Field(..., description='discharge in m3/s')
    powerProduction: TimeSeriesSimpleType = Field(
        ..., description='power production in MW'
    )


class UOutletInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    release: TimeSeriesSimpleType


class UnitDelayInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType


class UnitDelayOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    y: Optional[List[TimeSeriesSimpleType]] = None
    yFinal: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='optional result of the delay operator, identical to yVector[end] if the delay is a multiple of the time step, required in case of sub time steps',
    )
    yMax: Optional[TimeSeriesSimpleType] = None
    yMean: Optional[TimeSeriesSimpleType] = Field(
        None, description='optional mean of input and outputs'
    )
    yMin: Optional[TimeSeriesSimpleType] = None
    ySum: Optional[TimeSeriesSimpleType] = Field(
        None, description='optional sum of input and outputs'
    )
    yVector: Optional[TimeSeriesSimpleType] = None


class UnitHydrographInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType


class UnitHydrographOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    xDelay: Optional[List[TimeSeriesSimpleType]] = None
    xDelayVector: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='definition of delay vector, configure one element less than weights defined above',
    )
    y: TimeSeriesSimpleType = Field(..., description='result of unit hydrograph')


class UnitTypeEnumStringType(str, Enum):
    SI = 'SI'
    Imperial = 'Imperial'


class VariableTypeEnumStringType(str, Enum):
    CONTINUOUS = 'CONTINUOUS'
    INTEGER = 'INTEGER'
    TIMEINSTANCE = 'TIMEINSTANCE'


class CaseLangetenEnumStringType(int, Enum):
    integer_1 = 1
    integer_2 = 2


class DateType(RtcBaseModel):
    __root__: str = Field(
        ..., regex='^([\\d][\\d][\\d][\\d]\\-[\\d][\\d]\\-[\\d][\\d])$'
    )


class FlowDirectionEnumStringTypeEnum(str, Enum):
    POSITIVE = 'POSITIVE'
    NEGATIVE = 'NEGATIVE'
    BOTH = 'BOTH'


class FlowDirectionEnumStringTypeItem(RtcBaseModel):
    __root__: str = Field(..., regex='^([\\$][\\(-_a-z]+[\\$])$')


class FlowDirectionEnumStringType(RtcBaseModel):
    __root__: Union[
        FlowDirectionEnumStringTypeEnum, FlowDirectionEnumStringTypeItem
    ] = Field(..., description='flow direction')


class InputReferenceEnumStringType(str, Enum):
    EXPLICIT = 'EXPLICIT'
    IMPLICIT = 'IMPLICIT'


class InterpolationOptionEnumStringType(str, Enum):
    """
    Type of interpolation
    """

    BLOCK = 'BLOCK'
    LINEAR = 'LINEAR'


class LimiterOptionEnumStringType(str, Enum):
    """
    Type of limiting
    """

    PERCENTAGE = 'PERCENTAGE'
    ABSOLUTE = 'ABSOLUTE'


class LogicalOperatorEnumStringType(str, Enum):
    """
    logical operator
    """

    AND = 'AND'
    OR = 'OR'
    XOR = 'XOR'


class PoolRoutingEnumStringType(str, Enum):
    """
    Type of pool routing.
    """

    ForwardEuler = 'ForwardEuler'
    BackwardEuler = 'BackwardEuler'
    Theta = 'Theta'


class RelationalOperatorEnumStringType(str, Enum):
    """
    relational operator
    """

    Less = 'Less'
    LessEqual = 'LessEqual'
    Equal = 'Equal'
    Unequal = 'Unequal'
    GreaterEqual = 'GreaterEqual'
    Greater = 'Greater'


class TimeRelativeEnumStringType(str, Enum):
    """
    Value option
    """

    ABSOLUTE = 'ABSOLUTE'
    RELATIVE = 'RELATIVE'


class TimeSeriesType(str, Enum):
    """
    Type of data, either accumulative or instantaneous.
                        For accumulative data the time/date of the event is
                        the moment at which the data was gathered.
            
    """

    accumulative = 'accumulative'
    instantaneous = 'instantaneous'


class TimeStepUnitEnumStringType(str, Enum):
    second = 'second'
    minute = 'minute'
    hour = 'hour'
    day = 'day'
    week = 'week'


class TimeType(RtcBaseModel):
    __root__: str = Field(..., regex='^([\\d][\\d]\\:[\\d][\\d]\\:[\\d][\\d])$')


class TransferFunctionEnumStringType(str, Enum):
    """
    Type of transfer function.
    """

    Linear = 'Linear'
    SigmoidLogistic = 'SigmoidLogistic'
    Tansig = 'Tansig'


class XsBoolean(RtcBaseModel):
    __root__: bool


class XsDateTime(RtcBaseModel):
    __root__: str


class XsDouble(RtcBaseModel):
    __root__: float


class XsFloat(RtcBaseModel):
    __root__: float


class XsGMonthDay(RtcBaseModel):
    __root__: str


class XsInt(RtcBaseModel):
    __root__: int = Field(..., ge=-2147483648, le=2147483647)


class XsInteger(RtcBaseModel):
    __root__: int


class XsPositiveInteger(RtcBaseModel):
    __root__: int = Field(..., ge=1)


class XsString(RtcBaseModel):
    __root__: str


class XsTime(RtcBaseModel):
    __root__: str


class RowItem(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_value: XsDouble


class ATableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    row: List[RowItem] = Field(..., min_items=1)


class AccumulationInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType


class AccumulationOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    y: TimeSeriesSimpleType


class AebiRuleInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AareBruegg: TimeSeriesSimpleType
    AareBrueggMin2: TimeSeriesSimpleType
    AareMurg: TimeSeriesSimpleType
    AbflussReglementPort: TimeSeriesSimpleType
    Emenmatt: TimeSeriesSimpleType
    EmenmattMin4: TimeSeriesSimpleType
    Langeten: TimeSeriesSimpleType
    LangetenMin4: TimeSeriesSimpleType
    PegelBielersee: TimeSeriesSimpleType


class AebiRuleOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    AareMurg_oKWMin1: TimeSeriesSimpleType
    AbflussaenderungPort: TimeSeriesSimpleType
    MaxAbflussPort: TimeSeriesSimpleType
    ProvMaxAbflussPort: TimeSeriesSimpleType
    RTG: TimeSeriesSimpleType


class ArmaInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    obs: TimeSeriesSimpleType = Field(..., description='observed data')
    sim: TimeSeriesSimpleType = Field(..., description='simulated data')


class ArmaOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    arma: TimeSeriesSimpleType = Field(..., description='output-corrected data')


class BranchGradientComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    storageDown: TimeSeriesSimpleType
    storageUp: TimeSeriesSimpleType
    surfaceAreaDown: TimeSeriesSimpleType
    surfaceAreaUp: TimeSeriesSimpleType


class BranchInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    HDown: TimeSeriesSimpleType = Field(..., description='ID of downstream node')
    HUp: TimeSeriesSimpleType = Field(..., description='ID of upstream node')
    ux: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='optional wind velocity at an elevation of 10 m above the water surface (x-direction), implementation is for the inertial model only',
    )
    uy: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='optional wind velocity at an elevation of 10 m above the water surface (y-direction), implementation is for the inertial model only',
    )


class BranchOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    Q: TimeSeriesSimpleType


class ColumnsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_head01: XsDouble
    attr_head02: XsDouble
    attr_head03: Optional[XsDouble] = None
    attr_head04: Optional[XsDouble] = None
    attr_head05: Optional[XsDouble] = None
    attr_head06: Optional[XsDouble] = None
    attr_head07: Optional[XsDouble] = None
    attr_head08: Optional[XsDouble] = None
    attr_head09: Optional[XsDouble] = None
    attr_head10: Optional[XsDouble] = None
    attr_head11: Optional[XsDouble] = None
    attr_head12: Optional[XsDouble] = None
    attr_head13: Optional[XsDouble] = None
    attr_head14: Optional[XsDouble] = None
    attr_head15: Optional[XsDouble] = None
    attr_head16: Optional[XsDouble] = None
    attr_head17: Optional[XsDouble] = None
    attr_head18: Optional[XsDouble] = None
    attr_head19: Optional[XsDouble] = None
    attr_head20: Optional[XsDouble] = None


class ConditionComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    greaterThan: Optional[XsDouble] = None
    lessThan: Optional[XsDouble] = None


class ConnectionCoefficientsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    a: ExternalParameterSimpleType
    b: ExternalParameterSimpleType
    c: ExternalParameterSimpleType
    d: ExternalParameterSimpleType


class ConnectionInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    discharge: TimeSeriesSimpleType
    downstreamLevel: TimeSeriesSimpleType
    upstreamLevel: TimeSeriesSimpleType


class ConnectionOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    discharge: TimeSeriesSimpleType


class ConstantRuleOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    y: TimeSeriesSimpleType


class DataTypicalProfileComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_monthOfYear: AttrMonthOfYear
    attr_value: XsDouble


class DateComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_monthDay: XsGMonthDay


class DateLookupTableInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType
    y: Optional[TimeSeriesSimpleType] = None


class DateLookupTableOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    active: Optional[TimeSeriesSimpleType] = None
    y: TimeSeriesSimpleType


class DateRecord2DataComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_x: XsDouble
    attr_y: XsDouble


class DateRecordComplexType(RtcBaseModel):
    """
    defined data input as per time series format date time (defined either by dateTime or time or
                month day) and value
    """

    class Config:
        extra = Extra.forbid

    attr_comment: Optional[XsString] = None
    attr_dateTime: Optional[XsDateTime] = None
    attr_monthDay: Optional[XsGMonthDay] = None
    attr_time: Optional[XsTime] = None
    attr_value: XsDouble


class DateTableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    data: List[DateRecordComplexType] = Field(..., min_items=1)


class DateTimeComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_date: DateType
    attr_time: TimeType


class DeadBandTimeDiscreteComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    numberOfStepsDown: XsInt
    numberOfStepsUp: XsInt


class DeadBandTimeInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType.Field20


class DeadBandTimeOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    status: TimeSeriesSimpleType
    stepsDown: TimeSeriesSimpleType
    stepsUp: TimeSeriesSimpleType
    timeFalse: Optional[TimeSeriesSimpleType] = None
    timeTrue: Optional[TimeSeriesSimpleType] = None


class DeadBandValueInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType


class EdgeComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_x1: XsDouble
    attr_x2: XsDouble


class EdgesComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    edge: List[EdgeComplexType] = Field(..., min_items=1)


class EifelRurRuleComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    a: XsDouble
    b: XsDouble
    minimumRelativeStorage: DateTableComplexType


class ElevationRecordComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_elevation: XsDouble
    attr_value: ExternalParameterSimpleType


class ElevationTableComplexType(RtcBaseModel):
    """
    
                Table containing data for different elevations. Type of element 'value'
                depends on purpose for which table is used.
            
    """

    class Config:
        extra = Extra.forbid

    elevationRecord: List[ElevationRecordComplexType] = Field(..., min_items=1)


class EquationComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    a: ExternalParameterSimpleType
    b: ExternalParameterSimpleType
    c: ExternalParameterSimpleType
    lowerLevel: Optional[XsDouble] = None
    upperLevel: Optional[XsDouble] = None


class EquationsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    equation: List[EquationComplexType] = Field(..., min_items=1)


class ExpressionComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    mathematicalOperator: MathematicalOperatorEnumStringType = Field(
        ...,
        description='mathematical operator: + (summation), - (substraction), * (multiplication), / (division), min, max, ^ (power)',
    )
    x1Series: Optional[TimeSeriesSimpleType.Field2] = Field(
        None, description='reference to time series ID'
    )
    x1SeriesVector: Optional[TimeSeriesSimpleType.Field3] = Field(
        None, description='reference to time series ID vector'
    )
    x1Value: Optional[ExternalParameterSimpleType] = Field(
        None, description='user-configured constant value'
    )
    x2Series: Optional[TimeSeriesSimpleType.Field4] = None
    x2SeriesVector: Optional[TimeSeriesSimpleType.Field5] = None
    x2Value: Optional[ExternalParameterSimpleType] = None
    y: Optional[TimeSeriesSimpleType] = Field(
        None, description='time series ID of resulting value'
    )
    yVector: Optional[TimeSeriesSimpleType] = Field(
        None, description='time series ID vector of resulting value'
    )


class GeneralModuleConfigComplexType(RtcBaseModel):
    """
    DEPRICATED
    """

    class Config:
        extra = Extra.forbid

    description: Optional[XsString] = Field(None, description='DEPRICATED')
    poolRoutingScheme: PoolRoutingEnumStringType = Field(..., description='DEPRICATED')
    theta: XsDouble = Field(..., description='DEPRICATED')


class GradientInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType


class GradientOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    dx: TimeSeriesSimpleType


class GuideBandRuleInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType
    y: Optional[TimeSeriesSimpleType] = None


class GuideBandRuleOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    y: TimeSeriesSimpleType


class HBVInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    EP: TimeSeriesSimpleType
    P: TimeSeriesSimpleType
    T: TimeSeriesSimpleType
    TM: TimeSeriesSimpleType


class HBVLinkComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    CF: TimeSeriesSimpleType
    EA: TimeSeriesSimpleType
    EI: TimeSeriesSimpleType
    EP: TimeSeriesSimpleType
    IN: TimeSeriesSimpleType
    INI: TimeSeriesSimpleType
    PERC: TimeSeriesSimpleType
    R: TimeSeriesSimpleType


class HBVOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    Q: TimeSeriesSimpleType
    SMPercentage: Optional[TimeSeriesSimpleType] = None
    SWE: Optional[TimeSeriesSimpleType] = None


class HBVStateComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    IC: TimeSeriesSimpleType
    LZ: TimeSeriesSimpleType
    SM: TimeSeriesSimpleType
    SP: TimeSeriesSimpleType
    UZ: TimeSeriesSimpleType
    WC: TimeSeriesSimpleType


class HBVStateUpdateComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    IC: Optional[TimeSeriesSimpleType] = None
    LZ: Optional[TimeSeriesSimpleType] = Field(
        None, description='increment on lower zone storage [mm]'
    )
    SM: Optional[TimeSeriesSimpleType] = Field(
        None, description='STILL NOT IMPLEMENTED'
    )
    SP: Optional[TimeSeriesSimpleType] = Field(
        None, description='STILL NOT IMPLEMENTED'
    )
    UZ: Optional[TimeSeriesSimpleType] = Field(
        None, description='STILL NOT IMPLEMENTED'
    )
    WC: Optional[TimeSeriesSimpleType] = Field(
        None, description='STILL NOT IMPLEMENTED'
    )


class HydraulicModelOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    nFun: TimeSeriesSimpleType = Field(
        ..., description='number of function evaluations'
    )
    nJac: TimeSeriesSimpleType = Field(
        ..., description='number of evaluations of the Jacobian'
    )
    res: TimeSeriesSimpleType = Field(
        ..., description='residuum at last iteration step, 0.5*sum(SQR(ri))'
    )


class HydraulicModelSequentialImplicitComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    convergenceThreshold: XsDouble
    theta: XsDouble
    treatNonConvergenceAsError: XsBoolean


class HydraulicModelSimultaneousComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    theta: XsDouble


class InflowComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_factor: Optional[XsDouble] = None


class InputATableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    valueSelection: Optional[TimeSeriesSimpleType] = None
    x: TimeSeriesSimpleType


class InputCapillaryFlowStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    HDown: TimeSeriesSimpleType = Field(
        ..., description='downstream node, typically UZ unsaturted zone'
    )
    HUp: TimeSeriesSimpleType = Field(
        ..., description='upstream node, typically GW upper zone'
    )


class InputEvaporationActualStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    EI: Optional[TimeSeriesSimpleType] = None
    EP: TimeSeriesSimpleType
    HUp: TimeSeriesSimpleType = Field(
        ..., description='upstream node, typically SM (soil moisture)'
    )


class InputEvaporationInterceptionStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    EP: TimeSeriesSimpleType = Field(..., description='potential evaporation [mm]')
    HUp: TimeSeriesSimpleType = Field(
        ..., description='upstream node, typically IC (interception)'
    )


class InputEvaporationPotentialComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    EPM: TimeSeriesSimpleType = Field(
        ..., description='monthly mean value of potential evaporation [mm/timestep]'
    )
    T: TimeSeriesSimpleType = Field(..., description='instantaneous temperature [oC]')
    TM: TimeSeriesSimpleType = Field(..., description='monthly mean temperature [oC]')


class InputGroundwaterFlowStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    HDown: TimeSeriesSimpleType = Field(
        ..., description='downstream node, can be GW groundwater or SW surface water'
    )
    HUp: TimeSeriesSimpleType = Field(
        ..., description='upstream node, can be GW groundwater or SW surface water'
    )


class InputNodeStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    discharge: Optional[List[TimeSeriesSimpleType]] = None
    state: Optional[TimeSeriesSimpleType] = Field(
        None, description='unit volume [mm], replaces the computes state'
    )
    unitVolume: Optional[List[TimeSeriesSimpleType]] = None


class InputPercolationStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    HDown: Optional[TimeSeriesSimpleType] = Field(
        None, description='downstream node, typically LZ (lower zone storage)'
    )
    HUp: TimeSeriesSimpleType = Field(
        ..., description='upstream node, typically UZ (upper zone storage)'
    )


class InputPidComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    disturbance: Optional[TimeSeriesSimpleType.Field8] = None
    setpointSeries: Optional[TimeSeriesSimpleType] = None
    setpointValue: Optional[XsDouble] = None
    x: TimeSeriesSimpleType = Field(..., description='controllable variable')


class InputReleaseAboveThresholdStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    HDown: Optional[TimeSeriesSimpleType] = Field(None, description='downstream node')
    HUp: TimeSeriesSimpleType = Field(..., description='upstream node')


class InputReleaseTotalComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    discharge: List[TimeSeriesSimpleType] = Field(..., min_items=1)


class InputResponseStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    HUp: TimeSeriesSimpleType = Field(
        ...,
        description='upstream (release) node, typically UZ and/or LZ (upper/lower zone storages)',
    )


class InputSnowRainJunctionComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    P: TimeSeriesSimpleType = Field(..., description='precipitation [mm/timestep]')
    T: TimeSeriesSimpleType = Field(..., description='temperature [oC]')


class InputSoilRunoffStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    HDown: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='optional downstream node, typically uper saturated zones (UZ upper zone storage). Required if capillary flow is used and SM and UZ are present in one storage system',
    )
    HUp: TimeSeriesSimpleType = Field(
        ..., description='upstream node, typically unsaturated zone (SM soil moisture)'
    )
    INF: List[TimeSeriesSimpleType] = Field(..., min_items=1)


class InputWaterDistributionConstantStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    HDown: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='downstream node collector of abstracted water. For instance drinking water treatment plant',
    )
    HUp: TimeSeriesSimpleType = Field(
        ...,
        description='upstream node, source of water abstraction/distribution (i.e. surface water/groundwater/sewerage)',
    )


class InputWaterDistributionVariableStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    D: TimeSeriesSimpleType = Field(
        ...,
        description='series of industrial or domestic water demands/abstractions [m3/s]',
    )
    HDown: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='downstream node collector of abstracted water. For instance drinking water treatment plant',
    )
    HUp: TimeSeriesSimpleType = Field(
        ...,
        description='upstream node, source of water abstraction/distribution (i.e. surface water/groundwater/sewerage)',
    )


class InterpolationOptionsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    date: InterpolationOptionEnumStringType
    value: InterpolationOptionEnumStringType


class IntervalInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    setpoint: TimeSeriesSimpleType
    x: TimeSeriesSimpleType.Field9 = Field(
        ..., description='reference to time series ID'
    )


class IntervalOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    status: TimeSeriesSimpleType
    y: TimeSeriesSimpleType


class LevelStorageEquationComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    A0: XsDouble
    A1: XsDouble
    A2: Optional[XsDouble] = None
    A3: Optional[XsDouble] = None
    A4: Optional[XsDouble] = None


class LimiterInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    thresholdSeries: Optional[TimeSeriesSimpleType.Field21] = None
    thresholdValue: Optional[XsDouble] = None
    x: TimeSeriesSimpleType


class Lookup2DTableInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType
    y: TimeSeriesSimpleType
    z: Optional[TimeSeriesSimpleType] = None


class Lookup2DTableOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    z: TimeSeriesSimpleType


class LookupTableInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType.Field10 = Field(
        ..., description='reference to time series ID'
    )
    y: Optional[TimeSeriesSimpleType] = None


class LookupTableOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    y: TimeSeriesSimpleType


class LorentGeversInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    EP: TimeSeriesSimpleType
    P: TimeSeriesSimpleType


class LorentGeversOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    Q: TimeSeriesSimpleType


class LorentGeversStateComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    QB1: TimeSeriesSimpleType
    QB2: TimeSeriesSimpleType
    QS1: TimeSeriesSimpleType
    QS2: TimeSeriesSimpleType
    S: TimeSeriesSimpleType


class LorentGeversStateUpdateComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    S: TimeSeriesSimpleType


class MaxFlowsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_maxFlow_head01: XsDouble
    attr_maxFlow_head02: XsDouble
    attr_maxFlow_head03: Optional[XsDouble] = None
    attr_maxFlow_head04: Optional[XsDouble] = None
    attr_maxFlow_head05: Optional[XsDouble] = None
    attr_maxFlow_head06: Optional[XsDouble] = None
    attr_maxFlow_head07: Optional[XsDouble] = None
    attr_maxFlow_head08: Optional[XsDouble] = None
    attr_maxFlow_head09: Optional[XsDouble] = None
    attr_maxFlow_head10: Optional[XsDouble] = None
    attr_maxFlow_head11: Optional[XsDouble] = None
    attr_maxFlow_head12: Optional[XsDouble] = None
    attr_maxFlow_head13: Optional[XsDouble] = None
    attr_maxFlow_head14: Optional[XsDouble] = None
    attr_maxFlow_head15: Optional[XsDouble] = None
    attr_maxFlow_head16: Optional[XsDouble] = None
    attr_maxFlow_head17: Optional[XsDouble] = None
    attr_maxFlow_head18: Optional[XsDouble] = None
    attr_maxFlow_head19: Optional[XsDouble] = None
    attr_maxFlow_head20: Optional[XsDouble] = None


class MergerInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: List[TimeSeriesSimpleType.Field11] = Field(..., min_items=1)


class MergerOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    y: Optional[TimeSeriesSimpleType] = None
    ySum: Optional[TimeSeriesSimpleType] = None


class MergerSplitterInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: Optional[List[TimeSeriesSimpleType.Field17]] = None
    xVector: Optional[TimeSeriesSimpleType.Field18] = None


class MergerSplitterOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    y: Optional[List[TimeSeriesSimpleType.Field19]] = None


class NeuronInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    external: Optional[List[xs_string.Field1]] = None
    internal: Optional[List[xs_string.Field2]] = None


class NeuronOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType = Field(..., description='result of the transfer function')
    y: TimeSeriesSimpleType = Field(
        ...,
        description='result of the summation of weighted input (intermediate result)',
    )


class NodeGradientComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    lambda_: TimeSeriesSimpleType = Field(..., alias='lambda')
    surfaceArea: TimeSeriesSimpleType


class NodeInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    HBC: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='Time series with the water level boundary condition, note that a value MUST be provided at all time steps, otherwise the model stops with an error message',
    )
    HUpdate: Optional[TimeSeriesSimpleType] = Field(
        None, description='Time series with an optional water level for model updating'
    )
    QBC: Optional[List[TimeSeriesSimpleType.Field6]] = None


class NodeOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    H: TimeSeriesSimpleType
    R: Optional[TimeSeriesSimpleType] = None
    S: TimeSeriesSimpleType


class NodeStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    AREA: Optional[ExternalParameterSimpleType] = Field(
        None, description='constant area [km2], default is 1.0'
    )
    input: Optional[InputNodeStorageSystemComplexType] = None
    residuum: TimeSeriesSimpleType = Field(..., description='residuum [mm]')
    state: TimeSeriesSimpleType = Field(..., description='unit volume [mm]')
    stateMax: Optional[ExternalParameterSimpleType] = None
    stateMin: Optional[ExternalParameterSimpleType] = None


class OrificeInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    D: Optional[TimeSeriesSimpleType] = Field(None, description='deprecated')
    DConst: Optional[XsDouble] = None
    DSeries: Optional[TimeSeriesSimpleType] = None
    DeltaHDown: Optional[TimeSeriesSimpleType] = None
    DeltaHUp: Optional[TimeSeriesSimpleType] = None
    HDown: TimeSeriesSimpleType
    HUp: TimeSeriesSimpleType


class OrificeOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    D: TimeSeriesSimpleType
    Q: TimeSeriesSimpleType
    flowType: Optional[TimeSeriesSimpleType] = None


class OutletInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    relativeRelease: Optional[List[TimeSeriesSimpleType]] = None
    release: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='Reference to timeseries in data configuration containg an absolute release. (ONLY FOR CONTROLLED OUTLET)',
    )


class OutletOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    release: TimeSeriesSimpleType


class OutputATableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    y: List[TimeSeriesSimpleType.Field1] = Field(..., min_items=1)


class OutputEvaporationPotentialComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    EP: TimeSeriesSimpleType = Field(
        ..., description='instantaneous potential evaporation [mm/timestep]'
    )


class OutputLinkStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    H: TimeSeriesSimpleType = Field(
        ..., description='Discharge as unit volume [mm/timestep]'
    )
    Q: TimeSeriesSimpleType = Field(..., description='Discharge [m3/s]')


class OutputPidComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    differentialPart: TimeSeriesSimpleType = Field(
        ..., description='memory of differential part (in fact e of the last time step)'
    )
    integralPart: TimeSeriesSimpleType = Field(
        ..., description='memory of integral part: integral(e)dt'
    )
    y: TimeSeriesSimpleType = Field(..., description='setting of the actuator')


class OutputSnowRainJunctionComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    RF: TimeSeriesSimpleType = Field(..., description='rainfall [mm/timestep]')
    SF: TimeSeriesSimpleType = Field(..., description='snowfall [mm/timestep]')


class OutputStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    nFun: TimeSeriesSimpleType = Field(
        ..., description='number of function evaluations'
    )
    nJac: TimeSeriesSimpleType = Field(
        ..., description='number of evaluations of the Jacobian'
    )
    res: TimeSeriesSimpleType = Field(
        ..., description='residuum at last iteration step'
    )


class PercolationStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputPercolationStorageSystemComplexType
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterPercolationStorageSystemComplexType


class PidComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputPidComplexType
    kd: XsDouble = Field(..., description='fatcor on differential part kd*de/dt')
    ki: XsDouble = Field(
        ..., description='factor on the integral part ki*integral(e)dt'
    )
    kp: XsDouble = Field(..., description='factor on the proportional part kp*e')
    mode: Optional[Mode] = Field(
        None, description='pid mode, either "NATIVE" or "SOBEK2" or "PIDPOS" or PIDVEL"'
    )
    output: OutputPidComplexType
    settingMax: XsDouble = Field(..., description='maximum setting of the actuator')
    settingMaxSpeed: XsDouble = Field(
        ..., description='maximum speed of the actuation in [unit/s]'
    )
    settingMin: XsDouble = Field(..., description='minimum setting of the actuator')


class PolygonComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: Optional[XsString] = None
    edges: EdgesComplexType
    value: Optional[XsDouble] = None


class PolygonLookupInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x1: TimeSeriesSimpleType.Field12
    x2: TimeSeriesSimpleType.Field13


class PolygonLookupOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    status: TimeSeriesSimpleType


class PolygonsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    polygon: List[PolygonComplexType] = Field(..., min_items=1)


class PumpGradientComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    storageDown: TimeSeriesSimpleType
    storageUp: TimeSeriesSimpleType


class PumpInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    HDown: TimeSeriesSimpleType
    HUp: TimeSeriesSimpleType
    Q: TimeSeriesSimpleType


class PumpOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    Q: TimeSeriesSimpleType


class RelationalConditionComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    relationalOperator: RelationalOperatorEnumStringType
    x1Series: Optional[TimeSeriesSimpleType.Field22] = None
    x1Value: Optional[ExternalParameterSimpleType] = None
    x2Series: Optional[TimeSeriesSimpleType.Field23] = None
    x2Value: Optional[ExternalParameterSimpleType] = None


class ReleaseTotalComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputReleaseTotalComplexType
    output: TimeSeriesSimpleType = Field(..., description='total discharge [m3/s]')


class ReservoirCompactInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    FB: TimeSeriesSimpleType = Field(
        ...,
        description='forebay elevation [m above reference level] or [ft above sea level]',
    )
    OF: Optional[ExternalParameterSimpleType] = Field(
        None,
        description='optional time series with the unit outage factor [0-1], it reduces the (physical) constraints PXValue and QTXValue (NO impact on PX, QTX)',
    )
    PM: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='minimum generation constraint on aggregated turbine level [MW], primarly used as operational constraint',
    )
    PMValue: Optional[ExternalParameterSimpleType] = Field(
        None,
        description='fixed minimum generation constraint on aggregated turbine level [MW], primarily used as physical constraint',
    )
    PX: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='maximum generation constraint on aggregated turbine level [MW], primarly used as operational constraint',
    )
    PXValue: Optional[ExternalParameterSimpleType] = Field(
        None,
        description='fixed maximum generation constraint on aggregated turbine level [MW], primarly used as physical constraint',
    )
    Q: TimeSeriesSimpleType = Field(
        ...,
        description='reservoir outflow [m3/s] or [KCFS], data is expected to be complete and valid',
    )
    QI: List[TimeSeriesSimpleType] = Field(..., min_items=1)
    QMISC: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='optional miscellaneous flow (uncontrolled), will be zero by default [m3/s] or [KCFS] if no time series is supplied or if the time series includes NaN values',
    )
    QS: Optional[TimeSeriesSimpleType] = Field(
        None, description='absolute spill target [m3/s] or [KCFS]'
    )
    QSPercentage: Optional[TimeSeriesSimpleType.Field7] = Field(
        None,
        description='relative spill target as a percentage [0..100] of the total flow Q',
    )
    QSPercentageValue: Optional[ExternalParameterSimpleType.Field1] = Field(
        None,
        description='relative spill target as a percentage [0..100] of the total flow Q',
    )
    QSValue: Optional[ExternalParameterSimpleType] = Field(
        None, description='absolute spill target [m3/s] or [KCFS]'
    )
    QTX: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='maximum generation constraint on aggregated turbine level [m3/s] or [KCFS], primarily used as operational constraint',
    )
    QTXValue: Optional[ExternalParameterSimpleType] = Field(
        None,
        description='fixed maximum generation constraint on aggregated turbine level [m3/s] or [KCFS], primarily used as physical constraint',
    )


class ReservoirCompactOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    DQ: TimeSeriesSimpleType = Field(
        ..., description='deviation from spill target [m3/s] or [KCFS]'
    )
    FB: TimeSeriesSimpleType = Field(
        ...,
        description='forebay elevation [m above reference level] or [ft above sea level]',
    )
    H: TimeSeriesSimpleType = Field(..., description='head [m] or [ft]')
    P: TimeSeriesSimpleType = Field(..., description='power generation [MW]')
    PX: Optional[TimeSeriesSimpleType] = Field(
        None, description='maximum power generation [MW]'
    )
    Q: TimeSeriesSimpleType = Field(
        ..., description='reservoir outflow [m3/s] or [KCFS]'
    )
    QI: TimeSeriesSimpleType = Field(
        ..., description='reservoir inflow [m3/s] or [KCFS]'
    )
    QMISC: Optional[TimeSeriesSimpleType] = Field(
        None, description='miscellaneous flow [m3/s] or [KCFS]'
    )
    QS: TimeSeriesSimpleType = Field(..., description='spillage [m3/s] or [KCFS]')
    QSPercentage: Optional[TimeSeriesSimpleType] = Field(
        None, description='relative spillage [0..100]'
    )
    QT: TimeSeriesSimpleType = Field(..., description='turbine flow [m3/s] or [KCFS]')
    QTX: Optional[TimeSeriesSimpleType] = Field(
        None, description='maximum turbine flow [m3/s] or [KCFS]'
    )
    R: TimeSeriesSimpleType = Field(
        ...,
        description='residuum of mass balance (in simultaneous mode) [m3/s] or [KCFS]',
    )
    S: TimeSeriesSimpleType = Field(
        ...,
        description='storage [m3] or [KCFS-hrs], this is the system state needed in the state file',
    )
    TW: TimeSeriesSimpleType = Field(
        ...,
        description='tailwater elevation [m above reference level] or [ft above sea level]',
    )


class ReservoirGradientComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    lambda_: TimeSeriesSimpleType = Field(..., alias='lambda')
    lambdaDown: Optional[TimeSeriesSimpleType] = None


class ReservoirInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    evaporation: Optional[TimeSeriesSimpleType] = Field(
        None, description='Direct evaporation from the reservoir [mm/time step]'
    )
    inflow: List[TimeSeriesSimpleType] = Field(..., min_items=1)
    level: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='Optional level [m] for updating the simulated level by an observed water level (simple data assimilation), if provided the error output is equal to the mass balance correction ',
    )
    precipitation: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='Direct precitation into the reservoir [mm/time step], the value will be multiplied by the current water surface area of the reservoir',
    )


class ReservoirOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    error: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='optional error output [m3/s] which is non-zero if the simple data assimilation option for overruling the simulated water level is used ',
    )
    inflow: TimeSeriesSimpleType = Field(..., description='aggregated inflows [m3/s]')
    level: TimeSeriesSimpleType = Field(
        ..., description='water level [m] in the reservoir'
    )
    relativeStorage: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='relative storage [-] typically between 0 and 1 depending on the definition of the maximum level above]',
    )
    release: TimeSeriesSimpleType = Field(..., description='aggregated release [m3/s]')
    residuum: Optional[TimeSeriesSimpleType] = Field(
        None, description='optional residuum of the implicit solution'
    )
    storage: TimeSeriesSimpleType = Field(
        ..., description='storage [m3] (state variable)'
    )


class ResponseStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputResponseStorageSystemComplexType
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterResponseStorageSystemComplexType


class ResultComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    output: TimeSeriesSimpleType
    value: XsInteger


class RiverWeirInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    CConst: Optional[XsDouble] = None
    CSeries: Optional[TimeSeriesSimpleType] = None
    DeltaHDown: Optional[TimeSeriesSimpleType] = None
    DeltaHUp: Optional[TimeSeriesSimpleType] = None
    HDown: TimeSeriesSimpleType
    HUp: TimeSeriesSimpleType


class RiverWeirOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    C: TimeSeriesSimpleType
    Q: TimeSeriesSimpleType
    flowType: Optional[TimeSeriesSimpleType] = None


class RoutingOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    discharge: Optional[TimeSeriesSimpleType] = None
    error: Optional[TimeSeriesSimpleType] = None


class RowComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_eta_head01: XsDouble
    attr_eta_head02: XsDouble
    attr_eta_head03: Optional[XsDouble] = None
    attr_eta_head04: Optional[XsDouble] = None
    attr_eta_head05: Optional[XsDouble] = None
    attr_eta_head06: Optional[XsDouble] = None
    attr_eta_head07: Optional[XsDouble] = None
    attr_eta_head08: Optional[XsDouble] = None
    attr_eta_head09: Optional[XsDouble] = None
    attr_eta_head10: Optional[XsDouble] = None
    attr_eta_head11: Optional[XsDouble] = None
    attr_eta_head12: Optional[XsDouble] = None
    attr_eta_head13: Optional[XsDouble] = None
    attr_eta_head14: Optional[XsDouble] = None
    attr_eta_head15: Optional[XsDouble] = None
    attr_eta_head16: Optional[XsDouble] = None
    attr_eta_head17: Optional[XsDouble] = None
    attr_eta_head18: Optional[XsDouble] = None
    attr_eta_head19: Optional[XsDouble] = None
    attr_eta_head20: Optional[XsDouble] = None
    attr_flow: XsDouble


class RuleStateTriggerComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    ruleId: XsString


class SRMInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    P: Optional[TimeSeriesSimpleType] = None
    P_Vector: Optional[TimeSeriesSimpleType] = Field(None, alias='P-Vector')
    RCA: Optional[TimeSeriesSimpleType] = None
    RCA_Vector: Optional[TimeSeriesSimpleType] = Field(None, alias='RCA-Vector')
    SCA: Optional[TimeSeriesSimpleType] = None
    SCA_Vector: Optional[TimeSeriesSimpleType] = Field(None, alias='SCA-Vector')
    T: Optional[TimeSeriesSimpleType] = None
    T_Vector: Optional[TimeSeriesSimpleType] = Field(None, alias='T-Vector')
    cr: Optional[TimeSeriesSimpleType] = None
    cr_Vector: Optional[TimeSeriesSimpleType] = Field(None, alias='cr-Vector')
    cs: Optional[TimeSeriesSimpleType] = None
    cs_Vector: Optional[TimeSeriesSimpleType] = Field(None, alias='cs-Vector')


class SRMOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    QRain_Vector: TimeSeriesSimpleType = Field(..., alias='QRain-Vector')
    QSnow_Vector: TimeSeriesSimpleType = Field(..., alias='QSnow-Vector')
    QStorage_Vector: TimeSeriesSimpleType = Field(..., alias='QStorage-Vector')


class SRMParameterZoneComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: Optional[XsString] = None
    Tcr1: ExternalParameterSimpleType = Field(
        ..., description='critical temperature (???) [oC]'
    )
    Tcr2: ExternalParameterSimpleType = Field(
        ..., description='critical temperature (???) [oC]'
    )
    a: ExternalParameterSimpleType = Field(
        ..., description='degree day factor [mm/(oC*day)]'
    )
    area: ExternalParameterSimpleType = Field(..., description='area [km2]')


class SRMStateComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    PStorage_Vector: TimeSeriesSimpleType = Field(
        ...,
        alias='PStorage-Vector',
        description='snow storage of non-snow-covered areas [mm]',
    )
    Q: TimeSeriesSimpleType = Field(..., description='discharge [m3/s]')


class SnowRainJunctionComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputSnowRainJunctionComplexType
    output: OutputSnowRainJunctionComplexType
    parameter: ParameterSnowRainJunctionComplexType


class SoilRunoffStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputSoilRunoffStorageSystemComplexType
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterSoilRunoffStorageSystemComplexType


class SpreadsheetInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x1: TimeSeriesSimpleType.Field14
    x2: TimeSeriesSimpleType.Field15
    x3: Optional[TimeSeriesSimpleType.Field16] = None


class SpreadsheetOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    status: TimeSeriesSimpleType


class SpreadsheetRecordComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_x1: XsDouble
    attr_x2: XsDouble
    attr_x3: Optional[XsDouble] = None
    attr_y: XsDouble


class SpreadsheetTableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_initialState: Optional[XsDouble] = None
    record: List[SpreadsheetRecordComplexType] = Field(..., min_items=1)


class SpreadsheetTablesComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    table: List[SpreadsheetTableComplexType] = Field(..., min_items=1)


class StorageCharacteristicsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    maximumLevel: Optional[XsDouble] = Field(
        None,
        description='Maximum water level h in the reservoir: this optional value does not limit the water level, it is used however to compute the relative filling percentage of the reservoir according to s = S/S(maximumLevel), where S is the absolute storage volume',
    )
    storageEquation: Optional[EquationsComplexType] = Field(
        None, description='Storage equation, storage S = f(water level h)'
    )
    storageTable: Optional[ElevationTableComplexType] = Field(
        None, description='Storage table with pairs of elevation h and storage S'
    )


class StorageSystemSettingsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    acceptableConvergenceThreshold: Optional[XsDouble] = Field(
        None,
        description='optional threshold after reaching the maximum number of iterations, writes a warning if reached, writes error otherwise',
    )
    convergenceThreshold: XsDouble = Field(
        ..., description='iteration stops after reaching this threshold'
    )
    treatNonConvergenceAsError: XsBoolean = Field(
        ...,
        description='treat non-convergence related to the thresholds as error or not',
    )


class TableLookupTableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    record: List[DateRecord2DataComplexType] = Field(..., min_items=1)


class TailwaterEquationComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    A: ExternalParameterSimpleType
    B: ExternalParameterSimpleType
    C: ExternalParameterSimpleType
    D: Optional[ExternalParameterSimpleType] = None
    FBDown: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='time series reference to forebay elevation of the downstream project, only required if B is non-zero',
    )


class TailwaterOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    head: TimeSeriesSimpleType = Field(..., description='head [m]')
    level: TimeSeriesSimpleType = Field(..., description='tailwater level [m]')


class TailwaterTidalEquationComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    A: ExternalParameterSimpleType
    QObs: TimeSeriesSimpleType
    TWObs: TimeSeriesSimpleType


class ThunerseeRuleInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    catchment: TimeSeriesSimpleType
    inflow: TimeSeriesSimpleType
    level: TimeSeriesSimpleType


class ThunerseeRuleOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    active: Optional[TimeSeriesSimpleType] = None
    releaseTotal: TimeSeriesSimpleType
    releaseTunnel: TimeSeriesSimpleType
    releaseWeir: TimeSeriesSimpleType


class TimeAbsoluteInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    x: TimeSeriesSimpleType


class TimeAbsoluteOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    y: TimeSeriesSimpleType


class TimeRelativeControlTableRecordComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_time: XsDouble
    attr_value: XsDouble


class TimeRelativeInputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    y: TimeSeriesSimpleType = Field(
        ...,
        description='optional input for deriving the timeActive in case of the relative from Value option',
    )


class TimeRelativeOutputComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    timeActive: TimeSeriesSimpleType
    y: TimeSeriesSimpleType


class TimeStepComplexType(RtcBaseModel):
    """
    The timeunit element has three attributes, unit and devider and multiplier.
            the unit is second, minute, hour, week, month year.
            The divider attribute is optional (default = 1).
    """

    class Config:
        extra = Extra.forbid

    attr_divider: Optional[XsPositiveInteger] = None
    attr_multiplier: Optional[XsPositiveInteger] = None
    attr_unit: TimeStepUnitEnumStringType


class TriggerControllerComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    input: TimeSeriesSimpleType
    value: XsInteger


class TurbineCapacityCharacteristicsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    capacityEquation: Optional[EquationsComplexType] = Field(
        None,
        description='capacity equation of hydropower turbine as a function of the water head',
    )
    capacityTable: Optional[ElevationTableComplexType] = Field(
        None,
        description='capacity table of hydropower turbine as a function of the water head',
    )


class TurbineCharacteristicsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    efficiencyTable: ElevationTableComplexType = Field(
        ...,
        description='efficiency table unit power output [MW / m3/s] as function of head [m] ',
    )
    output: TurbineOutputCharacteristicsComplexType


class TurbineEfficiencyCharacteristicsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    efficiencyConstant: Optional[XsDouble] = Field(
        None,
        description='constant efficiency over all discharges, typical range is [0.80, 0.90]',
    )


class TurbineEfficiencyTableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    columns: ColumnsComplexType = Field(
        ..., description='column Ids refering to the head [m] of each column'
    )
    maxFlows: MaxFlowsComplexType = Field(
        ..., description='maximum flow for a given head (provided above)'
    )
    row: List[RowComplexType] = Field(..., min_items=1)


class TypicalProfileComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    data: List[DataTypicalProfileComplexType] = Field(..., min_items=1)
    output: TimeSeriesSimpleType


class UnitDelayComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: UnitDelayInputComplexType
    nStep: Optional[ExternalParameterSimpleType] = Field(
        None,
        description='nStep optionally provides a delay with an arbitrary numer of time steps or sub time step, i.e. 1.5 time steps, if being used also specify the yFinal tag in the output options',
    )
    output: UnitDelayOutputComplexType = Field(
        ...,
        description='The configuration of a multiple unit delay requires the configuration of a time series for each delay time step',
    )


class UnitHydrographWeightCustomComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    weight: List[XsDouble] = Field(..., min_items=1)


class UnitHydrographWeightTriangularComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    factor: Optional[XsDouble] = Field(
        None, description='sum of all weight, if not equal to 1.0'
    )
    nSteps: ExternalParameterSimpleType = Field(..., description='number of time steps')


class ValidPeriodComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    endDate: DateComplexType
    startDate: DateComplexType


class ValidPeriodsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    validPeriod: Optional[List[ValidPeriodComplexType]] = None


class ValueArrayComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    value: List[XsFloat] = Field(..., min_items=1)


class YDimComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    yDim: List[XsFloat] = Field(..., min_items=1)


class ZoneComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_max: Optional[TimeSeriesSimpleType] = None
    attr_min: Optional[TimeSeriesSimpleType] = None
    dateTable: DateTableComplexType


class ZonesComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    zone: List[ZoneComplexType] = Field(..., min_items=1)


class EvaporationActualStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputEvaporationActualStorageSystemComplexType
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterEvaporationActualStorageSystemComplexType


class EvaporationInterceptionStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputEvaporationInterceptionStorageSystemComplexType
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterEvaporationInterceptionStorageSystemComplexType


class GroundwaterFlowStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputGroundwaterFlowStorageSystemComplexType
    output: OutputLinkStorageSystemComplexType
    parameter: ParametergroundwaterFlowStorageSystemComplexType


class IrrigationStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    nodeD: XsString = Field(
        ..., description='downstream node which recieves the irrigation water'
    )
    nodeU: XsString = Field(
        ...,
        description='upstream node, source of water usually the drinking water treatment plant',
    )
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterIrrigationStorageSystemComplexType


class MeltRefreezingStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: TimeSeriesSimpleType = Field(
        ..., description='instanteneous temperature [oC]'
    )
    nodeD: XsString = Field(
        ..., description='downstream node, typically WC (water content)'
    )
    nodeU: XsString = Field(..., description='upstream node, typically SP (snow pack)')
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterMeltRefreezingStorageSystemComplexType


class ReleaseAboveThresholdStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputReleaseAboveThresholdStorageSystemComplexType
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterReleaseAboveThresholdStorageSystemComplexType


class ReleaseWaterContentStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    nodeA: XsString = Field(
        ..., description='auxiliary node with snow pack, typically SP (snow pack)'
    )
    nodeU: XsString = Field(
        ..., description='upstream node, typically WC (water content)'
    )
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterReleaseWaterContentStorageSystemComplexType


class WaterDistributionConstantStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputWaterDistributionConstantStorageSystemComplexType
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterWaterDistributionConstantStorageSystemComplexType


class WaterDistributionVariableStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputWaterDistributionVariableStorageSystemComplexType
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterWaterDistributionVariableStorageSystemComplexType


class AccumulationComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: AccumulationInputComplexType = Field(..., description='input variable')
    multiplier: Optional[XsDouble] = Field(None, description='optional multiplier')
    output: AccumulationOutputComplexType


class AebiRuleComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    FactorRTG: XsDouble
    LangeteFall: CaseLangetenEnumStringType
    input: AebiRuleInputComplexType
    output: AebiRuleOutputComplexType


class AllocationTableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputATableComplexType
    output: OutputATableComplexType
    table: Optional[ATableComplexType] = None
    tableExternal: Optional[XsString] = None


class ArmaComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    arCoef: XsDouble = Field(
        ..., description='autoregression coefficient related to prior time step'
    )
    input: ArmaInputComplexType
    output: ArmaOutputComplexType


class CapacityCharacteristicsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_reference: Optional[CapacityReferenceEnumStringType] = None
    capacityEquation: Optional[EquationsComplexType] = None
    capacityTable: Optional[ElevationTableComplexType] = None


class CapillaryFlowStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputCapillaryFlowStorageSystemComplexType
    output: OutputLinkStorageSystemComplexType
    parameter: ParameterCapillaryFlowStorageSystemComplexType


class ConstantRuleComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    constant: XsDouble
    output: ConstantRuleOutputComplexType


class ControlledOutletComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    capacityCharacteristics: CapacityCharacteristicsComplexType = Field(
        ...,
        description='Maximum capacity of outlet as function of the water level h, minimum capacity is assumed to be zero',
    )
    input: OutletInputComplexType
    output: OutletOutputComplexType
    turbineCharacteristics: Optional[TurbineCharacteristicsComplexType] = Field(
        None, description='Characteristics of optional turbine'
    )


class CrossSectionComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    crossSectionTable: ElevationTableComplexType = Field(
        ..., description='Tabulated cross section, pairs of elevation h and width b '
    )


class CrossSectionRoughnessComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    roughnessTable: ElevationTableComplexType = Field(
        ..., description='Pairs of elevation h and roughness C (according to Chezy)'
    )


class DateRecord2ComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_monthDay: XsGMonthDay
    record: List[DateRecord2DataComplexType] = Field(..., min_items=1)


class DeadBandValueComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: DeadBandValueInputComplexType
    threshold: XsDouble


class EvaporationPotentialComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: InputEvaporationPotentialComplexType
    output: OutputEvaporationPotentialComplexType
    parameter: ParameterEvaporationPotentialComplexType


class GradientComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: GradientInputComplexType = Field(..., description='input variable')
    multiplier: Optional[XsDouble] = Field(None, description='optional multiplier')
    output: GradientOutputComplexType = Field(
        ..., description='gradient, dx = multiplier*(xNew-xOld)/dt'
    )


class GuideBandRuleComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: GuideBandRuleInputComplexType
    output: GuideBandRuleOutputComplexType
    xMax: DateTableComplexType
    xMin: DateTableComplexType
    yMax: Optional[XsDouble] = None
    yMaxSeries: Optional[TimeSeriesSimpleType] = None
    yMin: Optional[XsDouble] = None
    yMinSeries: Optional[TimeSeriesSimpleType] = None


class HBVComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: HBVInputComplexType
    link: Optional[HBVLinkComplexType] = None
    output: HBVOutputComplexType
    parameterInput: HBVParameterInputComplexType
    parameterInterception: HBVParameterInterceptionComplexType
    parameterResponse: HBVParameterResponseComplexType
    parameterSnow: HBVParameterSnowComplexType
    parameterSoil: HBVParameterSoilComplexType
    state: HBVStateComplexType
    stateUpdate: Optional[HBVStateUpdateComplexType] = None


class IntervalComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    deadbandSetpointAbsolute: Optional[XsDouble] = None
    deadbandSetpointRelative: Optional[XsDouble] = None
    input: IntervalInputComplexType
    output: IntervalOutputComplexType
    settingAbove: XsDouble
    settingBelow: XsDouble
    settingMaxSpeed: Optional[XsDouble] = None
    settingMaxStep: Optional[XsDouble] = None


class LimiterComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: LimiterInputComplexType
    mode: LimiterOptionEnumStringType


class LinkStorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    capillaryFlow: Optional[CapillaryFlowStorageSystemComplexType] = Field(
        None,
        description='capillary flow, typically from GW (saturated upper zone - ground water) to UZ (unsaturated zone)',
    )
    evaporationActual: Optional[EvaporationActualStorageSystemComplexType] = Field(
        None, description='actual evaporation from unsaturated zone storage node'
    )
    evaporationInterception: Optional[
        EvaporationInterceptionStorageSystemComplexType
    ] = Field(
        None,
        description='evaporation from interception storage node, typically VEG/P/UP (vegeration/paved interception)',
    )
    groundwaterFlow: Optional[GroundwaterFlowStorageSystemComplexType] = Field(
        None, description='GW Groundwater interaction with SW Surface water'
    )
    irrigation: Optional[IrrigationStorageSystemComplexType] = Field(
        None,
        description='NOT REFACTORED. water consumption by domestic irrigation due to dry soil',
    )
    meltRefreezing: Optional[MeltRefreezingStorageSystemComplexType] = Field(
        None,
        description='NOT REFACTORED. melting and refreezing, typically used between SP (snow pack) and WC (water content) nodes',
    )
    percolation: Optional[PercolationStorageSystemComplexType] = Field(
        None,
        description='percolation, typically from GW upper zone to GW lower zone), or from UP unpaved surface to UZ unsaturated zone',
    )
    releaseInterception: Optional[
        ReleaseAboveThresholdStorageSystemComplexType
    ] = Field(
        None,
        description='release above threshold from interception storage node, typically VEG/P/UP (uses relese above threshold link)',
    )
    releaseWaterContent: Optional[ReleaseWaterContentStorageSystemComplexType] = Field(
        None,
        description='NOT REFACTORED. release from water content storage node (typically WC)',
    )
    response: Optional[ResponseStorageSystemComplexType] = Field(
        None,
        description='response from storage node, typically GW upper and GW lower zone storage nodes',
    )
    sewerOverflow: Optional[ReleaseAboveThresholdStorageSystemComplexType] = Field(
        None, description='sewer overflow (uses relese above threshold link)'
    )
    soilRunoff: Optional[SoilRunoffStorageSystemComplexType] = Field(
        None,
        description='soil runoff from UZ unsaturated zone to GW upper zone storage node',
    )
    wasteWaterTreatmentPlant: Optional[
        WaterDistributionConstantStorageSystemComplexType
    ] = Field(
        None,
        description='water treated via the WWTP, flows at a max rate of a constant max pump capacity. Uses water distribution constant link',
    )
    waterDistributionConstant: Optional[
        WaterDistributionConstantStorageSystemComplexType
    ] = Field(
        None,
        description='water abstraction/distribution/consumption referenced to a constant demand (e.i. maxpump capacity). Uses water distribution constant link',
    )
    waterDistributionVariable: Optional[
        WaterDistributionVariableStorageSystemComplexType
    ] = Field(
        None,
        description='water abstraction/distribution/consumption referenced to a variable demand (e.i. domestic or industrial water demands). Uses water distribution variable link)',
    )


class LookupTableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    extrapolationOption: Optional[InterpolationOptionEnumStringType] = Field(
        None,
        description='table interpolation can be BLOCK or LINEAR, default setting if not provided is LINEAR',
    )
    input: LookupTableInputComplexType
    interpolationOption: Optional[InterpolationOptionEnumStringType] = Field(
        None,
        description='table interpolation can be BLOCK or LINEAR, default setting if not provided is LINEAR',
    )
    output: LookupTableOutputComplexType
    property: Optional[List[PropertyEnum]] = None
    table: Optional[TableLookupTableComplexType] = None
    tableExternal: Optional[XsString] = None


class LorentGeversComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: LorentGeversInputComplexType
    output: LorentGeversOutputComplexType
    parameterResponse: LorentGeversParameterResponseComplexType
    parameterSoil: LorentGeversParameterSoilComplexType
    state: LorentGeversStateComplexType
    stateUpdate: Optional[LorentGeversStateUpdateComplexType] = None


class MergerComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: MergerInputComplexType
    output: MergerOutputComplexType


class MergerSplitterComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: MergerSplitterInputComplexType
    mode: MergerSplitterEnumStringType
    output: MergerSplitterOutputComplexType


class MinSimpleRuleComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    dateTable: Optional[DateTableComplexType] = None
    zones: Optional[ZonesComplexType] = None


class NeuronComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: NeuronIDSimpleType
    attr_name: Optional[XsString] = None
    bias: ExternalParameterSimpleType
    input: NeuronInputComplexType
    output: NeuronOutputComplexType
    transferFunction: TransferFunctionEnumStringType = Field(
        ..., description='transfer function: sigmoid, linear etc.'
    )


class NodeComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_x: Optional[XsDouble] = None
    attr_y: Optional[XsDouble] = None
    input: Optional[NodeInputComplexType] = None
    output: NodeOutputComplexType
    storageCharacteristics: StorageCharacteristicsComplexType = Field(
        ...,
        description='Storage characteristics of the node: The storage as a function of water level h. It can be provided as table or as a formula.',
    )


class OrificeComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    contractionCoefficient: XsDouble
    crestLevel: XsDouble
    exponentGateFormula: Optional[XsDouble] = None
    exponentWeirFormula: Optional[XsDouble] = None
    flowDirection: Optional[FlowDirectionEnumStringType] = None
    input: OrificeInputComplexType
    output: OrificeOutputComplexType
    width: XsDouble


class PumpComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    input: PumpInputComplexType
    output: PumpOutputComplexType


class ReservoirCompactComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: ReservoirCompactInputComplexType = Field(
        ..., description='input time series'
    )
    levelStorageEquation: Optional[LevelStorageEquationComplexType] = Field(
        None,
        description='level storage equation according to S = A0 + A1*FB ( + A2*FB^2 + ...)',
    )
    levelStorageTable: Optional[ElevationTableComplexType] = Field(
        None,
        description='level-storage relation of the reservoir, level in [m] or [ft], storage in [m3] or [KCFS-hrs]',
    )
    levelStorageTableExternal: Optional[XsString] = Field(
        None,
        description='externalizes the level storage table to a parameter file, requires the two columns "level" and "storage"',
    )
    output: ReservoirCompactOutputComplexType = Field(
        ..., description='output time series'
    )
    tailwaterConstant: Optional[ExternalParameterSimpleType] = Field(
        None, description='constant value for tailwater elevation'
    )
    tailwaterEquation: Optional[TailwaterEquationComplexType] = Field(
        None,
        description='tailwater equation according to TW = A + B*FB_downstream(t-1) + C*Q(t)^D, D is equal 1.0 by default if not provided',
    )
    tailwaterExternalTable: Optional[XsString] = Field(
        None, description='external tailwater table'
    )
    tailwaterExternalTimeSeries: Optional[TimeSeriesSimpleType] = Field(
        None,
        description='external tailwater elevation from an external source or a previous calculation OUTSIDE of the reservoirCompact components',
    )
    tailwaterTable: Optional[ElevationTableComplexType] = Field(
        None, description='tailwater as a function of the reservoir release only'
    )
    tailwaterTidalEquation: Optional[TailwaterTidalEquationComplexType] = Field(
        None,
        description='tidal influenced tailwater equation (works only in hindcast mode, use tailwater external with appropiate forecast of the tailwater in operational forecasting), TW = TWObs + A*(Q-QObs)',
    )
    turbineEfficiencyConstant: Optional[ExternalParameterSimpleType] = None
    turbineEfficiencyTable: Optional[ElevationTableComplexType] = Field(
        None, description='old formulation, will be removed in the future'
    )
    turbineEfficiencyTable2D: Optional[TurbineEfficiencyTableComplexType] = Field(
        None,
        description='new formulation, turbine effiency depends on head and turbine release, computation by 2D lookup',
    )
    turbineEfficiencyTable2DExternal: Optional[XsString] = None
    turbineEfficiencyTableExternal: Optional[XsString] = None
    units: Optional[UnitTypeEnumStringType] = Field(
        None, description=' "SI" or "Imperial" units'
    )


class ReservoirThunerseeRuleComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    storageCharacteristics: StorageCharacteristicsComplexType


class RiverWeirComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    exponentWeirFormula: Optional[XsDouble] = None
    flowDirection: Optional[FlowDirectionEnumStringType] = None
    input: RiverWeirInputComplexType
    output: RiverWeirOutputComplexType
    submergedFlowFactor: Optional[XsDouble] = None
    submergedFlowRatio: Optional[XsDouble] = None
    width: XsDouble


class SRMComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: SRMInputComplexType
    output: SRMOutputComplexType
    parameter: SRMParameterComplexType
    parameterZone: List[SRMParameterZoneComplexType] = Field(..., min_items=1)
    state: SRMStateComplexType


class SimpleReservoirComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_multiplier: Optional[int] = Field(None, ge=1)
    capacityCharacteristics: CapacityCharacteristicsComplexType
    storageCharacteristics: StorageCharacteristicsComplexType


class StorageSystemComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    link: List[LinkStorageSystemComplexType] = Field(..., min_items=1)
    output: Optional[OutputStorageSystemComplexType] = None
    settings: Optional[StorageSystemSettingsComplexType] = None
    storageNode: List[NodeStorageSystemComplexType] = Field(..., min_items=1)


class SubmodelComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    evaporationPotential: Optional[EvaporationPotentialComplexType] = Field(
        None, description='potential evaporation'
    )
    snowRainJunction: Optional[SnowRainJunctionComplexType] = Field(
        None, description='separates precipitation into snow and rainfall'
    )
    storageSystem: Optional[StorageSystemComplexType] = Field(
        None,
        description='storage systems with storage nodes and links for setting up bucket models',
    )
    typicalProfile: Optional[TypicalProfileComplexType] = None


class TailwaterComplexType(RtcBaseModel):
    """
    
                Table containing data for different elevations. Type of element 'value'
                depends on purpose for which table is used.
            
    """

    class Config:
        extra = Extra.forbid

    constant: Optional[XsDouble] = Field(
        None, description='Constant tailwater level [m]'
    )
    output: TailwaterOutputComplexType
    ratingCurve: Optional[ElevationTableComplexType] = Field(
        None, description='Tailwater depending on discharge computed by a rating curve'
    )


class TimeAbsoluteComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: TimeAbsoluteInputComplexType
    output: TimeAbsoluteOutputComplexType


class TimeRelativeControlTableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    record: List[TimeRelativeControlTableRecordComplexType] = Field(..., min_items=1)


class TunnelThunerseeRuleComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    capacityCharacteristics: CapacityCharacteristicsComplexType
    levelThreshold: XsDouble


class TurbineComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    capacityCharacteristics: TurbineCapacityCharacteristicsComplexType
    efficiencyCharacteristics: TurbineEfficiencyCharacteristicsComplexType
    input: TurbineInputComplexType
    nodeDown: XsString
    nodeUp: XsString
    output: TurbineOutputComplexType


class UncontrolledOutletComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    capacityCharacteristics: CapacityCharacteristicsComplexType = Field(
        ...,
        description='Maximum capacity of outlet as function of the water level h, minimum capacity is assumed to be zero',
    )
    input: Optional[UOutletInputComplexType] = None
    output: OutletOutputComplexType


class UnitHydrographWeightComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    custom: Optional[UnitHydrographWeightCustomComplexType] = Field(
        None, description='user-defined weights'
    )
    triangular: Optional[UnitHydrographWeightTriangularComplexType] = Field(
        None, description='weights with triangular shape'
    )


class WeirThunerseeRuleComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    capacityCharacteristics: CapacityCharacteristicsComplexType


class XDimComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    xDim: List[YDimComplexType] = Field(..., min_items=1)


class BranchComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    alpha1: Optional[XsDouble] = Field(
        None,
        description='the wind friction coefficient is given by Cw = alpha1 + alpha2 * Vw, with wind velocity Vw',
    )
    alpha2: Optional[XsDouble] = Field(
        None,
        description='the wind friction coefficient is given by Cw = alpha1 + alpha2 * Vw, with wind velocity Vw',
    )
    crossSection: CrossSectionComplexType = Field(
        ..., description='Cross section in the center of the flow branch.'
    )
    equationType: Optional[EquationEnumStringType] = None
    input: BranchInputComplexType
    length: XsDouble = Field(..., description='Length of the flow branch')
    output: BranchOutputComplexType
    roughness: CrossSectionRoughnessComplexType = Field(
        ..., description='Roughness (Chezy) as a function of elevation h'
    )
    slope: Optional[XsDouble] = Field(
        None, description='slope for optional kinematic wave branch'
    )
    spatialScheme: Optional[SpatialEnumStringType] = None


class DateLookupTableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    dateRecord: List[DateRecord2ComplexType] = Field(..., min_items=1)
    input: DateLookupTableInputComplexType
    interpolationOptions: InterpolationOptionsComplexType = Field(
        ...,
        description='Interpolation option BLOCK / LINEAR for the two inputs date and value',
    )
    output: DateLookupTableOutputComplexType


class HydraulicStructureComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    orifice: Optional[OrificeComplexType] = Field(
        None, description='Orifice according to definition in SOBEK-Rural'
    )
    pump: Optional[PumpComplexType] = Field(None, description='Pump')
    weir: Optional[RiverWeirComplexType] = Field(
        None, description='Weir according to definition in SOBEK-River'
    )


class HydrologicalModelComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    submodel: List[SubmodelComplexType] = Field(..., min_items=1)


class LayerComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: LayerIDSimpleType
    attr_name: Optional[XsString] = None
    neuron: List[NeuronComplexType] = Field(..., min_items=1)


class NeuralNetworkComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    layer: List[LayerComplexType] = Field(..., min_items=1)


class ReservoirComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    controlledOutlet: Optional[List[ControlledOutletComplexType]] = None
    input: ReservoirInputComplexType
    mode: PoolRoutingEnumStringType = Field(
        ..., description='Time integration scheme for the network components'
    )
    output: ReservoirOutputComplexType
    storageCharacteristics: StorageCharacteristicsComplexType = Field(
        ...,
        description='Storage characteristics of the reservoir: The storage S as a function of the water level h can be provided as a table or formula.',
    )
    tailwater: Optional[TailwaterComplexType] = Field(
        None, description='Tailwater rating curve\n                    '
    )
    theta: XsDouble = Field(
        ...,
        description='Time weighting coefficient for the semi-implicit theta schema: 0 is equal to a full weight on the old time step, 1 represents a full weight on new time step. The coefficient is not used in the fully explicit or implicit schemas. The permitted range is between 0.5 and 1.0.',
    )
    uncontrolledOutlet: Optional[List[UncontrolledOutletComplexType]] = None


class ReservoirRoutingComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    simpleReservoir: List[SimpleReservoirComplexType] = Field(..., min_items=1)


class RoutingComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    dischargeRef: Optional[XsString] = Field(
        None, description='Reference to timeseries in data configuration'
    )
    inflow: Optional[List[InflowComplexType]] = None
    outputReferences: RoutingOutputComplexType = Field(
        ...,
        description='Contains references to the output timeseries in the data configuration',
    )
    reservoirRouting: Optional[ReservoirRoutingComplexType] = None


class Table2DLookupTableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    matrix: XDimComplexType
    x: ValueArrayComplexType
    y: ValueArrayComplexType


class ThunerseeRuleComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: ThunerseeRuleInputComplexType
    levelSetpoint: XsDouble
    output: ThunerseeRuleOutputComplexType
    releaseLimiterPercentage: XsDouble
    reservoir: ReservoirThunerseeRuleComplexType
    tunnel: TunnelThunerseeRuleComplexType
    weir: WeirThunerseeRuleComplexType


class TimeRelativeComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    controlTable: TimeRelativeControlTableComplexType = Field(
        ..., description='table with time [s] / value records'
    )
    input: Optional[TimeRelativeInputComplexType] = None
    interpolationOption: Optional[InterpolationOptionEnumStringType] = Field(
        None,
        description='table interpolation can be BLOCK or LINEAR, default setting if not provided is LINEAR',
    )
    maximumPeriod: Optional[XsDouble] = None
    mode: Optional[Mode1] = Field(
        None,
        description='timeRelative mode, either "NATIVE" or "RETAINVALUEWHENINACTIVE"',
    )
    output: TimeRelativeOutputComplexType
    valueOption: TimeRelativeEnumStringType = Field(
        ...,
        description='setting if the control table provides the absolute value or the relative value ',
    )


class UnitHydrographComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: UnitHydrographInputComplexType
    output: UnitHydrographOutputComplexType
    weights: UnitHydrographWeightComplexType


class HydraulicModelComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    branch: Optional[List[BranchComplexType]] = None
    hydraulicStructure: Optional[List[HydraulicStructureComplexType]] = None
    mode: HydraulicModelModeEnumStringType
    node: Optional[List[NodeComplexType]] = None
    numericalTolerance: XsDouble
    output: Optional[HydraulicModelOutputComplexType] = None
    sequentialImplicitSettings: Optional[
        HydraulicModelSequentialImplicitComplexType
    ] = None
    simultaneousSettings: Optional[HydraulicModelSimultaneousComplexType] = None


class Lookup2DTableComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    input: Lookup2DTableInputComplexType
    output: Lookup2DTableOutputComplexType
    table: Table2DLookupTableComplexType


class ComponentComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_template: Optional[XsString] = None
    accumulation: Optional[AccumulationComplexType] = Field(
        None, description='Accumulation of a time series over time'
    )
    allocationTable: Optional[AllocationTableComplexType] = None
    arma: Optional[ArmaComplexType] = Field(
        None, description='Arma error correction model'
    )
    expression: Optional[ExpressionComplexType] = Field(
        None, description='Mathematical expression'
    )
    gradient: Optional[GradientComplexType] = Field(
        None, description='Post processing for computing gradients of simulated values'
    )
    hbv: Optional[HBVComplexType] = Field(
        None,
        description='This is an implementation of the HBV-96 hydrological model. Note that the unit hydrograph is not included, but available separately.',
    )
    hydraulicModel: Optional[HydraulicModelComplexType] = Field(
        None,
        description='Simplifications of the full dynamic, one-dimensional hydraulic model according to the kinematic wave, diffusive wave and inertial assumptions.',
    )
    hydrologicalModel: Optional[HydrologicalModelComplexType] = Field(
        None,
        description='Modular, conceptual hydrological model with implicit time stepping scheme.',
    )
    lookup2DTable: Optional[Lookup2DTableComplexType] = None
    lookupTable: Optional[LookupTableComplexType] = None
    lorentGevers: Optional[LorentGeversComplexType] = Field(
        None, description='Lorent/Gevers hydrological model'
    )
    merger: Optional[MergerComplexType] = None
    mergerSplitter: Optional[MergerSplitterComplexType] = None
    neuralNetwork: Optional[NeuralNetworkComplexType] = None
    reservoir: Optional[ReservoirComplexType] = Field(
        None, description='Reservoir with arbitrary number of inlets and outlets.'
    )
    reservoirCompact: Optional[ReservoirCompactComplexType] = Field(
        None,
        description='Test implementation of a compact reservoir class for simultaneous and sequential optimization mode',
    )
    routing: Optional[RoutingComplexType] = Field(
        None, description='not implemented yet'
    )
    srm: Optional[SRMComplexType] = None
    unitDelay: Optional[UnitDelayComplexType] = Field(
        None,
        description='Unit delay operator for  delaying a value by n times the time step of the model.',
    )
    unitHydrograph: Optional[UnitHydrographComplexType] = Field(
        None, description='Unit hydrograph'
    )


class ComponentsComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    component: List[ComponentComplexType] = Field(..., min_items=1)


class Model(RtcBaseModel):
    """
    JSON Schema generated by XMLSpy v2019 rel. 3 sp1 (x64) (http://www.altova.com)
    """

    class Config:
        extra = Extra.forbid

    attr_xmlns_rtc: Optional[Any] = Field(
        'http://www.wldelft.nl/fews', alias='attr_xmlns:rtc'
    )
    attr_xmlns_xs: Optional[Any] = Field(
        'http://www.w3.org/2001/XMLSchema', alias='attr_xmlns:xs'
    )
    rtcToolsConfig: Optional[_.RtcToolsConfig] = None


class DeadBandTimeComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    discrete: DeadBandTimeDiscreteComplexType
    false: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    input: DeadBandTimeInputComplexType
    output: DeadBandTimeOutputComplexType
    true: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )


class DeadBandTriggerComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    conditionOff: RelationalConditionComplexType
    conditionOn: RelationalConditionComplexType
    default: Optional[XsBoolean] = None
    false: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    output: TriggerOutputComplexType
    true: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )


class PolygonLookupComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    default: Optional[XsDouble] = None
    false: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    input: PolygonLookupInputComplexType
    output: PolygonLookupOutputComplexType
    polygons: PolygonsComplexType
    true: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )


class RtcToolsConfigComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    components: Optional[ComponentsComplexType] = Field(
        None, description='The components section includes all simulation components.'
    )
    general: Optional[GeneralModuleConfigComplexType] = Field(
        None,
        description='OBSOLETE. Still here for backwards compatibility. Remove after next release.',
    )
    rules: Optional[RulesComplexType] = Field(
        None,
        description='The rules section includes operating rules or controllers for defining the release of reservoir, structural settings of gates etc.',
    )
    triggers: Optional[TriggersComplexType] = Field(
        None,
        description='Triggers may activate or deactivate rules defined in the section above.',
    )


class RuleComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    constant: Optional[ConstantRuleComplexType] = Field(
        None, description='Simple rule with constant value'
    )
    dateLookupTable: Optional[DateLookupTableComplexType] = Field(
        None,
        description='Date lookup table, output y is a function of date and an input value x, the interpolation on the date / value axis can be BLOCK or LINEAR, the number of records should be constant for each date record',
    )
    deadBandTime: Optional[DeadBandTimeComplexType] = None
    deadBandValue: Optional[DeadBandValueComplexType] = Field(
        None,
        description='Deadband threshold, yNew will become yOld, if the change yNew-yOld is smaller than the threshold value ',
    )
    dedicated_Aebi: Optional[AebiRuleComplexType] = Field(
        None,
        alias='dedicated-Aebi',
        description='Dedicated rule for the control of Bielersee, Canton Bern, CH',
    )
    dedicated_Thunersee: Optional[ThunerseeRuleComplexType] = Field(
        None,
        alias='dedicated-Thunersee',
        description='Dedicated rule for the control of Thunersee, Canton Bern, CH',
    )
    expression: Optional[ExpressionComplexType] = Field(
        None, description='mathematical expression'
    )
    guideband: Optional[GuideBandRuleComplexType] = Field(
        None,
        description='Guide band rule, output get 0 if input less equal xMin, 1 if input greater equal xMax, linear interpolation otherwise xMin and xMax can be a function of date, main application in combination with a relative release of a reservoir outlet',
    )
    interval: Optional[IntervalComplexType] = None
    limiter: Optional[LimiterComplexType] = Field(
        None,
        description='Limiter for limiting the change of a variable in a time step to a relative (PERCENTAGE) or absolute  (ABSOLUTE) change',
    )
    lookup2DTable: Optional[Lookup2DTableComplexType] = None
    lookupTable: Optional[LookupTableComplexType] = None
    merger: Optional[MergerComplexType] = Field(
        None, description='Data hierarchy, highest input has highest priority'
    )
    pid: Optional[PidComplexType] = None
    timeAbsolute: Optional[TimeAbsoluteComplexType] = Field(
        None, description='absolute time controller'
    )
    timeRelative: Optional[TimeRelativeComplexType] = Field(
        None, description='relative time controller'
    )
    unitDelay: Optional[UnitDelayComplexType] = Field(
        None,
        description='Unit delay operator for  delaying a value by n times the time step of the model.',
    )


class RuleTriggerComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    trigger: Optional[List[TriggerComplexType]] = None


class RulesComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    rule: List[RuleComplexType] = Field(..., min_items=1)


class SetTriggerComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    default: Optional[XsBoolean] = None
    false: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    logicalOperator: LogicalOperatorEnumStringType
    output: TriggerOutputComplexType
    true: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    x1Series: Optional[TimeSeriesSimpleType.Field24] = None
    x1Trigger: Optional[TriggerComplexType] = None
    x1Value: Optional[XsBoolean] = None
    x2Series: Optional[TimeSeriesSimpleType.Field25] = None
    x2Trigger: Optional[TriggerComplexType] = None
    x2Value: Optional[XsBoolean] = None


class SpreadsheetComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    defaultInputValue: Optional[XsDouble] = Field(
        None, description='default input value, if input is NaN or infinity'
    )
    defaultOutputValue: Optional[XsDouble] = Field(
        None, description='default output, if no combination of the table applies'
    )
    false: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    input: SpreadsheetInputComplexType
    output: SpreadsheetOutputComplexType
    tables: SpreadsheetTablesComplexType = Field(
        ...,
        description='number of tables with input, output values, the initial state can be taken into account optionally',
    )
    tolerance: XsDouble = Field(
        ...,
        description='tolerance for finding a match, keep in mind that the all variable are stored in doubles',
    )
    true: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    validPeriods: Optional[ValidPeriodsComplexType] = Field(
        None, description='optional period of the year for which the trigger is active'
    )


class StandardTriggerComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    attr_id: XsString
    attr_name: Optional[XsString] = None
    condition: RelationalConditionComplexType
    default: Optional[XsBoolean] = None
    false: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )
    output: TriggerOutputComplexType
    true: Optional[RuleTriggerComplexType] = Field(
        None,
        description='link the trigger event to either an other trigger           or to a rule. Use the item ID as link to rules',
    )


class TriggerComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    deadBand: Optional[DeadBandTriggerComplexType] = Field(
        None, description='trigger with deadband'
    )
    deadBandTime: Optional[DeadBandTimeComplexType] = Field(
        None, description='trigger with time deadband'
    )
    expression: Optional[ExpressionComplexType] = Field(
        None, description='mathematical expression'
    )
    lookupTable: Optional[LookupTableComplexType] = None
    merger: Optional[MergerComplexType] = Field(
        None, description='Data hierarchy, highest input has highest priority'
    )
    polygonLookup: Optional[PolygonLookupComplexType] = Field(
        None,
        description='trigger with two-dimensional lookup table, trigger results are defined by polygons',
    )
    ruleReference: Optional[XsString] = None
    set: Optional[SetTriggerComplexType] = Field(None, description='set of triggers')
    spreadsheet: Optional[SpreadsheetComplexType] = Field(
        None, description='spread sheet trigger'
    )
    standard: Optional[StandardTriggerComplexType] = Field(
        None, description='standard trigger'
    )


class TriggersComplexType(RtcBaseModel):
    class Config:
        extra = Extra.forbid

    trigger: List[TriggerComplexType] = Field(..., min_items=1)


Model.update_forward_refs()
DeadBandTimeComplexType.update_forward_refs()
DeadBandTriggerComplexType.update_forward_refs()
PolygonLookupComplexType.update_forward_refs()
RtcToolsConfigComplexType.update_forward_refs()
RuleTriggerComplexType.update_forward_refs()
SetTriggerComplexType.update_forward_refs()
